/**
 * Appcelerator Titanium Mobile
 * Copyright (c) 2011-2020 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
var customProperties = {};

function lazyGet(object, binding, name, namespace, bindingGetter) {
	delete object[name];
	delete object.__proto__[name];

	// This allows overriding of the "binding" lookup
	// which is mostly used for 3rd party modules
	if (bindingGetter === undefined) {
		bindingGetter = kroll.binding;
	}

	// deal with "value" here so we don't accidentally re-invoke the getter
	var value = bindingGetter(binding)[name];
	object[name] = object.__proto__[name] = value;

	if (namespace && namespace in customProperties) {
		Object.defineProperties(value, customProperties[namespace]);
	}
	return value;
}
exports.lazyGet = lazyGet;

exports.defineProperties = function(namespace, properties) {
	if (!(namespace in customProperties)) {
		customProperties[namespace] = {};
	}

	kroll.extend(customProperties[namespace], properties);
}

function defineLazyGetter(namespace, name, getter) {
	if (!(namespace in customProperties)) {
		customProperties[namespace] = {};
	}

	var descriptor = {
		get: function() {
			var self = this;
			while (!self.hasOwnProperty(name) && self !== null) {
				self = Object.getPrototypeOf(this);
			}
			if (self === null) {
				throw new Error("Unable to find property on prototype chain.");
			}

			delete self[name];
			var value = self[name] = getter.call(self);
			return value;
		},
		configurable: true
	};

	customProperties[namespace][name] = descriptor;
}
exports.defineLazyGetter = defineLazyGetter;

exports.defineLazyBinding = function(object, binding) {
	Object.defineProperty(object, binding, {
		get: function() {
			return lazyGet(object, binding, binding);
		},
		configurable: true
	});
}

function addInvocationAPI(module, namespace, api) {
	const apiInfo = { namespace: namespace, api: api };
	module.invocationAPIs.push(apiInfo);
}
exports.addInvocationAPI = addInvocationAPI;

function bootstrapGlobals(global, Titanium) {
	// Below this is where generated global bindings go
	// ----
<% globals.forEach(global => { -%>
	global.<%- global.name %> = function(...args) {
		return <%- global.delegate %>.<%- global.method %>.apply(<%- global.delegate %>, args);
	};
<% }); -%>
}
exports.bootstrapGlobals = bootstrapGlobals;

exports.bootstrap = function(Titanium) {
	if (Titanium.invocationAPIs == null) {
		Titanium.invocationAPIs = [];
	}

	bootstrapGlobals(global, Titanium);

	// Below this is where the generated code
	// from genBootstrap.js goes
	// ----
<% invocationAPIs.forEach(function (api) { -%>
	addInvocationAPI(Titanium, '<%- api.namespace %>', '<%- api.apiName %>');
<% }); -%>

	<%- include('bootstrap.lazymodule.js.ejs', { mod, name: 'Titanium' }); %>
}
