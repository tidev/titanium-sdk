/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2020 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */

package <%- moduleId %>

import android.app.Activity
import org.appcelerator.kroll.KrollDict
import org.appcelerator.kroll.annotations.Kroll
import org.appcelerator.kroll.common.Log
import org.appcelerator.kroll.common.TiConfig
import org.appcelerator.titanium.TiC
import org.appcelerator.titanium.proxy.TiViewProxy
import org.appcelerator.titanium.util.TiConvert
import org.appcelerator.titanium.view.TiCompositeLayout
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement
import org.appcelerator.titanium.view.TiUIView

// This proxy can be created by calling <%- moduleNameCamel %>.createExample({ message: 'hello world' })
@Kroll.proxy(creatableInModule = <%- moduleNameCamel %>Module::class)
class ExampleProxy : TiViewProxy() {
	
	companion object {
		// Standard Debugging variables
		private const val LCAT = "ExampleProxy"
		private val DBG = TiConfig.LOGD
	}

	private inner class ExampleView(proxy: TiViewProxy) : TiUIView(proxy) {
		override fun processProperties(d: KrollDict) {
			super.processProperties(d)
		}

		init {
			var arrangement = LayoutArrangement.DEFAULT
			if (proxy.hasProperty(TiC.PROPERTY_LAYOUT)) {
				val layoutProperty = TiConvert.toString(proxy.getProperty(TiC.PROPERTY_LAYOUT))
				if (layoutProperty == TiC.LAYOUT_HORIZONTAL) {
					arrangement = LayoutArrangement.HORIZONTAL
				} else if (layoutProperty == TiC.LAYOUT_VERTICAL) {
					arrangement = LayoutArrangement.VERTICAL
				}
			}
			setNativeView(TiCompositeLayout(proxy.activity, arrangement))
		}
	}

	override fun createView(activity: Activity): TiUIView {
		val view: TiUIView = ExampleView(this)
		view.layoutParams.autoFillsHeight = true
		view.layoutParams.autoFillsWidth = true
		return view
	}

	// Handle creation options
	override fun handleCreationDict(options: KrollDict) {
		super.handleCreationDict(options)
		if (options.containsKey("message")) {
			Log.d(LCAT, "example created with message: " + options["message"])
		}
	}

	// Methods

	@Kroll.method
	fun printMessage(message: String) {
		Log.d(LCAT, "printing message: $message")
	}

	// Properties

	@get:Kroll.getProperty
	@set:Kroll.setProperty
	var message: String
		get() = "Hello World from my module"
		set(message) {
			Log.d(LCAT, "Tried setting module message to: $message")
		}
}
