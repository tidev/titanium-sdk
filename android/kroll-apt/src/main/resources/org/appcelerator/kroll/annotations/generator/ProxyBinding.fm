<#macro getRequiredArgumentCount args>
	<#local count = 0>
	<#list args as arg>
		<#if arg?keys?seq_contains("optional")>
			<#if !arg.optional>
				<#local count = count + 1>
			</#if>
		<#elseif arg.type = "java.lang.Object[]">
			<#break>
		<#else>
			<#local count = count + 1>
		</#if>
	</#list>
	<#nested count>
</#macro>

<#macro listChildModules>
	<#if isModule>
		<#list allModules?keys as module>
			<#if module = packageName+"."+proxyClassName>
				<#if allModules[module].childModules??>
					<#list allModules[module].childModules as childModule>
						<#nested childModule_index==0, childModule>
					</#list>
				</#if>
			</#if>
		</#list>
	</#if>
</#macro>

<#function hasCreateProxies>
	<#if isModule>
		<#list allModules?keys as module>
			<#if module = packageName+"."+proxyClassName>
				<#if allModules[module].createProxies??>
					<#return true>
				</#if>
			</#if>
		</#list>
	</#if>
	<#return false>
</#function>

<#macro listCreateProxies>
	<#if isModule>
		<#list allModules?keys as module>
			<#if module = packageName+"."+proxyClassName>
				<#if allModules[module].createProxies??>
					<#list allModules[module].createProxies as createProxy>
						<#nested createProxy_index==0, createProxy, createProxy_has_next>
					</#list>
				</#if>
			</#if>
		</#list>
	</#if>
</#macro>

<#macro listMethods>
	<#if methods??>
		<#list methods?keys as methodName>
			<#local method = methods[methodName]>
			<#local signature>
				<@getMethodSignature method.args, method.returnType, false/>
			</#local>
			<#local isDynamic = isDynamicProperty(methodName)>
			<#nested methodName_index==0, methodName, method, signature, isDynamic, methodName_has_next>
		</#list>
	</#if>
</#macro>

<#macro listConstants>
	<#if constants??>
		<#list constants?keys as constantName>
			<#local constant = constants[constantName]>
			<#nested constantName_index==0, constantName, constant>
		</#list>
	</#if>
</#macro>

<#macro listProperties>
	<#if properties??>
		<#list properties?keys as propertyName>
			<#local property = properties[propertyName]>
			<#nested propertyName_index==0, propertyName, property>
		</#list>
	</#if>
</#macro>

<#macro listDynamicProperties>
	<#if dynamicProperties??>
		<#list dynamicProperties?keys as propertyName>
			<#local dynamicProperty = dynamicProperties[propertyName]>
			<#if dynamicProperty.get>
				<#local getSignature>
					<@getMethodSignature dynamicProperty.getMethodArgs, dynamicProperty.getReturnType, dynamicProperty.getHasInvocation/>
				</#local>
			<#else>
				<#local getSignature = "">
			</#if>
			<#if dynamicProperty.set>
				<#local setSignature>
					<@getMethodSignature dynamicProperty.setMethodArgs, dynamicProperty.setReturnType, dynamicProperty.setHasInvocation/>
				</#local>
			<#else>
				<#local setSignature = "">
			</#if>
			<#nested propertyName_index==0, propertyName, dynamicProperty, getSignature, setSignature>
		</#list>
	</#if>
</#macro>

<#-- returns whether or not a method name has @Kroll.getProperty or @Kroll.setProperty -->
<#function isDynamicProperty methodName>
	<#if dynamicProperties??>
		<#list dynamicProperties?keys as propertyName>
			<#local dynamicProperty = dynamicProperties[propertyName]>
			<#if dynamicProperty.get>
				<#if methodName = dynamicProperty.getMethodName>
					<#return true>
				</#if>
			</#if>
			<#if dynamicProperty.set>
				<#if methodName = dynamicProperty.setMethodName>
					<#return true>
				</#if>
			</#if>
		</#list>
	</#if>
	<#return false>
</#function>

<#macro listPropertyAccessors>
	<#list proxyAttrs.propertyAccessors as accessor>
		<#local upperCamel = accessor?substring(0, 1)?upper_case + accessor?substring(1)>
		<#nested accessor_index==0, accessor, "get" + upperCamel, "set" + upperCamel, accessor_has_next>
	</#list>
</#macro>

<#function hasApiTree>
	<#-- accounts for _className -->
	<#return apiTree?keys?size &gt; 1>
</#function>

<#macro listApiTree>
	<#local index = 0>
	<#list apiTree?keys as api>
		<#if api != "_className">
			<#local className = apiTree[api]._className>
			<#nested index==0, api, className, api_has_next>
			<#local index = index + 1>
		</#if>
	</#list>
</#macro>

<#macro superNamespace>
<#compress>
	<#local superFullClassName = superPackageName + "." + superProxyClassName>

	<#if moduleId != "titanium">
		<#if tiProxies?keys?seq_contains(superFullClassName)>
			titanium::<@Proxy.namespace tiProxies[superFullClassName].proxyAttrs.fullAPIName/>

		<#elseif allProxies?keys?seq_contains(superFullClassName)>
			<@Proxy.namespace allProxies[superFullClassName].proxyAttrs.fullAPIName/>

		</#if>
	</#if>
</#compress>
</#macro>

<#macro openModuleNamespace>
	<#list moduleId?split(".") as ns>
namespace ${ns?lower_case} {
	</#list>
</#macro>

<#macro closeModuleNamespace>
	<#list moduleId?split(".")?reverse as ns>
} // ${ns?lower_case}
	</#list>
</#macro>

<#macro openNamespace>
<@openModuleNamespace/>
	<#list proxyAttrs.fullAPIName?split(".") as ns>
		<#if ns_has_next && ns?lower_case != moduleId?lower_case>
	namespace ${ns?lower_case} {
		</#if>
	</#list>
</#macro>

<#macro closeNamespace>
	<#list proxyAttrs.fullAPIName?split(".")?reverse as ns>
		<#if ns_index != 0 && ns?lower_case != moduleId?lower_case>
	} // namespace ${ns?lower_case}
		</#if>
	</#list>
<@closeModuleNamespace/>
</#macro>

<#macro namespace apiName>
<#compress>
	<#list apiName?split(".") as ns>
		<#if ns_has_next>
			${ns?lower_case}::
		</#if>
	</#list>
</#compress>
</#macro>

<#function className name>
	<#if name?matches("^[0-9].+")>
		<#return "_" + name>
	<#else>
		<#return name>
	</#if>
</#function>

<#assign typeInfo = {
	"org.appcelerator.kroll.KrollPromise":{
		"jsType":"Object",
		"jsConvertType":"Value",
		"jsToJavaConverter":"jsObjectToJavaPromise",
		"javaToJsConverter":"javaObjectToJsPromise",
		"jvalue":"l",
		"javaCallMethodType":"Object",
		"javaReturnType":"jobject",
		"javaValidation":true,
		"typeValidation":false,
		"defaultValue": "null"
	},
	"org.appcelerator.kroll.KrollProxy":{
		"jsType":"Object",
		"jsConvertType":"Value",
		"jsToJavaConverter":"jsValueToJavaObject",
		"javaToJsConverter":"javaObjectToJsValue",
		"jvalue":"l",
		"javaCallMethodType":"Object",
		"javaReturnType":"jobject",
		"javaValidation":true,
		"javaDeleteLocalRef":true,
		"typeValidation":true,
		"defaultValue": "null"
	},
	"org.appcelerator.kroll.KrollException":{
		"jsType":"Value",
		"jsConvertType":"Value",
		"jsToJavaConverter":"jsValueToJavaError",
		"javaToJsConverter":"javaObjectToJsValue",
		"jvalue":"l",
		"javaCallMethodType":"Object",
		"javaReturnType":"jobject",
		"javaValidation":true,
		"javaDeleteLocalRef":true,
		"typeValidation":false,
		"defaultValue": "null"
	},
	"org.appcelerator.kroll.KrollDict":{
		"jsType":"Value",
		"jsConvertType":"Value",
		"jsToJavaConverter":"jsObjectToJavaKrollDict",
		"javaToJsConverter":"javaObjectToJsValue",
		"jvalue":"l",
		"javaCallMethodType":"Object",
		"javaReturnType":"jobject",
		"javaValidation":true,
		"javaDeleteLocalRef":true,
		"typeValidation":false,
		"defaultValue": "null"
	},
	"java.lang.String":{
		"jsType":"Value",
		"jsToJavaConverter":"jsValueToJavaString",
		"javaToJsConverter":"javaStringToJsString",
		"jvalue":"l",
		"javaCallMethodType":"Object",
		"javaReturnType":"jstring",
		"javaValidation":true,
		"javaDeleteLocalRef":true,
		"typeValidation":false,
		"defaultValue": "null"
	},
	"java.lang.String[]":{
		"jsType":"Array",
		"jsHandleCast":"Array",
		"jsToJavaConverter":"jsArrayToJavaStringArray",
		"javaToJsConverter":"javaArrayToJsArray",
		"jvalue":"l", "signature":"[Ljava/lang/String;",
		"javaCallMethodType":"Object",
		"javaReturnType":"jobjectArray",
		"javaValidation": true,
		"javaDeleteLocalRef":true,
		"defaultValue": "null"
	},
	"java.lang.Object":{
		"jsType":"Value",
		"jsConvertType":"Value",
		"jsToJavaConverter":"jsValueToJavaObject",
		"javaToJsConverter":"javaObjectToJsValue",
		"jvalue":"l",
		"javaCallMethodType":"Object",
		"javaReturnType":"jobject",
		"javaValidation":true,
		"javaDeleteLocalRef":true,
		"typeValidation":false,
		"defaultValue": "null"
	},
	"java.lang.Object[]":{
		"jsType":"Array",
		"jsHandleCast":"Array",
		"jsToJavaConverter":"jsArrayToJavaArray",
		"javaToJsConverter":"javaArrayToJsArray",
		"jvalue":"l", "signature":"[Ljava/lang/Object;",
		"javaCallMethodType":"Object",
		"javaReturnType":"jobjectArray",
		"javaValidation": true,
		"javaDeleteLocalRef":true,
		"defaultValue": "null"
	},
	"byte[]":{
		"jsType":"ArrayBuffer",
		"jsHandleCast":"ArrayBuffer",
		"jsToJavaConverter":"jsArrayBufferToJavaByteArray",
		"javaToJsConverter":"javaByteArrayToJsArrayBuffer",
		"jvalue":"l", "signature":"[B",
		"javaCallMethodType":"Object",
		"javaReturnType":"jbyteArray",
		"javaValidation":true,
		"javaDeleteLocalRef":true,
		"defaultValue": "null"
	},
	"int[]":{
		"jsType":"Array",
		"jsHandleCast":"Array",
		"jsToJavaConverter":"jsArrayToJavaIntArray",
		"javaToJsConverter":"javaArrayToJsArray",
		"jvalue":"l", "signature":"[I",
		"javaCallMethodType":"Object",
		"javaReturnType":"jintArray",
		"javaValidation":true,
		"javaDeleteLocalRef":true,
		"defaultValue": "null"
	},
	"int":{
		"jsType":"Number",
		"jsToJavaConverter":"jsNumberToJavaInt",
		"javaToJsConverter":"javaIntToJsNumber",
		"jvalue":"i", "signature":"I",
		"javaCallMethodType":"Int",
		"javaReturnType":"jint",
		"typeValidation":false,
		"defaultValue": "-1"
	},
	"short":{
		"jsType":"Number",
		"jsToJavaConverter":"jsNumberToJavaShort",
		"javaToJsConverter":"javaShortToJsNumber",
		"jvalue":"s", "signature":"S",
		"javaCallMethodType":"Short",
		"javaReturnType":"jshort",
		"typeValidation":false,
		"defaultValue": "-1"
	},
	"long[]":{
		"jsType":"Array",
		"jsHandleCast":"Array",
		"jsToJavaConverter":"jsArrayToJavaLongArray",
		"javaToJsConverter":"javaArrayToJsArray",
		"jvalue":"l", "signature":"[J",
		"javaCallMethodType":"Object",
		"javaReturnType":"jlongArray",
		"javaValidation":true,
		"javaDeleteLocalRef":true,
		"defaultValue": "null"
	},
	"float[]":{
		"jsType":"Array",
		"jsHandleCast":"Array",
		"jsToJavaConverter":"jsArrayToJavaFloatArray",
		"javaToJsConverter":"javaArrayToJsArray",
		"jvalue":"l", "signature":"[F",
		"javaCallMethodType":"Object",
		"javaReturnType":"jfloatArray",
		"javaValidation":true,
		"javaDeleteLocalRef":true,
		"defaultValue": "null"
	},
	"short[]":{
		"jsType":"Array",
		"jsHandleCast":"Array",
		"jsToJavaConverter":"jsArrayToJavaShortArray",
		"javaToJsConverter":"javaArrayToJsArray",
		"jvalue":"l", "signature":"[S",
		"javaCallMethodType":"Object",
		"javaReturnType":"jshortArray",
		"javaValidation":true,
		"javaDeleteLocalRef":true,
		"defaultValue": "null"
	},
	"long":{
		"jsType":"Number",
		"jsToJavaConverter":"jsNumberToJavaLong",
		"javaToJsConverter":"javaLongToJsNumber",
		"jvalue":"j", "signature":"J",
		"javaCallMethodType":"Long",
		"javaReturnType":"jlong",
		"typeValidation":false,
		"defaultValue": "-1"
	},
	"float":{
		"jsType":"Number",
		"jsToJavaConverter":"jsNumberToJavaFloat",
		"javaToJsConverter":"javaFloatToJsNumber",
		"jvalue":"f", "signature":"F",
		"javaCallMethodType":"Float",
		"javaReturnType":"jfloat",
		"typeValidation":false,
		"defaultValue": "-1f"
	},
	"double":{
		"jsType":"Number",
		"jsToJavaConverter":"jsNumberToJavaDouble",
		"javaToJsConverter":"javaDoubleToJsNumber",
		"jvalue":"d", "signature":"D",
		"javaCallMethodType":"Double",
		"javaReturnType":"jdouble",
		"typeValidation":false,
		"defaultValue": "-1d"
	},
	"boolean":{
		"jsType":"Boolean",
		"jsToJavaConverter":"jsBooleanToJavaBoolean",
		"javaToJsConverter":"javaBooleanToJsBoolean",
		"jvalue":"z", "signature":"Z",
		"javaCallMethodType":"Boolean",
		"javaReturnType":"jboolean",
		"defaultValue": "false"
	},
	"void":{
		"signature":"V",
		"javaCallMethodType":"Void",
		"javaReturnType":"void"
	}
}>

<#function getTypeInfo type>
	<#if typeInfo?keys?seq_contains(type)>
		<#return typeInfo[type]>
	</#if>

	<#if type?starts_with("org.appcelerator.kroll.KrollPromise")>
		<#return typeInfo["org.appcelerator.kroll.KrollPromise"]>
	</#if>

	<#if type?ends_with("Proxy")>
		<#return typeInfo["org.appcelerator.kroll.KrollProxy"]>
	</#if>

	<#if type?ends_with("Exception")>
		<#return typeInfo["org.appcelerator.kroll.KrollException"]>
	</#if>

	<#-- default type -->
	<#return typeInfo["java.lang.Object"]>
</#function>

<#macro listMethodArguments args>
	<#list args as arg>
		<#nested arg_index, getTypeInfo(arg.type), arg.type, (arg.optional?? && arg.optional)>
	</#list>
</#macro>

<#function getTypeSignature type>
	<#-- Look up the type's signature. If it does not exist, this
		 type is a Java object. Object signatures take a special format
		 which has the full class name in it (ex: Ljava.lang.Object;) -->
	<#if type?starts_with("org.appcelerator.kroll.KrollPromise")>
		<#local type = "org.appcelerator.kroll.KrollPromise">
	</#if>
	<#--  FIXME: We should ideally have a general case check for removing generic type erasures from signatures here -->
	<#if typeInfo?keys?seq_contains(type) && typeInfo[type]?keys?seq_contains("signature")>
		<#return typeInfo[type].signature>
	<#else>
		<#local jniType = type?replace(".", "/")>
		<#local prefix = "L">
		<#if type?ends_with("[]")>
			<#local jniType = jniType?substring(0, jniType?length - 2)>
			<#local prefix = "[L">
		</#if>
		<#return prefix + jniType + ";">
	</#if>
</#function>

<#macro getArgumentsSignature args>
	<#list args as arg>
		<#local signature = getTypeSignature(arg.type)>
		<#nested signature>
	</#list>
</#macro>

<#macro getMethodSignature args returnType hasInvocation>
	(<#if hasInvocation>${getTypeSignature("org.appcelerator.kroll.KrollInvocation")}</#if><#t>
	<@getArgumentsSignature args ; s>${s}</@getArgumentsSignature>)${getTypeSignature(returnType)}<#t>
</#macro>

<#macro generateJNICall returnType>
</#macro>

<#--------------------------------------------------------------
Verify and convert V8 values into JNI values inside a V8
invocation callback. The converted values are stored into an
jvalue array named "jArguments". If validation or conversion
fails, a JS exception is returned.
---------------------------------------------------------------->
<#macro verifyAndConvertArgument expr index info logOnly isOptional>
	<#if !isOptional && info.typeValidation!true>
	if (!${expr}->Is${info.jsType}() && !${expr}->IsNull()) {
		const char *error = "Invalid value, expected type ${info.jsType}.";
		LOGE(TAG, error);
		<#if !(logOnly!false)>
		titanium::JSException::Error(isolate, error);
		return;
		</#if>
	}
	</#if>
<#t>
	<#local checkNew = (info?keys?seq_contains("javaDeleteLocalRef") && info.javaToJsConverter == "javaObjectToJsValue")>
	<#if checkNew>bool isNew_${index};</#if>
<#t>
	<#if isOptional>
	if (args.Length() <= ${index}) {
		<#local defValue = info.defaultValue>
		<#if defValue == "null">
			<#local defValue = "NULL">
		</#if>
		jArguments[${index}].${info.jvalue} = ${defValue};

	} else {
	</#if>
<#t>
	<#if info.jsType == "Number">
		if ((titanium::V8Util::isNaN(isolate, ${expr}) && !${expr}->IsUndefined()) || ${expr}->ToString(context).FromMaybe(String::Empty(isolate))->Length() == 0) {
			const char *error = "Invalid value, expected type Number.";
			LOGE(TAG, error);
			<#if !(logOnly!false)>
			titanium::JSException::Error(isolate, error);
			return;
			</#if>
		}
	</#if>
<#t>
	<#local current_arg = "arg_" + index>
	<#if info.jsType == "Value">
		<#local coerced = false>
		<#local type = "Local<Value>">
		<#local valueExpr = expr>
	<#elseif info.jsType == "Number">
		<#local coerced = true>
		<#local type = "MaybeLocal<Number>">
		<#local valueExpr = expr + "->ToNumber(context)">
	<#elseif info.jsType == "Boolean">
		<#local coerced = false>
		<#local type = "Local<Boolean>">
		<#local valueExpr = expr + "->ToBoolean(isolate)">
	<#elseif info?keys?seq_contains("jsHandleCast")> // Array
		<#local coerced = false>
		<#local type = "Local<" + info.jsType + ">">
		<#local valueExpr = expr + ".As<" + info.jsType + ">()">
	<#else>
		<#local coerced = true>
		<#local type = "MaybeLocal<" + info.jsType + ">">
		<#local valueExpr = expr + "->To" + info.jsType + "(context)">
	</#if>
	if (!${expr}->IsNull()) {
	<#if coerced>
		${type} ${current_arg} = ${valueExpr};
		if (${current_arg}.IsEmpty()) {
			const char *error = "Invalid argument at index ${index}, expected type ${info.jsType} and failed to coerce.";
			LOGE(TAG, error);
			<#if !(logOnly!false)>
			titanium::JSException::Error(isolate, error);
			return;
			<#else>
			jArguments[${index}].${info.jvalue} = NULL;
			</#if>
		} else {
			jArguments[${index}].${info.jvalue} =
				titanium::TypeConverter::${info.jsToJavaConverter}(
			<#if info.jsToJavaConverter?matches("^js(Number|Date|String|Boolean)To.+")>
			<#else>
					isolate,
			</#if>
					env, ${current_arg}.ToLocalChecked()<#if checkNew>, &isNew_${index}</#if>);
		}
	<#else>
		${type} ${current_arg} = ${valueExpr};
		jArguments[${index}].${info.jvalue} =
			titanium::TypeConverter::${info.jsToJavaConverter}(
		<#if info.jsToJavaConverter?matches("^js(Number|Date|String|Boolean)To.+")>
		<#else>
				isolate,
		</#if>
				env, ${current_arg}<#if checkNew>, &isNew_${index}</#if>);
	</#if>
	} else {
		jArguments[${index}].${info.jvalue} = NULL;
	}
<#t>
	<#if isOptional>
	}
	</#if>
</#macro>

<#macro convertToVarArgs args start>
	uint32_t length = args.Length() - ${start};
	if (length < 0) {
		length = 0;
	}

	jobjectArray varArgs = env->NewObjectArray(length, titanium::JNIUtil::objectClass, NULL);
	for (uint32_t i = 0; i < length; ++i) {
		bool isNew;
		jobject arg = titanium::TypeConverter::jsValueToJavaObject(isolate, env, args[i+${start}], &isNew);
		env->SetObjectArrayElement(varArgs, i, arg);
		if (isNew) {
			env->DeleteLocalRef(arg);
		}
	}

	jArguments[${start}].l = varArgs;
</#macro>

<#macro verifyAndConvertArguments args method>
	<#-- Verify the correct argument count was provided. -->
	<@Proxy.getRequiredArgumentCount args=args ; requiredCount>
	<#if requiredCount &gt; 0>
	if (args.Length() < ${requiredCount}) {
		char errorStringBuffer[100];
		sprintf(errorStringBuffer, "${method.apiName}: Invalid number of arguments. Expected ${requiredCount} but got %d", args.Length());
		titanium::JSException::Error(isolate, errorStringBuffer);
		return;
	}
	</#if>
	</@Proxy.getRequiredArgumentCount>

	jvalue jArguments[${args?size}];

	<#-- Generate argument validation and conversion code -->
	<#local varArgsIndex = -1>
	<#list args as arg>
		<#if arg.type == "java.lang.Object[]" && arg_index = args?size - 1>
			<#local varArgsIndex = arg_index>
		</#if>
	</#list>

	<#if method.hasInvocation>
	Local<Object> scopeVars = args[0]->ToObject(context).ToLocalChecked(); // FIXME handle when empty!
	jstring sourceUrl = titanium::TypeConverter::jsValueToJavaString(isolate, env,
		scopeVars->Get(context, Proxy::sourceUrlSymbol.Get(isolate)).FromMaybe(String::Empty(isolate).As<Value>())); // FIXME Default to app.js?
	jArguments[0].l = env->NewObject(titanium::JNIUtil::krollInvocationClass,
		titanium::JNIUtil::krollInvocationInitMethod, sourceUrl);
	env->DeleteLocalRef(sourceUrl);
	</#if>

	<@Proxy.listMethodArguments args=args ; index, info, type, isOptional>
	<#if type != "org.appcelerator.kroll.KrollInvocation">
		<#if index = varArgsIndex>
			<@Proxy.convertToVarArgs args=args start=index/>
		<#else>
			<@Proxy.verifyAndConvertArgument expr="args[" + index + "]" index=index info=info logOnly=false isOptional=isOptional/>
		</#if>
	</#if>
	</@Proxy.listMethodArguments>
</#macro>

<#macro cleanupMethodArguments args hasInvocation>
	<#if hasInvocation>
	env->DeleteLocalRef(jArguments[0].l);
	</#if>

	<@Proxy.listMethodArguments args=args; index, info, type>
	<#if type != "org.appcelerator.kroll.KrollInvocation">
		<#if type == "java.lang.Object[]" && index = args?size - 1>
			env->DeleteLocalRef(jArguments[${index}].l);
		<#else>
			<#if info.javaDeleteLocalRef!false>
			<#local checkNew = info.javaToJsConverter == "javaObjectToJsValue">

			<#if checkNew>
			if (isNew_${index}) {
			</#if>
				env->DeleteLocalRef(jArguments[${index}].l);
			<#if checkNew>
			}
			</#if>

			</#if>
		</#if>
	</#if>
	</@Proxy.listMethodArguments>
</#macro>

<#--------------------------------------------------------------
Generate a JNI method call with the given return type, method ID,
and jobject reference. This macro also expects a jvalue array
already exists in the scope name provided in "argsVar".
Outputs the complete statement that performs the JNI call and
stores the return value in "result". A nested section can
beprovided to handle the result.
---------------------------------------------------------------->
<#macro callJNIMethod methodArgs hasInvocation returnType methodID jobjectVar argsVar hasResult>
	<#local info = getTypeInfo(returnType)
			callExpr = "Call${info.javaCallMethodType}MethodA"
			argExpr = "${jobjectVar}, ${methodID}, ${argsVar}"
			resultExpr = "${info.javaReturnType} jResult = (${info.javaReturnType})">
	<#if hasResult>
	${resultExpr}env->${callExpr}(${argExpr});

		<#local jsType = info.jsType>
		<#if info?keys?seq_contains("jsConvertType")>
			<#local jsType = info.jsConvertType>
		</#if>
	<#else>
	env->${callExpr}(${argExpr});
	</#if>

	<#-- Delete java proxy reference once done making the call. -->
	proxy->unreferenceJavaObject(${jobjectVar});

	<@Proxy.cleanupMethodArguments args=methodArgs hasInvocation=hasInvocation/>

	if (env->ExceptionCheck()) {
		<#if hasResult>Local<Value> jsException = </#if>titanium::JSException::fromJavaException(isolate);
		env->ExceptionClear();
		<#if hasResult>
		return;
		</#if>
	}

	<#if hasResult && info.javaValidation!false>
	if (jResult == NULL) {
		args.GetReturnValue().Set(Null(isolate));
		return;
	}
	</#if>

	<#if hasResult>
	Local<${jsType}> v8Result = titanium::TypeConverter::${info.javaToJsConverter}(isolate, env, jResult);

	<#if info.javaDeleteLocalRef!false>
	env->DeleteLocalRef(jResult);
	</#if>
	</#if>

	<#nested hasResult "v8Result">
</#macro>

<#macro initJNIEnv>
	JNIEnv *env = titanium::JNIScope::getEnv();
	if (!env) {
		titanium::JSException::GetJNIEnvironmentError(isolate);
		return;
	}
</#macro>

<#macro initMethodID className name signature logOnly>
	<#-- Lazy initialize method ID for the Java proxy. -->
	static jmethodID methodID = NULL;
	if (!methodID) {
		methodID = env->GetMethodID(${className}::javaClass, "${name}", "${signature}");
		if (!methodID) {
			const char *error = "Couldn't find proxy method '${name}' with signature '${signature}'";
			LOGE(TAG, error);
			<#if !(logOnly!false)>
				titanium::JSException::Error(isolate, error);
				return;
			</#if>
		}
	}
</#macro>

<#macro getHolder>
	Local<Object> holder = args.Holder();
	if (!JavaObject::isJavaObject(holder)) {
		holder = holder->FindInstanceInPrototypeChain(getProxyTemplate(isolate));
	}
	if (holder.IsEmpty() || holder->IsNull()) {
		if (!moduleInstance.IsEmpty()) {
			holder = moduleInstance.Get(isolate);
			if (holder.IsEmpty() || holder->IsNull()) {
				LOGE(TAG, "Couldn't obtain argument holder");
				args.GetReturnValue().Set(v8::Undefined(isolate));
				return;
			}
		} else {
			LOGE(TAG, "Couldn't obtain argument holder");
			args.GetReturnValue().Set(v8::Undefined(isolate));
			return;
		}
	}
</#macro>
