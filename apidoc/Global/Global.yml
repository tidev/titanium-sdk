---
name: Global
summary: The APIs that reside in the global scope, which may be called without a namespace prefix.
description: |
    Titanium provides a number of global built-in objects, detailed below.

    #### String Utilities

    Titanium includes several extra utility functions for formatting text, attached to the
    global [String](Global.String) object.

    #### console

    Titanium provides [console](Global.Console) support familiar to many javascript developers
    for logging at the toplevel, in addition to the [Titanium](Titanium.API) logging facilities.

    #### Timers

    Titanium has built-in support for one-off and repeating timers:

    * Use [setTimeout](Global.setTimeout) to start a one-off timer.
    * Use [setInterval](Global.setInterval) to start a repeating timer.

    #### Alert

    Titanium has a built-in convenience function [alert](Global.alert) which can be used as an alias
    for the [AlertDialog](Titanium.UI.AlertDialog) module.

    #### Locale

    The `L` macro can also be used as an alias for the <Titanium.Locale.getString> method.
platforms: [android, iphone, ipad, macos]
methods:
  - name: alert
    summary: Displays a pop-up alert dialog with the passed in `message`.
    description: |
        This function is a shortcut for creating and displaying an
        [alert dialog](Titanium.UI.AlertDialog). For example, the following two statements produce
        the same result.

        ``` js
        alert('Danger, Will Robinson!');

        Ti.UI.createAlertDialog({ message: 'Danger, Will Robinson!' }).show();
        ```

        Note that unlike a web browser-based version of `alert`, the method is asynchronous. However,
        only one alert dialog will be visible and modal at a time.

        Be aware that this method may be removed in the future.
    parameters:
      - name: message
        summary: Alert message.
        type: String

  - name: clearInterval
    summary: Cancels an interval timer.
    parameters:
      - name: timerId
        summary: Unique timer identifier returned by [setInterval](Global.setInterval).
        type: Number
        optional: true

  - name: clearTimeout
    summary: Cancels a one-time timer.
    parameters:
      - name: timerId
        summary: Unique timer identifier returned by [setTimeout](Global.setTimeout).
        type: Number
        optional: true

  - name: decodeURIComponent
    summary: |
        Replaces each escape sequence in the specified string, created using the `encodedURI`
        method, with the character that it represents.
    description: |
        For more information, see the MDN website for
        [encodeURIComponent](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/encodeURIComponent)
        and [decodeURIComponent](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/decodeURIComponent).
    returns:
        summary: Decoded string.
        type: String
    parameters:
      - name: encodedURI
        summary: Text that optionally contains encoded escape sequences.
        type: String

  - name: encodeURIComponent
    summary: |
        Replaces each special character in the specified string with the equivalent URI escape
        sequence. Useful for encoding URIs.
    description: |
        For more information, see the MDN website for
        [encodeURIComponent](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/encodeURIComponent)
        and [decodeURIComponent](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/decodeURIComponent).
    returns:
        summary: Encoded string.
        type: String
    parameters:
      - name: string
        summary: Text that optionally contains special characters.
        type: String

  - name: L
    summary: An alias for [Titanium.Locale.getString](Titanium.Locale.getString).
    returns:
        summary: Localized string defined by `key`, or value of `hint` otherwise.
        type: String
    parameters:
      - name: key
        summary: Key used to lookup the localized string.
        type: String

      - name: hint
        summary: Text to return if `key` is not found.
        type: String
        optional: true

  - name: require
    summary: Loads either a native Titanium module or a CommonJS module.
    description: |
        The `require` function takes a module identifier as its argument and returns an object with
        references to the module's exported symbols.

        #### ES6+ Syntax

        Using Titanium SDK 7.1.0 and later, you can also use the ES6+ [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) and [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) syntax
        by enabling transpiling via the `<transpile>true</transpile>` property in your tiapp.xml

        #### Native Titanium Module

        To load a native Titanium module:

          1. Install the module to the project or copy it to the Titanium SDK home directory.
          2. Add the module as a dependency to the project by modifying the `modules` section of the `tiapp.xml` file.
          3. Initialize the module with the `require` method by passing the module ID to the method.

        For detailed instructions, refer to
        [Using a Module](https://docs.appcelerator.com/platform/latest/#!/guide/Using_a_Module).

        #### CommonJS Module

        To load a local CommonJS module, place the CommonJS module in the `Resources` directory of
        your project. Pass the `require` method the path to the file without the `Resources`
        directory, platform-specific directory and the `.js` extension.

        Note that the appropriate *platform-specific* `Resources` subdirectory is merged into the
        main `Resources` directory at build time. For example, suppose the following files exist.

        * `Resources/app.js`
        * `Resources/ui/MainWindow.js`
        * `Resources/iphone/ui/TaskWindow.js`
        * `Resources/android/ui/TaskWindow.js`

        The appropriate `TaskWindow.js` file is moved into the `Resources/ui` directory of the
        built application. To include both the MainWindow module and the platform-specific
        TaskWindow module from any JavaScript file in the project:

        ``` js
        // load main window module from ui subdirectory
        var mainWindow = require('ui/MainWindow');

        // load platform-specific task window module
        var taskWindow = require('ui/TaskWindow');
        ```

        For more information, see the official [CommonJS](http://requirejs.org/docs/commonjs.html) website.

        #### Alloy

        For Alloy, place the CommonJS modules in the `app/lib` directory of your Alloy project,
        then load the module with the `require` method without the `app/lib` path and `.js`
        extension.

        Starting with Alloy 1.5.0, you can add platform-specific directories to the `app/lib` directory.
        Do not include the platform-specific directory when referencing the CommonJS module.

        For example, a module file `app/lib/android/myModule/module.js` may be loaded by
        `app/controllers/index.js` using:

        ``` js
        require('myModule/module');
        ```

        #### Android

        Additionally, on Android, an absolute path to a module may be specified using a path
        separator (`/`) at the beginning of the path.

        For example, a module file `Resources/myModule/module.js` may be required by
        `Resources/example/example.js` using either of the following:

        ``` js
        require('../myModule/module')
        require ('/myModule/module')
        ```
    returns:
        summary: Exported `exports` object of the required module.
        type: any
    parameters:
      - name: moduleId
        summary: Native module ID or local path to a JavaScript file *minus* the `.js` extension.
        type: String
    examples:
      - title: Require a Native Module
        example: |
            To load a native module with the ID `com.mycompany.module`:

            ``` js
            var module = require('com.mycompany.module');
            ```
      - title: Require a JavaScript Module
        example: |
            `myModule.js`:
            ``` js
            exports.message = "hello world";
            ```

            `app.js`:
            ``` js
            var myModule = require('myModule');
            alert(myModule.message);
            ```

  - name: setInterval
    summary: Executes a function repeatedly with a fixed time delay between each call to that function.
    description: |
        Note that although the interval is not guaranteed to be exact, the interval between calls
        will be no less than the specified delay.

        Returns a unique timer identifier that can be passed to [clearInterval](Global.clearInterval)
        to cancel this timer.

        For more information, see the MDN website for
        [setInterval](https://developer.mozilla.org/en/DOM/window.setInterval).
    returns:
        summary: Unique timer identifier.
        type: Number
    parameters:
      - name: function
        summary: Function to call.
        type: Callback

      - name: delay
        summary: Time in milliseconds to wait between calls to function.
        type: Number
        optional: true
    examples:
      - title: Update a label once every second, and stop at 10 seconds
        example: |
            ``` js
            var count = 0;
            var timer = setInterval(function() {
                count++;
                label.text = 'count - ' + count;
                if (count == 10) {
                    clearInterval(timer);
                }
            }, 1000);
            ```

  - name: setTimeout
    summary: Executes code or a function after a delay.
    description: |
        Note that although the timeout is not guaranteed to be exact, the delay before the
        function is invoked will be no less than the specified delay.

        Returns a unique timer identifier that can be passed to [clearTimeout](Global.clearTimeout)
        to cancel this timer.

        For more information, see the MDN website for
        [setTimeout](https://developer.mozilla.org/en/DOM/window.setTimeout).
    returns:
        summary: Unique timer identifier.
        type: Number
    parameters:
      - name: function
        summary: Code or function to call.
        type: Callback

      - name: delay
        summary: Time in milliseconds to wait before the function is called.
        type: Number
        optional: true
    examples:
      - title: Execute a function in 500 milliseconds
        example: |
            ``` js
            setTimeout(function() {
                Ti.API.debug('Called using setTimeout');
            }, 500);
            ```

properties:
  - name: OS_ANDROID
    summary: A special constant that is replaced during the app build with a boolean `true`/`false` value.
    description: |
        This value is replaced by an injected boolean literal value indicating if the current platform is Android.

        The replacement is done by a Babel plugin during JS transpilation phase of the app build.
        This is an easy way to guard platform-specific codepaths (and make it easier for Babel to strip away dead code paths).

        This pre-define originally lived in Alloy compilation but has been migrated to the SDK build process.
    type: Boolean
    permission: read-only
    since: "9.0.0"

  - name: OS_IOS
    summary: A special constant that is replaced during the app build with a boolean `true`/`false` value.
    description: |
        This value is replaced by an injected boolean literal value indicating if the current platform is ipad/iphone.

        The replacement is done by a Babel plugin during JS transpilation phase of the app build.
        This is an easy way to guard platform-specific codepaths (and make it easier for Babel to strip away dead code paths).

        This pre-define originally lived in Alloy compilation but has been migrated to the SDK build process.
    type: Boolean
    permission: read-only
    since: "9.0.0"

  - name: OS_VERSION_MAJOR
    summary: The operation system's major version number.
    description: |
        This returns the same value as the <Titanium.Platform.versionMajor> property.

        ``` js
        if (OS_IOS && (OS_VERSION_MAJOR >= 13)) {
            // Do something on iOS 13 or higher only.
        }
        ```
    type: Number
    permission: read-only
    since: "9.2.0"

  - name: OS_VERSION_MINOR
    summary: The operating system's minor version number.
    description: |
        This returns the same value as the <Titanium.Platform.versionMinor> property.

        Will return zero if the OS does not have a minor version.
    type: Number
    default: 0
    permission: read-only
    since: "9.2.0"

  - name: OS_VERSION_PATCH
    summary: The operating system's patch version number.
    description: |
        This returns the same value as the <Titanium.Platform.versionPatch> property.

        Will return zero if the OS does not have a patch version.
    type: Number
    default: 0
    permission: read-only
    since: "9.2.0"

  - name: ENV_DEV
    summary: Alias for <Global.ENV_DEVELOPMENT>
    type: Boolean
    permission: read-only
    since: "9.0.0"

  - name: ENV_DEVELOPMENT
    summary: A special constant that is replaced during the app build with a boolean `true`/`false` value, based on whether deploy type is `'development'`. Typically true for simulator/emulator builds.
    description: |
        The replacement is done by a Babel plugin during JS transpilation phase of the app build.
        This is an easy way to guard deploy type-specific codepaths (and make it easier for Babel to strip away dead code paths).

        This pre-define originally lived in Alloy compilation but has been migrated to the SDK build process.
    type: Boolean
    permission: read-only
    since: "9.0.0"

  - name: ENV_PROD
    summary: Alias for <Global.ENV_PRODUCTION>
    type: Boolean
    permission: read-only
    since: "9.0.0"

  - name: ENV_PRODUCTION
    summary: A special constant that is replaced during the app build with a boolean `true`/`false` value, based on whether deploy type is `'production'`. Typically true for app store/ad-hoc builds.
    description: |
        The replacement is done by a Babel plugin during JS transpilation phase of the app build.
        This is an easy way to guard deploy type-specific codepaths (and make it easier for Babel to strip away dead code paths).

        This pre-define originally lived in Alloy compilation but has been migrated to the SDK build process.
    type: Boolean
    permission: read-only
    since: "9.0.0"

  - name: ENV_TEST
    summary: A special constant that is replaced during the app build with a boolean `true`/`false` value, based on whether deploy type is `'test'`. Typically true for device builds.
    description: |
        The replacement is done by a Babel plugin during JS transpilation phase of the app build.
        This is an easy way to guard deploy type-specific codepaths (and make it easier for Babel to strip away dead code paths).

        This pre-define originally lived in Alloy compilation but has been migrated to the SDK build process.
    type: Boolean
    permission: read-only
    since: "9.0.0"

  - name: DIST_ADHOC
    summary: A special constant that is replaced during the app build with a boolean `true`/`false` value, based on whether build target is `'dist-adhoc'`.
    description: |
        The replacement is done by a Babel plugin during JS transpilation phase of the app build.
        This is an easy way to guard deploy type-specific codepaths (and make it easier for Babel to strip away dead code paths).

        This pre-define originally lived in Alloy compilation but has been migrated to the SDK build process.
    type: Boolean
    permission: read-only
    since: "9.0.0"

  - name: DIST_STORE
    summary: A special constant that is replaced during the app build with a boolean `true`/`false` value, based on whether build target is `'dist-appstore'` or `'dist-playstore'`.
    description: |
        The replacement is done by a Babel plugin during JS transpilation phase of the app build.
        This is an easy way to guard deploy type-specific codepaths (and make it easier for Babel to strip away dead code paths).

        This pre-define originally lived in Alloy compilation but has been migrated to the SDK build process.
    type: Boolean
    permission: read-only
    since: "9.0.0"

  - name: console
    summary: Console logging facilities.
    type: Global.Console
    accessors: false

  - name: global
    summary: Reference to the global object itself.
    type: Global
    accessors: false

  - name: Buffer
    summary: a global reference to the [Buffer](buffer.Buffer) class.
    type: buffer.Buffer
    accessors: false

  - name: process
    summary: Reference to the global `process` object.
    type: process
    accessors: false
