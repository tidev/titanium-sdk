---
name: buffer
summary: A Node.js-compatible implementation of the core `buffer` module
description: |
    Titanium provides a number of shims and ports of core Node.js module functionality.

    This module is intended to provide a Node-compatible port of the `buffer`.
    
    More details on the Node.js API can be found in their [buffer module documentation](https://nodejs.org/api/buffer.html)
platforms: [android, iphone, ipad, macos]
since: '8.2.0'
properties:
  - name: poolSize
    type: Number
    default: 8192
    summary: This is the size (in bytes) of pre-allocated internal `Buffer` instances used for pooling. This value may be modified.

  - name: INSPECT_MAX_BYTES
    type: Number
    default: 50
    summary: The maximum number of bytes that will be returned when `buf.inspect()` is called. This can be overridden by user modules.

  - name: kMaxLength
    type: Number
    summary: The largest size allowed for a single <buffer.Buffer> instance.

methods:
  - name: alloc
    summary: Allocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the `Buffer` will be zero-filled.
    parameters:
      - name: size
        summary: The desired length of the new `Buffer`.
        type: Number

      - name: fill
        summary: A value to pre-fill the new `Buffer` with.
        type: [ String, Number, buffer.Buffer, Uint8Array ]
        optional: true
        default: 0

      - name: encoding
        type: String
        summary: If `fill` is a string, this is its encoding.
        optional: true
        default: "`'utf8'`"
    returns:
        type: buffer.Buffer

  - name: allocUnsafe
    summary: Allocates a new `Buffer` of `size` bytes.
    parameters:
      - name: size
        summary: The desired length of the new `Buffer`.
        type: Number
    returns:
        type: buffer.Buffer

  - name: allocUnsafeSlow
    summary: Allocates a new `Buffer` of `size` bytes.
    parameters:
      - name: size
        summary: The desired length of the new `Buffer`.
        type: Number
    returns:
        type: buffer.Buffer

  - name: byteLength
    summary: Returns the byte length of a string when encoded using `encoding`. This is not the same as `String.prototype.length`, which does not account for the encoding that is used to convert the string into bytes.
    parameters:
      - name: string
        summary: A value to calculate the length of.
        type: [ String, buffer.Buffer, ArrayBuffer ]
      - name: encoding
        summary: If `string` is a string, this is its encoding.
        type: String
        default: "`'utf8'`"
        optional: true
    returns:
        type: Number

  - name: compare
    summary: Compares `buf1` to `buf2`, typically for the purpose of sorting arrays of <buffer.Buffer> instances. This is equivalent to calling `buf1.compare(buf2)`.
    parameters:
      - name: buf1
        summary: A value to calculate the length of.
        type: [ buffer.Buffer, Uint8Array ]
      - name: buf2
        summary: If `string` is a string, this is its encoding.
        type: [ buffer.Buffer, Uint8Array ]
    returns:
        type: Number
        summary: Either `-1`, `0`, or `1`, depending on the result of the comparison. See <buffer.Buffer.compare> for details.

  - name: concat
    summary: |
        Returns a new <buffer.Buffer> which is the result of concatenating all the <buffer.Buffer> instances in the list together.

        If the list has no items, or if the `totalLength` is `0`, then a new zero-length Buffer is returned.
    parameters:
      - name: list
        summary: List of `Buffer` or `Uint8Array` instances to concatenate.
        type: [ Array<buffer.Buffer>, Array<Uint8Array> ]
      - name: totalLength
        summary: Total length of the Buffer instances in list when concatenated.
        type: Number
        optional: true
    returns:
        type: buffer.Buffer
        summary: Either `-1`, `0`, or `1`, depending on the result of the comparison. See <buffer.Buffer.compare> for details.

  - name: from
    summary: Allocates a new `Buffer` using an `array` of bytes in the range `0 â€“ 255`. Array entries outside that range will be truncated to fit into it.
    parameters:
      - name: arg
        summary: The array of bytes to wrap in a `Buffer`, `Buffer` to copy, String to decode into bytes, or <Titanium.Buffer> to wrap.
        type: [ Array<Number>, buffer.Buffer, String, Titanium.Buffer, Uint8Array ]
      - name: encodingOrOffset
        summary: encoding of the string, or start offset of array/buffer
        type: [ String, Number ]
        optional: true
      - name: length
        summary: length of the underlying array/buffer to wrap
        type: Number
        optional: true
    returns:
        type: buffer.Buffer

  - name: isBuffer
    summary: Returns `true` if `obj` is a `Buffer`, `false` otherwise.
    parameters:
      - name: obj
        summary: The object to check if it is a `Buffer`
        type: Object
    returns:
        type: Boolean

  - name: isEncoding
    summary: Returns `true` if `encoding` is the name of a supported character encoding, or `false` otherwise.
    parameters:
      - name: encoding
        summary: A character encoding name to check.
        type: String
    returns:
        type: Boolean

---
name: buffer.Buffer
summary: The `Buffer` class is a global type for dealing with binary data directly. It can be constructed in a variety of ways.
description: |
    Note that this `Buffer` class is highly related to the <Titanium.Buffer> type. Both are wrappers around an underlying array of bytes and can be accessed in an array-like manner:
    
    ``` javascript
    const value = buffer[index];
    buffer[index] = 1;
    ```
    
    In fact, this Node.js shim has been written to allow wrapping a <Titanium.Buffer> into a Node.js compatible instance:
    
    ``` javascript
    const wrapped = Buffer.from(tiBuffer);
    ```
    
    Note that this will result in a **slow** `Buffer` instance (because reads/writes pass-through to the underlying
    `Ti.Buffer` which in turn goes through the JS/native binding layer). If you only intend to *read* the data
    (or do not need to write back to the original <Titanium.Buffer>) you can perform a one-time copy
    of the underlying bytes to a faster JS-only `Uint8Array`:
    
    ```javascript
    const fastBuffer = Buffer.from(tiBuffer.toBlob().toArrayBuffer()); // here we're converting from Blob to Ti.Buffer to ArrayBuffer and the shim wraps that copy
    ```
platforms: [android, iphone, ipad, macos]
since: '8.2.0'
properties:
  - name: buffer
    summary: The underlying `ArrayBuffer` object based on which this `Buffer` object is created.
    description: This `ArrayBuffer` is not guaranteed to correspond exactly to the original `Buffer`. See the notes on <buffer.Buffer.byteOffset> for details.
    type: ArrayBuffer

  - name: byteOffset
    summary: The `byteOffset` of the `Buffer`s underlying `ArrayBuffer` object.
    type: Number

  - name: length
    summary: Returns the number of bytes in buf.
    type: Number

methods:
  - name: compare
    summary: Compares `buf` with `target` and returns a number indicating whether buf comes before, after, or is the same as target in sort order. Comparison is based on the actual sequence of bytes in each `Buffer`.
    parameters:
      - name: target
        summary: A `Buffer` or `Uint8Array` with which to compare buf.
        type: [ buffer.Buffer, Uint8Array ]
      - name: targetStart
        summary: The offset within target at which to begin comparison.
        default: 0
        type: Number
        optional: true
      - name: targetEnd
        summary: The offset within target at which to end comparison (not inclusive).
        default: '`target.length`'
        type: Number
        optional: true
      - name: sourceStart
        summary: The offset within buf at which to begin comparison.
        default: 0
        type: Number
        optional: true
      - name: sourceEnd
        summary: The offset within buf at which to end comparison (not inclusive).
        default: '`buf.length`'
        type: Number
        optional: true
    returns:
        type: Number
    description: |
        `0` is returned if target is the same as buf
        `1` is returned if target should come before buf when sorted.
        `-1` is returned if target should come after buf when sorted.

  - name: copy
    summary: Copies data from a region of `buf` to a region in `target`, even if the target memory region overlaps with `buf`.
    parameters:
      - name: target
        summary: A `Buffer` or `Uint8Array` with which to compare buf.
        type: [ buffer.Buffer, Uint8Array ]
      - name: targetStart
        summary: The offset within target at which to begin writing.
        default: 0
        type: Number
        optional: true
      - name: sourceStart
        summary: The offset within buf at which to begin copying.
        default: 0
        type: Number
        optional: true
      - name: sourceEnd
        summary: The offset within buf at which to stop copying (not inclusive).
        default: '`buf.length`'
        type: Number
        optional: true
    returns:
        type: Number
        summary: The number of bytes copied.

  - name: entries
    summary: Creates and returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol) of `[index, byte]` pairs from the contents of `buf`.
    # FIXME: This really returns Iterator, but our tooling doesn't support that type!
    returns:
      type: Object

  - name: equals
    summary: Returns `true` if both `buf` and `otherBuffer` have exactly the same bytes, false otherwise. Equivalent to `buf.compare(otherBuffer) === 0`.
    parameters:
      - name: otherBuffer
        summary: A `Buffer` or `Uint8Array` with which to compare buf.
        type: [ buffer.Buffer, Uint8Array ]
    returns:
        type: Boolean

  - name: fill
    summary: Fills `buf` with the specified value. If the `offset` and `end` are not given, the entire `buf` will be filled.
    parameters:
      - name: value
        summary: The value with which to fill `buf`.
        type: [ String, Number, buffer.Buffer, Uint8Array ]
      - name: offset
        summary: Number of bytes to skip before starting to fill `buf`.
        default: 0
        type: Number
        optional: true
      - name: end
        summary: Where to stop filling `buf` (not inclusive).
        default: "`buf.length`"
        type: Number
        optional: true
      - name: encoding
        summary: The encoding for `value` if `value` is a string.
        default: "`'utf8'`"
        type: String
        optional: true
    returns:
        type: buffer.Buffer
        summary: A reference to `buf`.

  - name: includes
    summary: Equivalent to `buf.indexOf() !== -1`.
    parameters:
      - name: value
        summary: What to search for.
        type: [ String, Number, buffer.Buffer, Uint8Array ]
      - name: byteOffset
        summary: Where to begin searching in `buf`. If negative, then offset is calculated from the end of `buf`.
        default: 0
        type: Number
        optional: true
      - name: encoding
        summary: If `value` is a string, this is its encoding.
        default: "`'utf8'`"
        type: String
        optional: true
    returns:
        type: Boolean
        summary: "`true` if `value` was found in buf, `false` otherwise."

  - name: indexOf
    summary: |
        If value is:

        - a string, `value` is interpreted according to the character encoding in `encoding`.
        - a `Buffer` or `Uint8Array`, value will be used in its entirety. To compare a partial `Buffer`, use [buf.slice()](buffer.Buffer.slice).
        - a number, `value` will be interpreted as an unsigned 8-bit integer value between `0` and `255`.
    parameters:
      - name: value
        summary: What to search for.
        type: [ String, Number, buffer.Buffer, Uint8Array ]
      - name: byteOffset
        summary: Where to begin searching in `buf`. If negative, then offset is calculated from the end of `buf`.
        default: 0
        type: Number
        optional: true
      - name: encoding
        summary: If `value` is a string, this is the encoding used to determine the binary representation of the string that will be searched for in `buf`.
        default: "`'utf8'`"
        type: String
        optional: true
    returns:
        type: Number
        summary: The index of the first occurrence of `value` in `buf`, or `-1` if `buf` does not contain `value`.

  - name: keys
    summary: Creates and returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol) of `buf` keys (indices).
    # FIXME: This really returns Iterator, but our tooling doesn't support that type!
    returns:
      type: Object

  - name: lastIndexOf
    summary: Identical to `buf.indexOf()`, except the last occurrence of `value` is found rather than the first occurrence.
    parameters:
      - name: value
        summary: What to search for.
        type: [ String, Number, buffer.Buffer, Uint8Array ]
      - name: byteOffset
        summary: Where to begin searching in `buf`. If negative, then offset is calculated from the end of `buf`.
        default: "`buf.length - 1`."
        type: Number
        optional: true
      - name: encoding
        summary: If `value` is a string, this is the encoding used to determine the binary representation of the string that will be searched for in `buf`.
        default: "`'utf8'`"
        type: String
        optional: true
    returns:
        type: Number
        summary: The index of the last occurrence of `value` in `buf`, or `-1` if `buf` does not contain `value`.

  - name: readDoubleBE
    summary: Reads a 64-bit, big-endian double from `buf` at the specified `offset`.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 8`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number

  - name: readDoubleLE
    summary: Reads a 64-bit, little-endian double from `buf` at the specified `offset`.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 8`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number

  - name: readFloatBE
    summary: Reads a 32-bit, big-endian float from `buf` at the specified `offset`.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number

  - name: readFloatLE
    summary: Reads a 32-bit, little-endian float from `buf` at the specified `offset`.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number

  - name: readInt8
    summary: |
        Reads a signed 8-bit integer from `buf` at the specified `offset`.
        
        Integers read from a Buffer are interpreted as two's complement signed values.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 1`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number

  - name: readInt16BE
    summary: Reads a signed 16-bit, big-endian integer from `buf` at the specified `offset`.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number

  - name: readInt16LE
    summary: Reads a signed 16-bit, little-endian integer from `buf` at the specified `offset`.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number

  - name: readInt32BE
    summary: Reads a signed 32-bit, big-endian integer from `buf` at the specified `offset`.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number

  - name: readInt32LE
    summary: Reads a signed 32-bit, little-endian integer from `buf` at the specified `offset`.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number

  - name: readIntBE
    summary: Reads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result as a big-endian, two's complement signed value supporting up to 48 bits of accuracy.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.
        type: Number
      - name: byteLength
        summary: Number of bytes to read. Must satisfy `0 < byteLength <= 6`.
        type: Number
    returns:
        type: Number

  - name: readIntLE
    summary: Reads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result as a little-endian, two's complement signed value supporting up to 48 bits of accuracy.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.
        type: Number
      - name: byteLength
        summary: Number of bytes to read. Must satisfy `0 < byteLength <= 6`.
        type: Number
    returns:
        type: Number

  - name: readUInt8
    summary: Reads an unsigned 8-bit integer from `buf` at the specified `offset`.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 1`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number

  - name: readUInt16BE
    summary: Reads an unsigned 16-bit, big-endian integer from `buf` at the specified `offset`.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number

  - name: readUInt16LE
    summary: Reads an unsigned 16-bit, little-endian integer from `buf` at the specified `offset`.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number

  - name: readUInt32BE
    summary: Reads an unsigned 32-bit, big-endian integer from `buf` at the specified `offset`.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number

  - name: readUInt32LE
    summary: Reads an unsigned 32-bit, little-endian integer from `buf` at the specified `offset`.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number

  - name: readUIntBE
    summary: Reads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result as an unsigned big-endian value supporting up to 48 bits of accuracy.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.
        type: Number
      - name: byteLength
        summary: Number of bytes to read. Must satisfy `0 < byteLength <= 6`.
        type: Number
    returns:
        type: Number

  - name: readUIntLE
    summary: Reads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result as an unsigned little-endian value supporting up to 48 bits of accuracy.
    parameters:
      - name: offset
        summary: Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.
        type: Number
      - name: byteLength
        summary: Number of bytes to read. Must satisfy `0 < byteLength <= 6`.
        type: Number
    returns:
        type: Number

  - name: subarray
    summary: Returns a new `Buffer` that references the same memory as the original, but offset and cropped by the `start` and `end` indices.
    parameters:
      - name: start
        summary: here the new Buffer will start.
        type: Number
        optional: true
        default: 0
      - name: end
        summary: Where the new Buffer will end (not inclusive).
        type: Number
        optional: true
        default: "`buf.length`"
    returns:
        type: buffer.Buffer

  - name: slice
    summary: Returns a new `Buffer` that references the same memory as the original, but offset and cropped by the `start` and `end` indices.
    parameters:
      - name: start
        summary: here the new Buffer will start.
        type: Number
        optional: true
        default: 0
      - name: end
        summary: Where the new Buffer will end (not inclusive).
        type: Number
        optional: true
        default: "`buf.length`"
    returns:
        type: buffer.Buffer

  - name: swap16
    summary: Interprets `buf` as an array of unsigned 16-bit integers and swaps the byte order *in-place*.
    returns:
        type: buffer.Buffer

  - name: swap32
    summary: Interprets `buf` as an array of unsigned 32-bit integers and swaps the byte order *in-place*.
    returns:
        type: buffer.Buffer

  - name: swap64
    summary: Interprets `buf` as an array of unsigned 64-bit integers and swaps the byte order *in-place*.
    returns:
        type: buffer.Buffer

  - name: toJSON
    summary: Returns a JSON representation of `buf`. `JSON.stringify()` implicitly calls this function when stringifying a `Buffer` instance.
    returns:
        type: Object

  - name: toString
    summary: Decodes `buf` to a string according to the specified character encoding in `encoding`. `start` and `end` may be passed to decode only a subset of `buf`.
    parameters:
      - name: encoding
        summary: The character encoding to use.
        type: String
        optional: true
        default: "`'utf8'`"
      - name: start
        summary: The byte offset to start decoding at.
        type: Number
        optional: true
        default: 0
      - name: end
        summary: The byte offset to stop decoding at (not inclusive).
        type: Number
        optional: true
        default: "`buf.length`"
    returns:
        type: String

  - name: values
    summary: Creates and returns an [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol) for `buf` values (bytes). This function is called automatically when a `Buffer` is used in a `for..of` statement.
    # FIXME: This really returns Iterator, but our tooling doesn't support that type!
    returns:
      type: Object

  - name: write
    summary: Writes `string` to `buf` at `offset` according to the character encoding in `encoding`. The `length` parameter is the number of bytes to write. If `buf` did not contain enough space to fit the entire string, only part of `string` will be written. However, partially encoded characters will not be written.
    parameters:
      - name: string
        summary: String to write to `buf`.
        type: String
      - name: offset
        summary: Number of bytes to skip before starting to write string.
        default: 0
        type: Number
        optional: true
      - name: length
        summary: Maximum number of bytes to write (written bytes will not exceed buf.length - offset).
        default: "`buf.length - offset`."
        type: Number
        optional: true
      - name: encoding
        summary: The character encoding of string.
        default: utf8
        type: String
        optional: true
    returns:
        type: Number
        summary: Number of bytes written.

  - name: writeDoubleBE
    summary: Writes `value` to `buf` at the specified `offset` as big-endian. The `value` must be a JavaScript number. Behavior is undefined when `value` is anything other than a JavaScript number.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 8`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeDoubleLE
    summary: Writes `value` to `buf` at the specified `offset` as little-endian. The `value` must be a JavaScript number. Behavior is undefined when `value` is anything other than a JavaScript number.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 8`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeFloatBE
    summary: Writes `value` to `buf` at the specified `offset` as big-endian. The `value` must be a JavaScript number. Behavior is undefined when `value` is anything other than a JavaScript number.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeFloatLE
    summary: Writes `value` to `buf` at the specified `offset` as little-endian. The `value` must be a JavaScript number. Behavior is undefined when `value` is anything other than a JavaScript number.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeInt8
    summary: |
        Writes `value` to `buf` at the specified `offset`. `value` must be a valid signed 8-bit integer. Behavior is undefined when `value` is anything other than a signed 8-bit integer.

        `value` is interpreted and written as a two's complement signed integer.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 1`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeInt16BE
    summary: |
        Writes `value` to `buf` at the specified `offset`. `value` must be a valid signed 16-bit integer. Behavior is undefined when `value` is anything other than a signed 16-bit integer.

        `value` is interpreted and written as a two's complement signed integer.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeInt16LE
    summary: |
        Writes `value` to `buf` at the specified `offset`. `value` must be a valid signed 16-bit integer. Behavior is undefined when `value` is anything other than a signed 16-bit integer.

        `value` is interpreted and written as a two's complement signed integer.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeInt32BE
    summary: |
        Writes `value` to `buf` at the specified `offset`. `value` must be a valid signed 32-bit integer. Behavior is undefined when `value` is anything other than a signed 32-bit integer.

        `value` is interpreted and written as a two's complement signed integer.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeInt32LE
    summary: |
        Writes `value` to `buf` at the specified `offset`. `value` must be a valid signed 32-bit integer. Behavior is undefined when `value` is anything other than a signed 32-bit integer.

        `value` is interpreted and written as a two's complement signed integer.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeIntBE
    summary: Writes `byteLength` bytes of `value` to `buf` at the specified `offset` as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than a signed integer.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.
        type: Number
      - name: byteLength
        summary: Number of bytes to write. Must satisfy `0 < byteLength <= 6`.
        type: Number
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeIntLE
    summary: Writes `byteLength` bytes of `value` to `buf` at the specified `offset` as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than a signed integer.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.
        type: Number
      - name: byteLength
        summary: Number of bytes to write. Must satisfy `0 < byteLength <= 6`.
        type: Number
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeUInt8
    summary: Writes `value` to `buf` at the specified `offset`. `value` must be a valid unsigned 8-bit integer. Behavior is undefined when `value` is anything other than an unsigned 8-bit integer.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 1`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeUInt16BE
    summary: Writes `value` to `buf` at the specified `offset`. `value` must be a valid unsigned 16-bit integer. Behavior is undefined when `value` is anything other than an unsigned 16-bit integer.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeUInt16LE
    summary: Writes `value` to `buf` at the specified `offset`. `value` must be a valid unsigned 16-bit integer. Behavior is undefined when `value` is anything other than an unsigned 16-bit integer.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeUInt32BE
    summary: Writes `value` to `buf` at the specified `offset`. `value` must be a valid unsigned 32-bit integer. Behavior is undefined when `value` is anything other than an unsigned 32-bit integer.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeUInt32LE
    summary: Writes `value` to `buf` at the specified `offset`. `value` must be a valid unsigned 32-bit integer. Behavior is undefined when `value` is anything other than an unsigned 32-bit integer.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.
        default: 0
        type: Number
        optional: true
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeUIntBE
    summary: Writes `byteLength` bytes of `value` to `buf` at the specified `offset` as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than an unsigned integer.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.
        type: Number
      - name: byteLength
        summary: Number of bytes to write. Must satisfy `0 < byteLength <= 6`.
        type: Number
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."

  - name: writeUIntLE
    summary: Writes `byteLength` bytes of `value` to `buf` at the specified `offset` as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined when `value` is anything other than an unsigned integer.
    parameters:
      - name: value
        summary: Number to be written to `buf`.
        type: Number
      - name: offset
        summary: Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.
        type: Number
      - name: byteLength
        summary: Number of bytes to write. Must satisfy `0 < byteLength <= 6`.
        type: Number
    returns:
        type: Number
        summary: "`offset` plus the number of bytes written."
