---
name: Titanium.Codec
summary: |
    A module for translating between primitive types and raw byte streams.
description: |
    The `Codec` module can be used for encoding strings and numbers into [Buffer](Titanium.Buffer)
    objects, and decoding primitive types from buffers.

    #### Byte Order

    Multi-byte data can be stored in two different byte orders: big-endian or
    little-endian. In big-endian byte order, the most significant or highest-value
    byte is stored first. For example, the 4-byte integer 0xFEDCBA98 is made up of the
    bytes 0xFE, 0xDC, 0xBA and 0x98, from most-significant to least-significant.

    If we represent a buffer as an array of byte values, a big-endian encoding of
    0xFEDCBA98 would look like this:

    ``` js
    [ 0xFE, 0xDC, 0xBA, 0x98 ]
    ```

    In little-endian order, the bytes would be stored in this order:

    ``` js
    [ 0x98, 0xBA, 0xDC, 0xFE ]
    ```

    For 8-bit character encodings, including ASCII, Latin-1 and UTF-8, byte order is not
    significant: the text is a sequence of individual bytes.

    For UTF-16, text is represented as a sequence of 16-bit values. For example,
    a capital T in UTF-16 is 0x0054, and lowercase i is 0x0069. If we encode the string
    "Ti" with UTF-16 in big-endian byte order, we get:

    ``` js
    [ 0x00, 0x54, 0x00, 0x69 ]
    ```

    In UTF-16 with little-endian byte order, "Ti" is encoded as:

    ``` js
    [ 0x54, 0x00, 0x69, 0x00 ]
    ```

    Note that the bytes for each character are stored least-significant byte first, but
    the order of the characters is unchanged.

extends: Titanium.Module
since: "1.7"
platforms: [android, iphone, ipad, macos]

properties:
  - name: CHARSET_ASCII
    type: String
    summary: ASCII character encoding..
    description: |
        See also: [ASCII](http://en.wikipedia.org/wiki/ASCII) on Wikipedia.
    value: "ascii"
    permission: read-only

  - name: CHARSET_ISO_LATIN_1
    type: String
    summary: ISO 8859-1 (Latin-1) character encoding.
    description: |
        See also: [ISO/IEC 8859-1](http://en.wikipedia.org/wiki/ISO/IEC_8859-1) on Wikipedia.
    value: "latin1"
    permission: read-only

  - name: CHARSET_UTF8
    type: String
    summary: UTF-8 character encoding.
    description: |
        See also: [UTF-8](http://en.wikipedia.org/wiki/UTF-8) on Wikipedia.
    value: "utf8"
    permission: read-only

  - name: CHARSET_UTF16
    type: String
    summary: UTF-16 character encoding with default byte order.
    description: |
        See also: [UTF-16/UCS2](http://en.wikipedia.org/wiki/UTF-16/UCS-2) on Wikipedia.
    value: "utf16"
    permission: read-only

  - name: CHARSET_UTF16BE
    type: String
    summary: UTF-16 character encoding with big endian byte order.
    description: |
        See also: [UTF-16/UCS2](http://en.wikipedia.org/wiki/UTF-16/UCS-2) on Wikipedia.
    value: "utf16be"
    permission: read-only

  - name: CHARSET_UTF16LE
    type: String
    summary: UTF-16 character encoding with little endian byte order.
    description: |
        See also: [UTF-16/UCS2](http://en.wikipedia.org/wiki/UTF-16/UCS-2) on Wikipedia.
    value: "utf16le"
    permission: read-only

  - name: TYPE_BYTE
    type: String
    summary: 8-bit integer encoding type.
    value: "byte"
    permission: read-only

  - name: TYPE_SHORT
    type: String
    summary: 16-bit integer encoding type.
    value: "short"
    permission: read-only

  - name: TYPE_INT
    type: String
    summary: 32-bit integer encoding type.
    value: "int"
    permission: read-only

  - name: TYPE_FLOAT
    type: String
    summary: 32-bit single precision floating-point type.
    value: "float"
    permission: read-only

  - name: TYPE_LONG
    type: String
    summary: 64-bit integer encoding type.
    value: "long"
    permission: read-only

  - name: TYPE_DOUBLE
    type: String
    summary: 64-bit double precision floating-point type.
    value: "double"
    permission: read-only

  - name: BIG_ENDIAN
    type: Number
    summary: Big endian (network) byte order -- that is, the most significant byte first.
    description: |
        See "Byte Order" in the main discussion of <Titanium.Codec> for more information.
    permission: read-only

  - name: LITTLE_ENDIAN
    type: Number
    summary: Little endian byte order -- that is, the least significant byte first.
    description: |
        See "Byte Order" in the main discussion of <Titanium.Codec> for more information.
    permission: read-only

methods:
  - name: getNativeByteOrder
    summary: |
        Get the OS native byte order (either <Titanium.Codec.BIG_ENDIAN> or
        <Titanium.Codec.LITTLE_ENDIAN>).
    description: |
        See "Byte Order" in the main discussion of <Titanium.Codec> for more information.
    returns:
        type: Number
        summary: OS native byte order.
        constants: [Titanium.Codec.BIG_ENDIAN, Titanium.Codec.LITTLE_ENDIAN]

  - name: encodeNumber
    summary: Encodes a number and writes it to a buffer.
    description: |
        Takes a set of named parameters passed in the `options` argument.

        Encodes the number `source` into `dest` using the passed in data `type`.

        Two optional parameters can also be specified in `options`:

        *   If `position` is included in the `options` dictionary, writes the encoded number
            to the buffer starting at `position`.

        *   If `byteOrder` is included in the `options` dictionary, the specified byte order
            is used -- otherwise, the native byte order is assumed.
    parameters:
      - name: options
        summary: Named parameters.
        type: EncodeNumberDict
    returns:
        type: Number
        summary: Position _after_ the encoded number in `dest`.
    examples:
      - title: Encode a Double-Precision Floating Point Value
        example: |
            This example encodes a double-precision floating point value in 8 bytes using the OS byte
            order.

            ``` js
            var buffer = Ti.createBuffer({ length: 8 });
            Ti.Codec.encodeNumber({
              source: 1.23456789,
              dest: buffer,
              type: Ti.Codec.TYPE_DOUBLE
            });
            ```

      - title: Encode an Integer Specifying Start Position and Byte Order
        example: |
            This example encodes a 4-byte integer using big endian encoding, and
            writes it to the supplied buffer starting at index position 10.

            ``` js
            var buffer = Ti.createBuffer({ length: 100 });
            Ti.Codec.encodeNumber({
                source: 0x3456789a,
                dest: buffer,
                position: 10,
                type: Ti.Codec.TYPE_INT,
                byteOrder: Ti.Codec.BIG_ENDIAN
            });
            ```

  - name: decodeNumber
    summary: |
        Decodes a number from the `source` buffer using the specified data type.
    description: |
        Takes a set of named parameters in the `options` argument.

        Bytes are read from  the `source` buffer and decoded as the specified data type, `type`.

        Two optional parameters can also be specified in `options`:

        *   If `position` is included in the `options` dictionary, reads data from the
            buffer starting at `position`.

        *   If `byteOrder` is included in the `options` dictionary, the specified byte order
            is used -- otherwise, the native byte order is assumed.

        Throws an exception if `source` is null, or `position` is greater than `source.length`
    parameters:
      - name: options
        summary: Named parameters.
        type: DecodeNumberDict
    returns:
        type: Number
        summary: Number decoded from `source`.

    examples:

      - title: Decode a Double-Precision Floating Point Number
        example: |
            This sample decodes an 8-byte double-precision floating point number using the
            OS byte order.

            ``` js
            var buffer = // a buffer containing (at least) one 8-byte floating-point number
            var value = Ti.Codec.decodeNumber({
                source: buffer,
                type: Ti.Codec.TYPE_DOUBLE
            });
            ```

      - title: Decode an Integer Specifying Start Position and Byte Order
        example: |
            This sample decodes a 4-byte integer starting at index position 10 in the
            buffer, using big endian encoding.

            ``` js
            var buffer = // a buffer containing a 4-byte integer at position 10.
            var value = Ti.Codec.decodeNumber({
                  source: buffer,
                  position: 10,
                  type: Ti.Codec.TYPE_INT,
                  byteOrder: Ti.Codec.BIG_ENDIAN
            });
            ```

  - name: encodeString
    summary: |
        Encodes a string into a series of bytes in a buffer using the specified character set.
    description: |
        Takes a set of named parameters in the `options` argument.

        The string is read from `source` and written to the buffer `dest`.

        Several optional parameters can also be specified in `options`:

        *   If `charset` is included, the string is encoded using the specified character
            encoding.

        *   If `destPosition` is included, data is written into the buffer starting at
            the specified position.

        *   If `sourcePosition` is included, a substring of the source string starting at the
            specified position is encoded.

        *   If `sourceLength` is included, at most the specified numer of characters
            are encoded.

        Throws an exception if `charset` is not a valid character set,
        `source` is null, or either `sourcePosition`, `sourceLength`, or
        `sourcePosition`+`sourceLength` is greater than `source.length`.
    parameters:

      - name: options
        summary: Named parameters.
        type: Dictionary<EncodeStringDict>

    returns:
        type: Number
        summary: |
            An index indicating the first byte in the destination buffer _after_ the
            encoded string.
    examples:
      - title: Encode String with Default Character Encoding
        example: |
            This sample encodes a string using the default character encoding (UTF-8), then trims the
            buffer to the length of the encoded string.

            ``` js
            var buffer = Ti.createBuffer({ length: 1024 });
            var length = Ti.Codec.encodeString({
                source: "hello world",
                dest: buffer
            });
            buffer.length = length;
            ```

      - title: Encode Substring with Specified Character Encoding
        example: |
            This sample encodes the first 10 characters of a string using UTF-16 character encoding.

            ``` js
            // (10 * 2) + BOM = 22
            var buffer = Ti.createBuffer({ length: 22 });
            Ti.Codec.encodeString({
                source: "jack jumped over the candle stick",
                sourceLength: 10,
                dest: buffer,
                charset: Ti.Codec.CHARSET_UTF16
            });
            ```

  - name: decodeString
    summary: |
        Decodes the source buffer into a String using the supplied character set.
    description: |
        Takes a set of named parameters in the `options` argument.

        Bytes are read from the `source` buffer and decoded as a string.

        Several optional parameters can also be specified in `options`:

        *   If `position` is specified, bytes are read from `source` starting at `position`.

        *   If `length` is specified, no more than `length` bytes are read.

        *   If `charset` is specified, it determines the character encoding used to decode the
            string. Otherwise, UTF-8 is assumed.

        Throws an exception if `charset` is not a valid character set, `source` is null,
        or either `position`, `length`, or `position`+`length` is greater than `source.length`.
    parameters:

      - name: options
        summary: Named parameters.
        type: DecodeStringDict
    returns:
        type: String
        summary: The decoded string
    examples:

      - title: Decode a String
        example: |
            This sample decodes a string using the default character encoding.

            ``` js
            var buffer = // a buffer containing an encoded string
            var string = Ti.Codec.decodeString({ source: buffer });
            ```

      - title: Decode a String with a Specified Character Encoding
        example: |
            This sample decodes a string using the UTF-16 character encoding.

            ``` js
            var buffer = // a buffer containing a UTF-16 encoded string
            var string = Ti.Codec.decodeString({
              source: buffer,
              charset: Ti.Codec.CHARSET_UTF16
            });
            ```

---
name: EncodeNumberDict
summary: Named parameters for <Titanium.Codec.encodeNumber>.
properties:

  - name: source
    type: Number
    summary: Number to encode.
    optional: false

  - name: dest
    type: Titanium.Buffer
    summary: Destination buffer.
    optional: false

  - name: type
    type: String
    summary:
        Encoding type to use.
    constants: Titanium.Codec.TYPE_*
    optional: false

  - name: position
    type: Number
    summary: Index in the `dest` buffer of the first byte of encoded data.
    optional: true
    default: 0
    platforms: [android, iphone, ipad, macos]

  - name: byteOrder
    type: Number
    summary: Byte order to encode with.
    optional: true
    default: Native byte order.

---
name: DecodeNumberDict
summary: Named parameters for <Titanium.Codec.decodeNumber>.
properties:

  - name: source
    type: Titanium.Buffer
    summary: Buffer to decode.
    optional: false

  - name: type
    type: String
    summary:
        The encoding type to use.
    constants: Titanium.Codec.TYPE_*
    optional: false

  - name: position
    type: Number
    summary: Index in the `source` buffer of the first byte of data to decode.
    optional: true
    default: 0
    platforms: [android, iphone, ipad, macos]

  - name: byteOrder
    type: Number
    summary: byte order to decode with.
    optional: true
    default: Native byte order.
    platforms: [android, iphone, ipad, macos]

---
name: EncodeStringDict
summary: Named parameters for <Titanium.Codec.encodeString>.
properties:
  - name: source
    type: String
    summary: Source string to encode.
    optional: false

  - name: dest
    type: Titanium.Buffer
    summary: Destination buffer.
    optional: false

  - name: destPosition
    type: Number
    summary: Index in the `dest` buffer of the first byte of the encoded string.
    optional: true
    default: 0

  - name: sourcePosition
    type: Number
    summary: Position in `source` to start encoding.
    optional: true
    default: 0

  - name: sourceLength
    type: Number
    summary: Number of characters in `source` to encode.
    optional: true
    default: The length of `source`

  - name: charset
    type: String
    summary: Character encoding to use when encoding this string to bytes.
    optional: true
    constants: Titanium.Codec.CHARSET_*
    default: <Titanium.Codec.CHARSET_UTF8>

---
name: DecodeStringDict
summary: Named parameters for <Titanium.Codec.decodeString>.
properties:

  - name: source
    type: Titanium.Buffer
    summary: Buffer to decode.
    optional: false

  - name: position
    type: Number
    summary: Index in the `source` buffer of the first byte of data to decode.
    optional: true
    default: 0

  - name: length
    type: Number
    summary: Number of bytes to decode.
    optional: true
    default: Length of `source`

  - name: charset
    type: String
    summary: Character set to use when encoding this string to bytes.
    optional: true
    constants: Titanium.Codec.CHARSET_*
    default: <Titanium.Codec.CHARSET_UTF8>
