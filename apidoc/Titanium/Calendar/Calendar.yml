---
name: Titanium.Calendar
summary: |
    The Calendar module provides an API for accessing the native calendar functionality.
description: |
    This module supports retrieving information about existing events and creating new events.
    Modifying or deleting existing events and creating recurring events are only supported on iOS.

    Currently, on Android, calendar permissions must be explicitly configured in `tiapp.xml` in order to access the
    calendar. See "Common Requirements" in
    [tiapp.xml and timodule.xml Reference](https://docs.appcelerator.com/platform/latest/#!/guide/tiapp.xml_and_timodule.xml_Reference).

extends: Titanium.Module
platforms: [android, iphone, ipad, macos]
since: {android: "3.2.0", iphone: "3.1.0", ipad: "3.1.0"}
createable: false

events:
  - name: change
    summary: Fired when the database backing the EventKit module is modified.
    description: |
        This event is fired when changes are made to the Calendar database, including adding,
        removing, and changing events or reminders. Individual changes are not described.
        When you receive this notification, you should refetch all Event objects you have
        accessed, as they are considered stale. If you are actively editing an event and
        do not wish to refetch it unless it is absolutely necessary to do so, you can call
        the [refresh](Titanium.Calendar.Event.refresh) method on it. If the method returns
        YES, you do not need to refetch the event.
    platforms: [iphone, ipad, macos]
    since: "3.1.0"

methods:
  - name: getCalendarById
    summary: Gets the calendar with the specified identifier.
    returns:
        type: Titanium.Calendar.Calendar
    parameters:
      - name: id
        summary: Identifier of the calendar.
        type: String
    platforms: [android, iphone, ipad, macos]

  - name: hasCalendarPermissions
    summary: Returns `true` if the app has calendar access.
    returns:
        type: Boolean
    platforms: [iphone, ipad, android, macos]
    since: "5.1.0"

  - name: requestCalendarPermissions
    summary: Requests for calendar access.
    description: |
        On Android, the request view will show if the permission is not accepted by the user, and the user did
        not check the box "Never ask again" when denying the request. If the user checks the box "Never ask again,"
        the user has to manually enable the permission in device settings. This method requests `Manifest.permission.READ_CALENDAR`
        and `Manifest.permission.WRITE_CALENDAR` on Android. If you require other permissions, you can also use
        <Titanium.Android.requestPermissions>.

        In iOS 6, Apple introduced the Info.plist key `NSCalendarsUsageDescription` that is used to display an
        own description while authorizing calendar permissions. In iOS 10, this key is mandatory and the application
        will crash if your app does not include the key. Check the [Apple docs](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html) for more information.
    parameters:
      - name: callback
        summary: |
            Function to call upon user decision to grant calendar access.
            Optional on SDK 10, as this method will return a `Promise`, which may be used to handle the result.
        type: Callback<EventsAuthorizationResponse>
        optional: true
    returns:
      summary: On SDK 10+, this method will return a `Promise` whose resolved value is equivalent to that passed to the optional callback argument.
      type: Promise<EventsAuthorizationResponse>
    platforms: [iphone, ipad, android, macos]
    since: "5.1.0"

  - name: requestEventsAuthorization
    deprecated:
        since: "5.1.0"
        removed: "8.1.0"
        notes: Use [Titanium.Calendar.requestCalendarPermissions](Titanium.Calendar.requestCalendarPermissions) instead.
    summary: If authorization is unknown, the system will bring up a dialog requesting permission.
    description: |
        Note that the callback may be synchronous or asynchronous. That is, it may be called
        during requestEventsAuthorization or much later. See the "Request access to the events"
        example on how to best use this method.
    parameters:
      - name: callback
        summary: Callback function to execute when when authorization is no longer unknown.
        type: Callback<EventsAuthorizationResponse>
    platforms: [iphone, ipad]

properties:
  - name: METHOD_ALERT
    summary: Reminder alert delivery method.
    description: |
        Used with <Titanium.Calendar.Reminder>.

        One of the group of reminder method constants,
        [METHOD_ALERT](Titanium.Calendar.METHOD_ALERT),
        [METHOD_DEFAULT](Titanium.Calendar.METHOD_DEFAULT),
        [METHOD_EMAIL](Titanium.Calendar.METHOD_EMAIL),
        and [METHOD_SMS](Titanium.Calendar.METHOD_SMS).
    type: Number
    permission: read-only
    platforms: [android]

  - name: METHOD_DEFAULT
    summary: Reminder default delivery method.
    description: |
        Used with <Titanium.Calendar.Reminder>.

        One of the group of reminder method constants,
        [METHOD_ALERT](Titanium.Calendar.METHOD_ALERT),
        [METHOD_DEFAULT](Titanium.Calendar.METHOD_DEFAULT),
        [METHOD_EMAIL](Titanium.Calendar.METHOD_EMAIL),
        and [METHOD_SMS](Titanium.Calendar.METHOD_SMS).
    type: Number
    permission: read-only
    platforms: [android]

  - name: METHOD_EMAIL
    summary: Reminder email delivery method.
    description: |
        Used with <Titanium.Calendar.Reminder>.

        One of the group of reminder method constants,
        [METHOD_ALERT](Titanium.Calendar.METHOD_ALERT),
        [METHOD_DEFAULT](Titanium.Calendar.METHOD_DEFAULT),
        [METHOD_EMAIL](Titanium.Calendar.METHOD_EMAIL),
        and [METHOD_SMS](Titanium.Calendar.METHOD_SMS).
    type: Number
    permission: read-only
    platforms: [android]

  - name: METHOD_SMS
    summary: Reminder SMS delivery method.
    description: |
        Used with <Titanium.Calendar.Reminder>.

        One of the group of reminder method constants,
        [METHOD_ALERT](Titanium.Calendar.METHOD_ALERT),
        [METHOD_DEFAULT](Titanium.Calendar.METHOD_DEFAULT),
        [METHOD_EMAIL](Titanium.Calendar.METHOD_EMAIL),
        and [METHOD_SMS](Titanium.Calendar.METHOD_SMS).
    type: Number
    permission: read-only
    platforms: [android]

  - name: STATE_DISMISSED
    summary: Alert dismissed state.
    description: |
        Used with <Titanium.Calendar.Alert>.

        One of the group of reminder method constants,
        [STATE_DISMISSED](Titanium.Calendar.STATE_DISMISSED),
        [STATE_FIRED](Titanium.Calendar.STATE_FIRED),
        and [STATE_SCHEDULED](Titanium.Calendar.STATE_SCHEDULED).
    type: Number
    permission: read-only
    platforms: [android]

  - name: STATE_FIRED
    summary: Alert fired state.
    description: |
        Used with <Titanium.Calendar.Alert>.

        One of the group of reminder method constants,
        [STATE_DISMISSED](Titanium.Calendar.STATE_DISMISSED),
        [STATE_FIRED](Titanium.Calendar.STATE_FIRED),
        and [STATE_SCHEDULED](Titanium.Calendar.STATE_SCHEDULED).
    type: Number
    permission: read-only
    platforms: [android]

  - name: STATE_SCHEDULED
    summary: Alert scheduled status.
    description: |
        Used with <Titanium.Calendar.Alert>.

        One of the group of reminder method constants,
        [STATE_DISMISSED](Titanium.Calendar.STATE_DISMISSED),
        [STATE_FIRED](Titanium.Calendar.STATE_FIRED),
        and [STATE_SCHEDULED](Titanium.Calendar.STATE_SCHEDULED).
    type: Number
    permission: read-only
    platforms: [android]

  - name: STATUS_NONE
    summary: Event has no status.
    description: |
        An [event's status](Titanium.Calendar.Event.status) value.

        One of the group of event "status" constants,
        [STATUS_CANCELED](Titanium.Calendar.STATUS_CANCELED),
        [STATUS_CONFIRMED](Titanium.Calendar.STATUS_CONFIRMED),
        and [STATUS_TENTATIVE](Titanium.Calendar.STATUS_TENTATIVE).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: STATUS_CANCELED
    summary: Event canceled status.
    description: |
        An [event's status](Titanium.Calendar.Event.status) value.

        One of the group of event "status" constants,
        [STATUS_NONE](Titanium.Calendar.STATUS_NONE),
        [STATUS_CANCELED](Titanium.Calendar.STATUS_CANCELED),
        [STATUS_CONFIRMED](Titanium.Calendar.STATUS_CONFIRMED),
        and [STATUS_TENTATIVE](Titanium.Calendar.STATUS_TENTATIVE).
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]

  - name: STATUS_CONFIRMED
    summary: Event confirmed status.
    description: |
        An [event's status](Titanium.Calendar.Event.status) value.

        One of the group of event "status" constants,
        [STATUS_NONE](Titanium.Calendar.STATUS_NONE),
        [STATUS_CANCELED](Titanium.Calendar.STATUS_CANCELED),
        [STATUS_CONFIRMED](Titanium.Calendar.STATUS_CONFIRMED),
        and [STATUS_TENTATIVE](Titanium.Calendar.STATUS_TENTATIVE).
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]

  - name: STATUS_TENTATIVE
    summary: Event tentative status.
    description: |
        An [event's status](Titanium.Calendar.Event.status) value.

        One of the group of event "status" constants,
        [STATUS_NONE](Titanium.Calendar.STATUS_NONE),
        [STATUS_CANCELED](Titanium.Calendar.STATUS_CANCELED),
        [STATUS_CONFIRMED](Titanium.Calendar.STATUS_CONFIRMED),
        and [STATUS_TENTATIVE](Titanium.Calendar.STATUS_TENTATIVE).
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]

  - name: AVAILABILITY_NOTSUPPORTED
    summary: Availability settings are not supported by the event's calendar.
    description: |
        An [event's availability](Titanium.Calendar.Event.availability) value.

        One of the group of event method constants,
        [AVAILABILITY_NOTSUPPORTED](Titanium.Calendar.AVAILABILITY_NOTSUPPORTED),
        [AVAILABILITY_BUSY](Titanium.Calendar.AVAILABILITY_BUSY),
        [AVAILABILITY_FREE](Titanium.Calendar.AVAILABILITY_FREE),
        [AVAILABILITY_TENTATIVE](Titanium.Calendar.AVAILABILITY_TENTATIVE),
        and [AVAILABILITY_UNAVAILABLE](Titanium.Calendar.AVAILABILITY_UNAVAILABLE).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AVAILABILITY_BUSY
    summary: Event has a busy availability setting.
    description: |
        An [event's availability](Titanium.Calendar.Event.availability) value.

        One of the group of event method constants,
        [AVAILABILITY_NOTSUPPORTED](Titanium.Calendar.AVAILABILITY_NOTSUPPORTED),
        [AVAILABILITY_BUSY](Titanium.Calendar.AVAILABILITY_BUSY),
        [AVAILABILITY_FREE](Titanium.Calendar.AVAILABILITY_FREE),
        [AVAILABILITY_TENTATIVE](Titanium.Calendar.AVAILABILITY_TENTATIVE),
        and [AVAILABILITY_UNAVAILABLE](Titanium.Calendar.AVAILABILITY_UNAVAILABLE).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AVAILABILITY_FREE
    summary: Event has a free availability setting.
    description: |
        An [event's availability](Titanium.Calendar.Event.availability) value.

        One of the group of event method constants,
        [AVAILABILITY_NOTSUPPORTED](Titanium.Calendar.AVAILABILITY_NOTSUPPORTED),
        [AVAILABILITY_BUSY](Titanium.Calendar.AVAILABILITY_BUSY),
        [AVAILABILITY_FREE](Titanium.Calendar.AVAILABILITY_FREE),
        [AVAILABILITY_TENTATIVE](Titanium.Calendar.AVAILABILITY_TENTATIVE),
        and [AVAILABILITY_UNAVAILABLE](Titanium.Calendar.AVAILABILITY_UNAVAILABLE).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AVAILABILITY_TENTATIVE
    summary: Event has a tentative availability setting.
    description: |
        An [event's availability](Titanium.Calendar.Event.availability) value.

        One of the group of event method constants,
        [AVAILABILITY_NOTSUPPORTED](Titanium.Calendar.AVAILABILITY_NOTSUPPORTED),
        [AVAILABILITY_BUSY](Titanium.Calendar.AVAILABILITY_BUSY),
        [AVAILABILITY_FREE](Titanium.Calendar.AVAILABILITY_FREE),
        [AVAILABILITY_TENTATIVE](Titanium.Calendar.AVAILABILITY_TENTATIVE),
        and [AVAILABILITY_UNAVAILABLE](Titanium.Calendar.AVAILABILITY_UNAVAILABLE).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AVAILABILITY_UNAVAILABLE
    summary: Event has a tentative availability setting.
    description: |
        An [event's availability](Titanium.Calendar.Event.availability) value.

        One of the group of event method constants,
        [AVAILABILITY_NOTSUPPORTED](Titanium.Calendar.AVAILABILITY_NOTSUPPORTED),
        [AVAILABILITY_BUSY](Titanium.Calendar.AVAILABILITY_BUSY),
        [AVAILABILITY_FREE](Titanium.Calendar.AVAILABILITY_FREE),
        [AVAILABILITY_TENTATIVE](Titanium.Calendar.AVAILABILITY_TENTATIVE),
        and [AVAILABILITY_UNAVAILABLE](Titanium.Calendar.AVAILABILITY_UNAVAILABLE).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUTHORIZATION_AUTHORIZED
    summary: |
        An [calendarAuthorization](Titanium.Calendar.calendarAuthorization) value
        indicating that the application is authorized to use events in the Calendar.
    description: |
        This value is always returned if the device is running an iOS release prior to 6.0.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUTHORIZATION_DENIED
    summary: |
        An [calendarAuthorization](Titanium.Calendar.calendarAuthorization) value
        indicating that the application is not authorized to use events in the Calendar.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUTHORIZATION_RESTRICTED
    summary: |
        An [calendarAuthorization](Titanium.Calendar.calendarAuthorization) value
        indicating that the application is not authorized to use events in the Calendar.
        the user cannot change this application's status.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUTHORIZATION_UNKNOWN
    summary: |
        An [calendarAuthorization](Titanium.Calendar.calendarAuthorization) value
        indicating that the authorization state is unknown.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: SPAN_THISEVENT
    summary: |
        A [save](Titanium.Calendar.Event.save)/[remove](Titanium.Calendar.Event.remove) event value,
        indicating modifications to this event instance should affect only this instance.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: SPAN_FUTUREEVENTS
    summary: |
        A [save](Titanium.Calendar.Event.save)/[remove](Titanium.Calendar.Event.remove) event value,
        indicating modifications to this event instance should also affect future instances of this event.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: RECURRENCEFREQUENCY_DAILY
    summary: Indicates a daily recurrence rule for a events reccurance frequency.
    description:  |
        Used with the <Titanium.Calendar.RecurrenceRule.frequency> property.
        
        One of the group of event "frequency" constants 
        [RECURRENCEFREQUENCY_DAILY](Titanium.Calendar.RECURRENCEFREQUENCY_DAILY),
        [RECURRENCEFREQUENCY_WEEKLY](Titanium.Calendar.RECURRENCEFREQUENCY_WEEKLY),
        [RECURRENCEFREQUENCY_MONTHLY](Titanium.Calendar.RECURRENCEFREQUENCY_MONTHLY),
        and [RECURRENCEFREQUENCY_YEARLY](Titanium.Calendar.RECURRENCEFREQUENCY_YEARLY).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since: {iphone: "3.1.0", ipad: "3.1.0", android: "7.1.0"}

  - name: RECURRENCEFREQUENCY_WEEKLY
    summary: Indicates a weekly recurrence rule for a events reccurance frequency.
    description:  |
        Used with the <Titanium.Calendar.RecurrenceRule.frequency> property.
        
        One of the group of event "frequency" constants 
        [RECURRENCEFREQUENCY_DAILY](Titanium.Calendar.RECURRENCEFREQUENCY_DAILY),
        [RECURRENCEFREQUENCY_WEEKLY](Titanium.Calendar.RECURRENCEFREQUENCY_WEEKLY),
        [RECURRENCEFREQUENCY_MONTHLY](Titanium.Calendar.RECURRENCEFREQUENCY_MONTHLY),
        and [RECURRENCEFREQUENCY_YEARLY](Titanium.Calendar.RECURRENCEFREQUENCY_YEARLY).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since: {iphone: "3.1.0", ipad: "3.1.0", android: "7.1.0"}

  - name: RECURRENCEFREQUENCY_MONTHLY
    summary: Indicates a monthly recurrence rule for a events reccurance frequency.
    description:  |
        Used with the <Titanium.Calendar.RecurrenceRule.frequency> property.
        
        One of the group of event "frequency" constants 
        [RECURRENCEFREQUENCY_DAILY](Titanium.Calendar.RECURRENCEFREQUENCY_DAILY),
        [RECURRENCEFREQUENCY_WEEKLY](Titanium.Calendar.RECURRENCEFREQUENCY_WEEKLY),
        [RECURRENCEFREQUENCY_MONTHLY](Titanium.Calendar.RECURRENCEFREQUENCY_MONTHLY),
        and [RECURRENCEFREQUENCY_YEARLY](Titanium.Calendar.RECURRENCEFREQUENCY_YEARLY).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since: {iphone: "3.1.0", ipad: "3.1.0", android: "7.1.0"}

  - name: RECURRENCEFREQUENCY_YEARLY
    summary: Indicates a yearly recurrence rule for a events reccurance frequency.
    description:  |
        Used with the <Titanium.Calendar.RecurrenceRule.frequency> property.
        
        One of the group of event "frequency" constants 
        [RECURRENCEFREQUENCY_DAILY](Titanium.Calendar.RECURRENCEFREQUENCY_DAILY),
        [RECURRENCEFREQUENCY_WEEKLY](Titanium.Calendar.RECURRENCEFREQUENCY_WEEKLY),
        [RECURRENCEFREQUENCY_MONTHLY](Titanium.Calendar.RECURRENCEFREQUENCY_MONTHLY),
        and [RECURRENCEFREQUENCY_YEARLY](Titanium.Calendar.RECURRENCEFREQUENCY_YEARLY).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since: {iphone: "3.1.0", ipad: "3.1.0", android: "7.1.0"}

  - name: VISIBILITY_CONFIDENTIAL
    summary: Event confidential visibility.
    description: |
        Used with <Titanium.Calendar.Event>.

        One of the group of reminder method constants,
        [VISIBILITY_CONFIDENTIAL](Titanium.Calendar.VISIBILITY_CONFIDENTIAL),
        [VISIBILITY_DEFAULT](Titanium.Calendar.VISIBILITY_DEFAULT),
        [VISIBILITY_PRIVATE](Titanium.Calendar.VISIBILITY_PRIVATE),
        and [VISIBILITY_PUBLIC](Titanium.Calendar.VISIBILITY_PUBLIC).
    type: Number
    permission: read-only
    platforms: [android]

  - name: VISIBILITY_DEFAULT
    summary: Event default visibility.
    description: |
        Used with <Titanium.Calendar.Event>.

        One of the group of reminder method constants,
        [VISIBILITY_CONFIDENTIAL](Titanium.Calendar.VISIBILITY_CONFIDENTIAL),
        [VISIBILITY_DEFAULT](Titanium.Calendar.VISIBILITY_DEFAULT),
        [VISIBILITY_PRIVATE](Titanium.Calendar.VISIBILITY_PRIVATE),
        and [VISIBILITY_PUBLIC](Titanium.Calendar.VISIBILITY_PUBLIC).
    type: Number
    permission: read-only
    platforms: [android]

  - name: VISIBILITY_PRIVATE
    summary: Event private visibility.
    description: |
        Used with <Titanium.Calendar.Event>.

        One of the group of reminder method constants,
        [VISIBILITY_CONFIDENTIAL](Titanium.Calendar.VISIBILITY_CONFIDENTIAL),
        [VISIBILITY_DEFAULT](Titanium.Calendar.VISIBILITY_DEFAULT),
        [VISIBILITY_PRIVATE](Titanium.Calendar.VISIBILITY_PRIVATE),
        and [VISIBILITY_PUBLIC](Titanium.Calendar.VISIBILITY_PUBLIC).
    type: Number
    permission: read-only
    platforms: [android]

  - name: VISIBILITY_PUBLIC
    summary: Event public visibility.
    description: |
        Used with <Titanium.Calendar.Event>.

        One of the group of reminder method constants,
        [VISIBILITY_CONFIDENTIAL](Titanium.Calendar.VISIBILITY_CONFIDENTIAL),
        [VISIBILITY_DEFAULT](Titanium.Calendar.VISIBILITY_DEFAULT),
        [VISIBILITY_PRIVATE](Titanium.Calendar.VISIBILITY_PRIVATE),
        and [VISIBILITY_PUBLIC](Titanium.Calendar.VISIBILITY_PUBLIC).
    type: Number
    permission: read-only
    platforms: [android]

  - name: ATTENDEE_STATUS_UNKNOWN
    summary: Attendee status is unknown.
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]
    since: {android: "6.2.0", iphone: "6.0.0", ipad: "6.0.0"}

  - name: ATTENDEE_STATUS_PENDING
    summary: Attendee status is pending.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.0.0"

  - name: ATTENDEE_STATUS_ACCEPTED
    summary: Attendee status is accepted.
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]
    since: {android: "6.2.0", iphone: "6.0.0", ipad: "6.0.0"}

  - name: ATTENDEE_STATUS_DECLINED
    summary: Attendee status is declined.
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]
    since: {android: "6.2.0", iphone: "6.0.0", ipad: "6.0.0"}

  - name: ATTENDEE_STATUS_TENTATIVE
    summary: Attendee status is tentative.
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]
    since: {android: "6.2.0", iphone: "6.0.0", ipad: "6.0.0"}

  - name: ATTENDEE_STATUS_INVITED
    summary: Attendee status is invited.
    type: Number
    permission: read-only
    platforms: [android]
    since: {android: "6.2.0"}

  - name: ATTENDEE_STATUS_NONE
    summary: There is no Attendee status.
    type: Number
    permission: read-only
    platforms: [android]
    since: {android: "6.2.0"}

  - name: ATTENDEE_STATUS_DELEGATED
    summary: Attendee status is delegated.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.0.0"

  - name: ATTENDEE_STATUS_IN_PROCESS
    summary: Attendee status is in process.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.0.0"

  - name: RELATIONSHIP_ATTENDEE
    summary: Relationship is attendee.
    type: Number
    permission: read-only
    platforms: [android]
    since: "6.2.0"

  - name: RELATIONSHIP_NONE
    summary: There is no relationship.
    type: Number
    permission: read-only
    platforms: [android]
    since: "6.2.0"

  - name: RELATIONSHIP_ORGANIZER
    summary: Attendee is organizer.
    type: Number
    permission: read-only
    platforms: [android]
    since: "6.2.0"

  - name: RELATIONSHIP_PERFORMER
    summary: Attendee is performer.
    type: Number
    permission: read-only
    platforms: [android]
    since: "6.2.0"

  - name: RELATIONSHIP_SPEAKER
    summary: Attendee is speaker.
    type: Number
    permission: read-only
    platforms: [android]
    since: "6.2.0"

  - name: RELATIONSHIP_UNKNOWN
    summary: Relationship is unknown.
    type: Number
    permission: read-only
    platforms: [android]
    since: "6.2.0"

  - name: ATTENDEE_ROLE_UNKNOWN
    summary: Attendee role is unknown.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.0.0"

  - name: ATTENDEE_ROLE_OPTIONAL
    summary: Attendee role is optional.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.0.0"

  - name: ATTENDEE_ROLE_REQUIRED
    summary: Attendee role is required.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.0.0"

  - name: ATTENDEE_ROLE_CHAIR
    summary: Attendee role is chair.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.0.0"

  - name: ATTENDEE_ROLE_NON_PARTICIPANT
    summary: Attendee is not a participant.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.0.0"

  - name: ATTENDEE_TYPE_UNKNOWN
    summary: Attendee type is unknown.
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]
    since: {android: "6.2.0", iphone: "6.0.0", ipad: "6.0.0"}

  - name: ATTENDEE_TYPE_PERSON
    summary: Attendee type is person.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.0.0"

  - name: ATTENDEE_TYPE_ROOM
    summary: Attendee type is room.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.0.0"

  - name: ATTENDEE_TYPE_RESOURCE
    summary: Attendee type is resource.
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]
    since: {android: "6.2.0", iphone: "6.0.0", ipad: "6.0.0"}

  - name: ATTENDEE_TYPE_NONE
    summary: There is not attendee type.
    type: Number
    permission: read-only
    platforms: [android]
    since: {android: "6.2.0"}

  - name: ATTENDEE_TYPE_REQUIRED
    summary: Attendee type is required.
    type: Number
    permission: read-only
    platforms: [android]
    since: {android: "6.2.0"}

  - name: ATTENDEE_TYPE_GROUP
    summary: Attendee type is group.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.0.0"

  - name: SOURCE_TYPE_LOCAL
    summary: A local calendar source.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.1.0"

  - name: SOURCE_TYPE_EXCHANGE
    summary: A microsoft exchange calendar source.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.1.0"

  - name: SOURCE_TYPE_CALDAV
    summary: A calDev calendar source.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.1.0"

  - name: SOURCE_TYPE_MOBILEME
    summary: A mobileMe calendar source.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.1.0"

  - name: SOURCE_TYPE_SUBSCRIBED
    summary: A subscribed calendar source.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.1.0"

  - name: SOURCE_TYPE_BIRTHDAYS
    summary: A birthday calendar source.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.1.0"

  - name: eventsAuthorization
    summary: Returns an authorization constant indicating if the application has access to the events in the EventKit.
    description: |
         Always returns `AUTHORIZATION_AUTHORIZED` on iOS pre-6.0.
    deprecated:
        since: "5.2.0"
        removed: "8.1.0"
        notes: Use the [Titanium.Calendar.calendarAuthorization](Titanium.Calendar.calendarAuthorization) property instead.
    type: Number
    constants: Titanium.Calendar.AUTHORIZATION_*
    permission: read-only
    platforms: [iphone, ipad]

  - name: calendarAuthorization
    summary: Returns an authorization constant indicating if the application has access to the events in the EventKit.
    description: |
        Always returns `AUTHORIZATION_AUTHORIZED` on iOS pre-6.0.
        type: Number
    since: "5.2.0"
    constants: Titanium.Calendar.AUTHORIZATION_*
    permission: read-only
    type: Number
    platforms: [iphone, ipad, macos]

  - name: allAlerts
    summary: All alerts in selected calendars.
    type: Array<Titanium.Calendar.Alert>
    permission: read-only
    platforms: [android]

  - name: allCalendars
    summary: All calendars known to the native calendar app.
    type: Array<Titanium.Calendar.Calendar>
    permission: read-only
    platforms: [android, iphone, ipad, macos]

  - name: allEditableCalendars
    summary: |
        All calendars known to the native calendar app that can add, edit, and
        delete items in the calendar.
    type: Array<Titanium.Calendar.Calendar>
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: selectableCalendars
    summary: |
        All calendars selected within the native calendar app, which may be a subset of `allCalendars`.
    description: |
        The native calendar application may know via the registered webservices, such as Gooogle or
        Facebook accounts about calendars that it has access to but have not been selected to be
        displayed in the native calendar app.
    type: Array<Titanium.Calendar.Calendar>
    permission: read-only
    platforms: [android]

  - name: defaultCalendar
    summary: |
        Calendar that events are added to by default, as specified by user settings.
    type: Titanium.Calendar.Calendar
    permission: read-only
    platforms: [iphone, ipad, macos]

examples:
  - title: All Calendars vs Selectable Calendars
    example: |
        Print the names of all calendars, and the names of calendars that
        have been selected in the native Android calendar application.

        ``` js
        function showCalendars(calendars) {
            for (var i = 0; i < calendars.length; i++) {
                Ti.API.info(calendars[i].name);
            }
        }
        // Provide permissions if necessary
        if (!Ti.Calendar.hasCalendarPermissions()) {
            Ti.Calendar.requestCalendarPermissions(function (e) {
                if (e.success) {
                    printCalendars();
                }
            });
        } else {
            printCalendars();
        }

        function printCalendars() {
            Ti.API.info('ALL CALENDARS:');
            showCalendars(Ti.Calendar.allCalendars);
            if (Ti.Platform.osname === 'android') {
                Ti.API.info('SELECTABLE CALENDARS:');
                showCalendars(Ti.Calendar.selectableCalendars);
            }
        }
        ```

  - title: Create an Event and Reminder on Android
    example: |
        Creates an event and adds an e-mail reminder for 10 minutes before the event.

        ``` js
        var CALENDAR_TO_USE = 3;
        var calendar = Ti.Calendar.getCalendarById(CALENDAR_TO_USE);

        // Create the event
        var eventBegins = new Date(2010, 11, 26, 12, 0, 0);
        var eventEnds = new Date(2010, 11, 26, 14, 0, 0);
        var details = {
            title: 'Do some stuff',
            description: "I'm going to do some stuff at this time.",
            begin: eventBegins,
            end: eventEnds
        };

        var event = calendar.createEvent(details);

        // Now add a reminder via e-mail for 10 minutes before the event.
        var reminderDetails = {
            minutes: 10,
            method: Ti.Calendar.METHOD_EMAIL
        };

        event.createReminder(reminderDetails);
        ```

  - title: Events in a year
    example: |
        Create a picker to allow an existing calendar to be selected and, when a button is clicked,
        generate details of all events in that calendar for the current year.

        ``` js        
        var calendars = [];
        var selectedCalendarName;
        var selectedid;
        var pickerData = [];
        var osname = Ti.Platform.osname;

        //**read events from calendar*******
        function performCalendarReadFunctions(){
            var scrollView = Ti.UI.createScrollView({
              backgroundColor: '#eee',
              height: 500,
              top: 20
            });

            var label = Ti.UI.createLabel({
              backgroundColor: 'gray',
              text: 'Click on the button to display the events for the selected calendar',
              textAlign: Ti.UI.TEXT_ALIGNMENT_CENTER,
              top: 20
            });
            scrollView.add(label);

            var selectableCalendars = Ti.Calendar.allCalendars;
            for (var i = 0, ilen = selectableCalendars.length; i < ilen; i++) {
              calendars.push({ name: selectableCalendars[i].name, id: selectableCalendars[i].id });
              pickerData.push( Ti.UI.createPickerRow({ title: calendars[i].name }) );
              if(i === 0){
                selectedCalendarName = selectableCalendars[i].name;
                selectedid = selectableCalendars[i].id;
              }
            }

            if(!calendars.length){
              label.text = 'No calendars available. Select at least one in the native calendar before using this app';
            } else {
              label.text = 'Click button to view calendar events';

              var picker = Ti.UI.createPicker({
                top:20
              });

              picker.add(pickerData);
              win.add(picker);

              picker.addEventListener('change', function(e){
                for (var i = 0, ilen = calendars.length; i < ilen; i++) {
                  if(calendars[i].name === e.row.title){
                    selectedCalendarName = calendars[i].name;
                    selectedid = calendars[i].id;
                    Ti.API.info('Selected calendar that we are going to fetch is :: '+ selectedid + ' name:' + selectedCalendarName);
                  }
                }
              });

              var button = Ti.UI.createButton({
                title: 'View events',
                top: 20
              });
              win.add(button);

              button.addEventListener('click', function(e){
                label.text = 'Generating...';

                var currentYear = new Date().getFullYear();

                var consoleString = '';

                function print(s) {
                  if (consoleString.length) {
                    consoleString = consoleString + '\n';
                  }
                  consoleString = consoleString + s;
                }

                var calendar = Ti.Calendar.getCalendarById(selectedid);
                Ti.API.info('Calendar was of type' + calendar);
                Ti.API.info('calendar that we are going to fetch is :: '+ calendar.id + ' name:' + calendar.name);

                function printReminder(r) {
                    if (osname === 'android') {
                        var typetext = '[method unknown]';
                        if (r.method == Ti.Calendar.METHOD_EMAIL) {
                            typetext = 'Email';
                        } else if (r.method == Ti.Calendar.METHOD_SMS) {
                            typetext = 'SMS';
                        } else if (r.method == Ti.Calendar.METHOD_ALERT) {
                            typetext = 'Alert';
                        } else if (r.method == Ti.Calendar.METHOD_DEFAULT) {
                            typetext = '[default reminder method]';
                        }
                        print(typetext + ' reminder to be sent ' + r.minutes + ' minutes before the event');
                    }
                }

                function printAlert(a) {
                    if (osname === 'android') {
                          print('Alert id ' + a.id + ' begin ' + a.begin + '; end ' + a.end + '; alarmTime ' + a.alarmTime + '; minutes ' + a.minutes);
                    } else if (osname === 'iphone' || osname === 'ipad') {
                        print('Alert absoluteDate ' + a.absoluteDate + ' relativeOffset ' + a.relativeOffset);
                    }
                }

                function printEvent(event) {
                  if (event.allDay) {
                    print('Event: ' + event.title + '; ' + event.begin + ' (all day)');
                  } else {
                    print('Event: ' + event.title + '; ' + event.begin + ' ' + event.begin+ '-' + event.end);
                  }

                  var reminders = event.reminders;
                  if (reminders && reminders.length) {
                      print('There is/are ' + reminders.length + ' reminder(s)');
                      for (var i = 0; i < reminders.length; i++) {
                          printReminder(reminders[i]);
                      }
                  }
                  print('hasAlarm? ' + event.hasAlarm);
                  var alerts = event.alerts;
                  if (alerts && alerts.length) {
                    for (var i = 0; i < alerts.length; i++) {
                      printAlert(alerts[i]);
                    }
                  }

                  var status = event.status;
                  if (status == Ti.Calendar.STATUS_TENTATIVE) {
                    print('This event is tentative');
                  }
                  if (status == Ti.Calendar.STATUS_CONFIRMED) {
                    print('This event is confirmed');
                  }
                  if (status == Ti.Calendar.STATUS_CANCELED) {
                    print('This event was canceled');
                  }
                }

                var events = calendar.getEventsInYear(currentYear);
                if (events && events.length) {
                  print(events.length + ' event(s) in ' + currentYear);
                  print('');
                  for (var i = 0; i < events.length; i++) {
                    printEvent(events[i]);
                    print('');
                  }
                } else {
                  print('No events');
                }

                label.text = consoleString;
              });
            }

            win.add(scrollView);
        }


        var win = Ti.UI.createWindow({
          backgroundColor: 'gray',
          exitOnClose: true,
          fullscreen: false,
          layout: 'vertical',
          title: 'Calendar Demo'
        });

        if (Ti.Calendar.hasCalendarPermissions()) {
            performCalendarReadFunctions();
        } else {
            Ti.Calendar.requestCalendarPermissions(function(e) {
                if (e.success) {
                    performCalendarReadFunctions();
                } else {
                    Ti.API.error(e.error);
                    alert('Access to calendar is not allowed');
                }
            });
        }

        win.open();
        ```

  - title: Create a Recurring Event with Alerts on iOS (add the code to the sample above)
    example: |
        Create a recurring event with alerts.

        ``` js
        function printEventDetails(eventID) {
            Ti.API.info('eventID:' + eventID);
            var defCalendar = Ti.Calendar.getCalendarById(selectedid);
            var eventFromCalendar = defCalendar.getEventById(eventID);
            if (eventFromCalendar) {
                Ti.API.info('Printing event values ::');
                Ti.API.info('title: '+ eventFromCalendar.title);
                Ti.API.info('notes: ' + eventFromCalendar.notes);
                Ti.API.info('location: ' + eventFromCalendar.location);
                Ti.API.info('allDay?:' + eventFromCalendar.allDay);
                Ti.API.info('status: '+ eventFromCalendar.status);
                Ti.API.info('availability: '+ eventFromCalendar.availability);
                Ti.API.info('hasAlarm?: '+ eventFromCalendar.hasAlarm);
                Ti.API.info('id: '+ eventFromCalendar.id);
                Ti.API.info('isDetached?: '+ eventFromCalendar.isDetached);
                Ti.API.info('begin: '+ eventFromCalendar.begin);
                Ti.API.info('end: '+ eventFromCalendar.end);
                var eventRule = eventFromCalendar.recurrenceRules;
                Ti.API.info('recurrenceRules : ' + eventRule);
                for (var i = 0; i < eventRule.length; i++) {
                    Ti.API.info('Rule # ' + i);
                    Ti.API.info('frequency: ' + eventRule[i].frequency);
                    Ti.API.info('interval: ' + eventRule[i].interval);
                    Ti.API.info('daysofTheWeek: ' );
                    var daysofTheWeek = eventRule[i].daysOfTheWeek;
                    for (var j = 0; j < daysofTheWeek.length; j++) {
                        Ti.API.info('{ dayOfWeek: ' + daysofTheWeek[j].dayOfWeek + ', weekNumber: ' + daysofTheWeek[j].week + ' }, ');
                    }
                    Ti.API.info('firstDayOfTheWeek: ' + eventRule[i].firstDayOfTheWeek);
                    Ti.API.info('daysOfTheMonth: ');
                    var daysOfTheMonth = eventRule[i].daysOfTheMonth;
                    for(var j = 0; j < daysOfTheMonth.length; j++) {
                        Ti.API.info(' ' + daysOfTheMonth[j]);
                    }
                    Ti.API.info('daysOfTheYear: ');
                    var daysOfTheYear = eventRule[i].daysOfTheYear;
                    for(var j = 0; j < daysOfTheYear.length; j++) {
                        Ti.API.info(' ' + daysOfTheYear[j]);
                    }
                    Ti.API.info('weeksOfTheYear: ');
                    var weeksOfTheYear = eventRule[i].weeksOfTheYear;
                    for(var j = 0; j < weeksOfTheYear.length; j++) {
                        Ti.API.info(' ' + weeksOfTheYear[j]);
                    }
                    Ti.API.info('monthsOfTheYear: ');
                    var monthsOfTheYear = eventRule[i].monthsOfTheYear;
                    for(var j = 0; j < monthsOfTheYear.length; j++) {
                        Ti.API.info(' ' + monthsOfTheYear[j]);
                    }
                    Ti.API.info('daysOfTheYear: ');
                    if (osname !== 'android') {
                        var setPositions = eventRule[i].setPositions;
                        for(var j = 0; j < setPositions.length; j++) {
                            Ti.API.info(' ' + setPositions[j]);
                        }
                    }
                };
                Ti.API.info('alerts: ' + eventFromCalendar.alerts);
                var newAlerts = eventFromCalendar.alerts;

                for(var i = 0 ; i < newAlerts.length ; i++) {
                    Ti.API.info('*****Alert ' + i);
                    Ti.API.info('absoluteDate: ' + newAlerts[i].absoluteDate);
                    Ti.API.info('relativeOffset: ' + newAlerts[i].relativeOffset);
                }
            }
        }
        function performCalendarWriteFunctions(){
            var defCalendar = Ti.Calendar.getCalendarById(selectedid);
            var date1 = new Date(new Date().getTime() + 3000),
                date2 = new Date(new Date().getTime() + 900000);
            Ti.API.info('Date1: ' + date1 + ', Date2: ' + date2);
            var event1 = defCalendar.createEvent({
                                title: 'Sample Event',
                                notes: 'This is a test event which has some values assigned to it.',
                                location: 'Appcelerator Inc',
                                begin: date1,
                                end: date2,
                                availability: Ti.Calendar.AVAILABILITY_FREE,
                                allDay: false,
                        });
            var alert1;
            var alert2;
            if (osname === 'android') {
                alert1 = event1.createAlert({
                    minutes: 60
                })
            } else {
                alert1 = event1.createAlert({
                    absoluteDate: new Date(new Date().getTime() - (1000*60*20))
                });
                alert2 = event1.createAlert({
                    relativeOffset:-(60*15)
                })
            }

            var allAlerts = new Array(alert1,alert2);
            event1.alerts = allAlerts;
            var newRule = event1.createRecurrenceRule({
                frequency: Ti.Calendar.RECURRENCEFREQUENCY_MONTHLY,
                interval: 1,
                daysOfTheWeek: [ { dayOfWeek: 1, week: 2 }, { dayOfWeek: 2 } ],
                end: { occurrenceCount: 10 }
            });
            Ti.API.info('newRule: '+ newRule);
            event1.recurrenceRules = [newRule];
            Ti.API.info('Going to save event now');
            event1.save(Ti.Calendar.SPAN_THISEVENT);
            Ti.API.info('Done with saving event,\n Now trying to retrieve it.');
            printEventDetails(event1.id);
        }

        var button2 = Ti.UI.createButton({
            title: 'Create a recurring event',
            top: 20
        });
        win.add(button2);
        button2.addEventListener('click', function () {
            performCalendarWriteFunctions();
        });
        ```

---
name: EventsAuthorizationResponse
summary: Argument passed to the callback when a request finishes successfully or erroneously.
since: "3.1.0"
platforms: [iphone, ipad, macos]
properties:
  - name: success
    summary: Indicates whether the request succeeded.
    description: Returns `true` if request succeeded.
    type: Boolean

  - name: error
    summary: Error message, if any returned.
    description: May be undefined if `success` is `true`.
    type: String

  - name: code
    summary: Error code, if any returned.
    description: May be undefined if `success` is `true`.
    type: Number
