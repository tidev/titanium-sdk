---
name: Titanium.UI.PickerColumn
summary:
    A picker column, representing a selectable group of items in a <Titanium.UI.Picker>.
description: |
    Use the <Titanium.UI.createPickerColumn> method to create a picker column control. In an Alloy application,
    you can use a **`<PickerColumn>`** element inside a `<Picker>` element. You can also use `<Column>`
    as a shorthand for `<PickerColumn>` (see Examples).

    On Android, the `useSpinner` property must be enabled to support multiple columns.

    See <Titanium.UI.Picker> for further examples of usage.
extends: Titanium.UI.View
excludes:
  properties: [
    accessibilityHidden, accessibilityHint, accessibilityLabel, accessibilityValue, animatedCenter,
    anchorPoint, backgroundColor, backgroundDisabledColor, backgroundDisabledImage,
    backgroundFocusedColor, backgroundFocusedImage, backgroundGradient, backgroundImage,
    backgroundLeftCap, backgroundRepeat, backgroundSelectedColor, backgroundSelectedImage,
    backgroundTopCap, borderColor, borderRadius, borderWidth, bottom, center, children, clipMode,
    elevation, focusable, height, hiddenBehavior, horizontalMotionEffect, left, layout, opacity,
    overrideCurrentAnimation, pullBackgroundColor, previewContext, right, rect, rotation,
    rotationX, rotationY, scaleX, scaleY, size, softKeyboardOnFocus, top, touchEnabled,
    touchFeedback, touchFeedbackColor, transform, translationX, translationY, translationZ,
    transitionName, verticalMotionEffect, viewShadowRadius, viewShadowColor, viewShadowOffset,
    visible, width, horizontalWrap, keepScreenOn, tintColor, zIndex]
  methods: [add, animate, clearMotionEffects, finishLayout, hide, insertAt, remove,
    removeAllChildren, replaceAt, show, startLayout, toImage, updateLayout, convertPointToView,
    getViewById]
  events: [click, dblclick, doubletap, keypressed, longpress, pinch, singletap, swipe, touchcancel,
    touchend, touchmove, touchstart, twofingertap]
since: "0.9"
platforms: [android, iphone, ipad, macos]

methods:
  - name: addRow
    summary: Adds a row to this column.
    description: |
      In an Alloy application you can use one or more `<PickerRow>` (or `<Row>`) elements inside
      a `<PickerColumn>` (or `<Column>`) element.

      ``` xml
      <Alloy>
          <PickerColumn id="hour">
              <PickerRow title="10"/>
              <PickerRow title="11"/>
              <PickerRow title="12"/>
          </PickerColumn>
          <!-- Picker shorthand notation -->
          <Column id="minutes">
              <Row title="15"/>
              <Row title="30"/>
              <Row title="45"/>
              <Row title="00"/>
          </Column>
      </Alloy>
      ```

    parameters:
      - name: row
        summary: A row to add.
        type: Titanium.UI.PickerRow

  - name: removeRow
    summary: Removes a row from this column.
    parameters:
      - name: row
        summary: A row to remove.
        type: Titanium.UI.PickerRow
properties:
  - name: rowCount
    summary: Number of rows in this column.
    type: Number
    permission: read-only

  - name: rows
    summary: Rows of this column.
    description: |
        While this property is currently writable on Android, changing its value is strongly
        discouraged.
    type: Array<Titanium.UI.PickerRow>
    permission: read-only

  - name: font
    summary: Font to use for text.
    type: Font
    platforms: [android]

examples:
  - title: Multi-Column Picker
    example: |
        Create a two-column, platform-specific style, picker and automatically select a row in
        each column.

        ``` js
        var win = Ti.UI.createWindow({
          backgroundColor: 'white',
          exitOnClose: true,
          fullscreen: false,
          title: 'Use picker to make selection'
        });

        var fruit = [ 'Bananas', 'Grapes', 'Blueberries', 'Strawberries' ];
        var color = [ 'blue', 'red', 'yellow', 'white' ];

        var column1 = Ti.UI.createPickerColumn();

        for(var i=0, ilen=fruit.length; i<ilen; i++){
          var row = Ti.UI.createPickerRow({
            title: fruit[i]
          });
          column1.addRow(row);
        }

        var column2 = Ti.UI.createPickerColumn();

        for(var i=0, ilen=color.length; i<ilen; i++){
          var row = Ti.UI.createPickerRow({
            title: color[i]
          });
          column2.addRow(row);
        }

        var picker = Ti.UI.createPicker({
          columns: [column1, column2],
          selectionIndicator: true,
          useSpinner: true, // required in order to use multi-column pickers with Android
          top:50
        });

        function pickerDefaults(obj){
          // on iOS, must be after picker has been rendered
          picker.setSelectedRow(0, 2, false);
          picker.setSelectedRow(1, 3, false);
        }

        win.add(picker);

        var isAndroid = Ti.Platform.osname === 'android';

        if(isAndroid){
          pickerDefaults(picker);
        }

        win.open();

        if(!isAndroid){
          setTimeout(function(){
            pickerDefaults(picker);
          }, 1500);
        }
        ```

  - title: Alloy XML Markup
    example: |
        Previous example as an Alloy view.

        multicolumnpicker.xml
        ``` xml
        <Alloy>
            <Window id="win" backgroundColor="white" exitOnClose="true" fullscreen="false"
                title="Use picker to make selection">

                <Picker id="picker" top="50" selectionIndicator="true" useSpinner="true">
                    <PickerColumn id="column1">
                        <PickerRow title="Bananas"/>
                        <PickerRow title="Grapes"/>
                        <PickerRow title="Blueberries"/>
                        <PickerRow title="Strawberries"/>
                    </PickerColumn>
                    <!-- Picker shorthand notation -->
                    <Column id="column2">
                        <Row title="blue"/>
                        <Row title="red"/>
                        <Row title="yellow"/>
                        <Row title="white"/>
                    </Column>
                </Picker>
            </Window>
        </Alloy>
        ```

        multicolumnpicker.js:
        ``` js
        $.picker.setSelectedRow(0, 2, false);
        $.picker.setSelectedRow(1, 3, false);
        ```
