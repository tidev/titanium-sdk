---
name: Titanium.UI.TableView
summary: |
    A table view is used to present information, organized in sections and rows, in a
    vertically-scrolling view.
description: |
    | Android | iOS | Windows |
    | ------- | --- | ------- |
    | ![Android](./tableview_android.png) | ![iOS](./tableview_ios.png) | ![Windows](./tableview_wp.png) |

    A `TableView` object is a container for [TableViewSection](Titanium.UI.TableViewSection)
    objects that are, in turn, containers for [TableViewRow](Titanium.UI.TableViewRow) objects.

    Use the <Titanium.UI.createTableView> method or **`<TableView>`** Alloy element to create a `TableView`.

    Also see the [TableViews guide](https://docs.appcelerator.com/platform/latest/#!/guide/TableViews).

    #### Creating Tables

    There are few approaches to creating and using `TableView` object.

    The simplest approach is to pass dictionaries of `TableViewRow` properties, such as
    [backgroundColor](Titanium.UI.TableViewRow.backgroundColor),
    [color](Titanium.UI.TableViewRow.color), and [title](Titanium.UI.TableViewRow.title), to the
    [createTableView](Titanium.UI.createTableView) method, which causes the rows to be implictly
    created, added to a single [TableViewSection](Titanium.UI.TableViewSection), and then added to
    the `TableView`. Refer to the "Simple Table View with Basic Rows" example.

    For more control over the layout of each row, however, [TableViewRow](Titanium.UI.TableViewRow)
    objects can be created explicitly using the <Titanium.UI.createTableViewRow> method. Child views,
    such as [labels](Titanium.UI.Label), [images](Titanium.UI.ImageView), and
    [buttons](Titanium.UI.Button), may be added to each row. When one or more
    [rows](Titanium.UI.TableViewRow) are added to the table view,
    a single [TableViewSection](Titanium.UI.TableViewSection) is automatically created to hold the
    rows. See the "Table View with Composite Layout" example.

    Lastly, sets of rows may be explicitly created and added to a their own
    [TableViewSection](Titanium.UI.TableViewSection) objects, which are then added to a `TableView`,
    to enable the rows to be organized. Headers and footers titles or views must be configured
    in order for the sections to be visible.

    #### Tables and Scroll Views

    As a table view inherently scrolls, it creates a very poor user experience when one contains
    other scrolling views, such as a [ScrollableView](Titanium.UI.ScrollableView) or
    [TextArea](Titanium.UI.TextArea). Thus, this layout is strongly discouraged.

    #### TextFields in Tables with SOFT_INPUT_ADJUST_PAN (Android)

    When a [TextField](Titanium.UI.TextField) is placed in a row near the bottom of a `TableView`,
    in a window that is configured with
    [SOFT_INPUT_ADJUST_PAN](Titanium.UI.Android.SOFT_INPUT_ADJUST_PAN), it is expected for the
    text field to automatically move to a visible position after it is focused and the software
    keyboard displayed. However, due to a known problem caused by native Android's ListView behavior,
    the keyboard is likely to completely obscure the text field.

    To mitigate this, a `ScrollView` may be used instead of a table view, as demonstrated in the
    [ScrollView](Titanium.UI.ScrollView), "Scroll View as a Table View", example.

    #### Known Issues

    There are known issues with the `sections` property and associated methods added in
    Release 3.0:

    *   On iOS, the first two arguments to the `updateSection` method are reversed.
        ([TIMOB-12625](https://jira.appcelerator.org/browse/TIMOB-12625)). This issue has been
        addressed in Release 3.3.0 of the Titanium SDK

    #### Row Editing and Moving Modes

    Table views have an `editing` and a `moving` mode that may be activated to using their
    respective [editing](Titanium.UI.TableView.editing) and [moving](Titanium.UI.TableView.moving)
    properties. These allow rows to be deleted or re-ordered by the user, depending on each row's
    [editable](Titanium.UI.TableViewRow.editable) and [moveable](Titanium.UI.TableViewRow.moveable)
    property that are either explicitly set or inherited from the table.

    There are two UI controls available for deleting table view rows, depending on the combination
    of editing and moving modes enabled:

    * "red icon delete" - a circular red icon is displayed on the left-hand side of a row, which
    reveals a delete button on the right-hand side of that row when clicked.
    * "swipe delete" - without either of the table editing or moving modes enabled, a left or right
    swipe gesture on a row reveals a delete button on the right-hand side of the row.

    Note that because the operating system handles the functionality of the swipe delete, the OS will
    capture swipe events and not bubble the event to Titanium listeners. As such, if you rely on
    swipe events, you must not set editing to true on such rows, and simulate the functionality you
    need.

    When `editable` and `moveable` properties are set on the table view, they are known as `inherited`,
    whereas when set on a row, they are known as `explicit`. As their resulting behavior may not
    follow their literal meaning, depending on the combination of `editing` and `moving` modes that
    are enabled, a detailed description of the behavior follows.

    With `editing:false` and `moving:true`:

    * For red icon delete and swipe delete, inherited and explicit `editable` properties may be set.
    * Inherited `moveable` property is always `true`. Explicit `moveable` property may be set.

    With `editing:true` and `moving:false`:

    * For red icon delete and swipe delete, inherited `editable` property is always `true`. Explicit
    `editable` property may be set.
    * Inherited and explicit `moveable` properties may be set.

    With `editing:false` and `moving: false`:

    * For red icon delete, inherited and explicit `editable` properties always `false`. For
    swipe delete, inherited and explicit `editable` properties may be set.
    * Inherited `moveable` property is always `false`.

    With `editing:true` and `moving:true`:

    * For red icon delete and swipe delete, inherited and explicit `editable` properties may be set.
    * Inherited `moveable` property is always `true`. Explicit `moveable` property may be set.
extends: Titanium.UI.View
since: "0.8"
excludes:
    events: [focus]
    properties: [backgroundSelectedColor, backgroundSelectedImage, enabled, children]
    methods: [add, remove, removeAllChildren, replaceAt]

events:
  - name: click
    summary: Fired when a table row is clicked by the user.
    properties:
      - name: detail
        summary: |
            Indicates whether the detail button was clicked. Only `true` if `row.hasDetail` is
            `true` and the detail button was clicked.
        type: Boolean

      - name: index
        summary: Row index.
        type: Number

      - name: row
        summary: Table view row object.
        type: Titanium.UI.TableViewRow

      - name: rowData
        summary: |
            Properties of the row.

            When the row is created implicitly using a JavaScript dictionary object,
            use this property rather than `row` to access any custom row properties.

            Here's an example of creating a row implicitly, which is not the recommended way.

            ``` js
            var data = [{title:'Row 1', hasChild:true, color:'red', selectedColor:'#fff', special:'special 1'},];
            var table = Ti.UI.createTableView({data: data});
            ```
        type: Dictionary<Titanium.UI.TableViewRow>

      - name: searchMode
        summary: Indicates whether the table is in search mode.
        type: Boolean

      - name: section
        summary: Table view section object, if the clicked row is contained in a section.
        type: Titanium.UI.TableViewSection

      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number
        platforms: [iphone, ipad, macos]

  - name: rowsselected
    summary: |
        Fired when user stops two-pan gesture interaction for selecting multiple rows. 
        It is used in conjunction with <Titanium.UI.TableView.allowsMultipleSelectionInteraction>.
    platforms: [iphone, ipad, macos]
    since: 8.2.0
    properties:
      - name: selectedRows
        summary: List of rows selected by user.
        type: Array<SelectedRowObject>

      - name: startingRow
        summary: First row selected when user started interaction.
        type: SelectedRowObject

  - name: delete
    summary: Fired when a table row is deleted by the user.
    platforms: [android, iphone, ipad, macos]
    since: {android: "10.0.0"}
    properties:
      - name: detail
        summary: Indicates whether the delete button was clicked. Always `false` for this event.
        type: Boolean

      - name: index
        summary: Row index.
        type: Number

      - name: row
        summary: Table view row object.
        type: Titanium.UI.TableViewRow

      - name: rowData
        summary: |
            Properties of the row. Use this property rather than `row` to access any custom row
            properties.
        type: Dictionary<Titanium.UI.TableViewRow>

      - name: searchMode
        summary: Indicates whether the table is in search mode. Always `false` for this event.
        type: Boolean

      - name: section
        summary: Table view section object, if the deleted row is contained in a section.
        type: Titanium.UI.TableViewSection

      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: doubletap
    summary: Fired when the device detects a double tap against this view.
    properties:

      - name: index
        summary: Row index.
        type: Number

      - name: row
        summary: Table view row object.
        type: Titanium.UI.TableViewRow

      - name: rowData
        summary: |
            Properties of the row.

            When the row is created implicitly using a JavaScript dictionary object,
            use this property rather than `row` to access any custom row properties.

            Here's an example of creating a row implicitly, which is not the recommended way.

            ``` js
            var data = [{title:'Row 1', hasChild:true, color:'red', selectedColor:'#fff', special:'special 1'},];
            var table = Ti.UI.createTableView({data: data});
            ```
        type: Dictionary<Titanium.UI.TableViewRow>

      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number


  - name: indexclick
    summary: Fired when the index bar is clicked by the user.
    description: |
        If the tabe view contains the [index](Titanium.UI.TableView.index) array of indices the index bar will appear on the side.
        This event will fire when this bar is clicked
    properties:
      - name: title
        summary: The title of the index clicked.
        type: String

      - name: index
        summary: The index number clicked.
        type: Number
    platforms: [iphone, ipad, macos]
    since: 3.4.0

  - name: longpress
    summary: Fired when the device detects a long press.
    description: |
        A long press is generated by touching and holding on the touchscreen. Unlike a `longclick`,
        it does not respond to the trackball button.

        The event occurs before the finger is lifted.

        A `longpress` and a `longclick` can occur together.

        In contrast to a `longclick`, this event returns the `x` and `y` coordinates of the touch.
    properties:
      - name: index
        summary: Row index.
        type: Number

      - name: row
        summary: Table view row object.
        type: Titanium.UI.TableViewRow

      - name: rowData
        summary: |
            Properties of the row.

            When the row is created implicitly using a JavaScript dictionary object,
            use this property rather than `row` to access any custom row properties.

            Here's an example of creating a row implicitly, which is not the recommended way.

            ``` js
            var data = [{title:'Row 1', hasChild:true, color:'red', selectedColor:'#fff', special:'special 1'},];
            var table = Ti.UI.createTableView({data: data});
            ```
        type: Dictionary<Titanium.UI.TableViewRow>
      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number


  - name: move
    summary: Fired when a table row is moved by the user.
    platforms: [android, iphone, ipad, macos]
    since: {android: "9.3.0", iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0"}
    properties:
      - name: detail
        summary: Boolean to indicate if the right area was clicked. Always `false` for this event.
        type: Boolean

      - name: index
        summary: Row index.
        type: Number

      - name: searchMode
        summary: Boolean to indicate if the table is in search mode. Always `false` for this event.
        type: Boolean

      - name: section
        summary: Table view section object, if the deleted row is contained in a section.
        type: Titanium.UI.TableViewSection

      - name: row
        summary: Table view row object.
        type: Titanium.UI.TableViewRow

      - name: rowData
        summary: |
            Properties of the row. Use this property rather than `row` to access any custom row
            properties.
        type: Dictionary<Titanium.UI.TableViewRow>

      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: scroll
    summary: Fired when the table view is scrolled.
    properties:
      - name: contentOffset
        summary: Dictionary with `x` and `y` properties containing the content offset.
        type: Point
        platforms: [iphone, ipad, macos]

      - name: contentSize
        summary: |
            Dictionary with `width` and `height` properties containing the size of the content
            (regardless of the display size in the case of scrolling).
        type: Size
        platforms: [iphone, ipad, macos]

      - name: firstVisibleItem
        summary: Row index of the topmost visible row in the view.
        type: Number
        platforms: [android]

      - name: size
        summary: |
            Dictionary with `width` and `height` properties containing the size of the visible
            table view
        type: Size

      - name: totalItemCount
        summary: Total number of rows in the view.
        type: Number
        platforms: [android]

      - name: visibleItemCount
        summary: Number of rows currently visible in the view.
        type: Number
        platforms: [android]

  - name: scrollend
    summary: Fired when the table view stops scrolling.
    properties:
      - name: contentSize
        summary: |
            Dictionary with `width` and `height` properties containing the size of the content
            (regardless of the display size in the case of scrolling).
        type: Size
        platforms: [iphone, ipad, macos]

      - name: contentOffset
        summary: Dictionary with `x` and `y` properties containing the content offset.
        type: Point
        platforms: [iphone, ipad, macos]

      - name: size
        summary: |
            Dictionary with `width` and `height` properties containing the size of the visible
            table view.
        type: Size

      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number
    since: '3.0.0'

  - name: singletap
    summary: Fired when the device detects a single tap against the view.
    properties:
      - name: index
        summary: Row index.
        type: Number

      - name: row
        summary: Table view row object.
        type: Titanium.UI.TableViewRow

      - name: rowData
        summary: |
            Properties of the row.

            When the row is created implicitly using a JavaScript dictionary object,
            use this property rather than `row` to access any custom row properties.

            Here's an example of creating a row implicitly, which is not the recommended way.

                var data = [{title:'Row 1', hasChild:true, color:'red', selectedColor:'#fff', special:'special 1'},];
                var table = Ti.UI.createTableView({data: data});
        type: Dictionary<Titanium.UI.TableViewRow>

      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: swipe
    summary: Fired when the device detects a swipe gesture (left or right) against the view.
    since: { android: "2.1.0", iphone: "2.1.0", ipad: "2.1.0" }
    properties:
      - name: direction
        summary: Direction of the swipe, either `left` or `right`.
        type: String

      - name: index
        summary: Row index.
        type: Number

      - name: row
        summary: Table view row object.
        type: Titanium.UI.TableViewRow

      - name: rowData
        summary: |
            Properties of the row.

            When the row is created implicitly using a JavaScript dictionary object,
            use this property rather than `row` to access any custom row properties.

            Here's an example of creating a row implicitly, which is not the recommended way.

            ``` js
            var data = [{title:'Row 1', hasChild:true, color:'red', selectedColor:'#fff', special:'special 1'},];
            var table = Ti.UI.createTableView({data: data});
            ```
        type: Dictionary<Titanium.UI.TableViewRow>

      - name: x
        summary: X coordinate of the event's endpoint from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event's endpoint from the `source` view's coordinate system.
        type: Number

  - name: touchcancel
    summary: Fired when a touch gesture is interrupted by the device.
    description: |
        Generated in various circumstances, including an incoming call to allow the UI to clean
        up state.

        On Android and iOS, be aware that a row or table touch event and a table
        [scroll](Titanium.UI.TableView.scroll) event cannot occur concurrently. If a table begins
        to scroll during a touch event, the appropriate row or table `touchcancel` event fire
        before the `scroll` event begins.
    platforms: [iphone, ipad, macos]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: force
        summary: |
            The current force value of the touch event.
            Note: This property only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number

      - name: maximumPossibleForce
        summary: |
            Maximum possible value of the force property.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number

      - name: altitudeAngle
        summary: |
            A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
            being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
            Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
        type: Number

      - name: timestamp
        summary: |
           The time (in seconds) when the touch was used in correlation with the system start up.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number

  - name: touchend
    summary: Fired when a touch gesture is complete.
    description: |
        On Android and iOS, be aware that a row or table touch event and a table
        [scroll](Titanium.UI.TableView.scroll) event cannot occur concurrently. If a table begins
        to scroll during a touch event, the appropriate row or table `touchcancel` event fire
        before the `scroll` event begins.
    properties:
      - name: index
        summary: Row index.
        type: Number

      - name: row
        summary: Table view row object.
        type: Titanium.UI.TableViewRow

      - name: rowData
        summary: |
            Properties of the row.

            When the row is created implicitly using a JavaScript dictionary object,
            use this property rather than `row` to access any custom row properties.

            Here's an example of creating a row implicitly, which is not the recommended way.

            ``` js
            var data = [{title:'Row 1', hasChild:true, color:'red', selectedColor:'#fff', special:'special 1'},];
            var table = Ti.UI.createTableView({data: data});
            ```
        type: Dictionary<Titanium.UI.TableViewRow>

      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: force
        summary: |
            The current force value of the touch event.
            Note: This property only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number

      - name: maximumPossibleForce
        summary: |
            Maximum possible value of the force property.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number

      - name: altitudeAngle
        summary: |
            A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
            being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
            Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
        type: Number

      - name: timestamp
        summary: |
           The time (in seconds) when the touch was used in correlation with the system start up.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number

  - name: touchstart
    summary: Fired as soon as the device detects a touch gesture against this view.
    description: |
        On Android and iOS, be aware that a row or table touch event and a table
        [scroll](Titanium.UI.TableView.scroll) event cannot occur concurrently. If a table begins
        to scroll during a touch event, the appropriate row or table `touchcancel` event fire
        before the `scroll` event begins.
    platforms: [iphone, ipad, android, macos]
    properties:
      - name: index
        summary: Row index.
        type: Number

      - name: row
        summary: Table view row object.
        type: Titanium.UI.TableViewRow

      - name: rowData
        summary: |
            Properties of the row.

            When the row is created implicitly using a JavaScript dictionary object,
            use this property rather than `row` to access any custom row properties.

            Here's an example of creating a row implicitly, which is not the recommended way.

            ``` js
            var data = [{title:'Row 1', hasChild:true, color:'red', selectedColor:'#fff', special:'special 1'},];
            var table = Ti.UI.createTableView({data: data});
            ```
        type: Dictionary<Titanium.UI.TableViewRow>

      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: force
        summary: |
            The current force value of the touch event.
            Note: This property only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number

      - name: maximumPossibleForce
        summary: |
            Maximum possible value of the force property.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number

      - name: altitudeAngle
        summary: |
            A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
            being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
            Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
        type: Number

      - name: timestamp
        summary: |
           The time (in seconds) when the touch was used in correlation with the system start up.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number

  - name: twofingertap
    summary: Fired when the device detects a two-finger tap against the view.
    platforms: [iphone, ipad, macos]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: dragstart
    summary: Fired when the scrollable region starts being dragged.
    description: |
        A dragging gesture is when a touch remains in contact with the display to physically drag
        the view, as opposed to it being the result of scrolling momentum.
    platforms: [iphone, ipad, macos]
    since: '3.0.0'

  - name: dragend
    summary: Fired when the scrollable region stops being dragged.
    description: |
        A dragging gesture is when a touch remains in contact with the display to physically drag
        the view, as opposed to it being the result of scrolling momentum.
    platforms: [iphone, ipad, macos]
    properties:
      - name: decelerate
        summary: |
            Indicates whether scrolling will continue but decelerate, now that the drag gesture has
            been released by the touch. If `false`, scrolling will stop immediately.
        type: Boolean
    since: '3.0.0'

methods:
  - name: appendRow
    summary: Appends a single row or an array of rows to the end of the table.
    description: |
        Each row can be passed as a [TableViewRow](Titanium.UI.TableViewRow) object, or as
        dictionary specifying the properties for a table row, in which case this `TableView` will
        create `TableViewRow` objects as needed.

        On iOS, the row(s) can be inserted with animation by specifying a `properties` parameter.
    parameters:
      - name: row
        summary: Row or rows to add to the table.
        type: [Titanium.UI.TableViewRow, Dictionary<Titanium.UI.TableViewRow>, Array<Titanium.UI.TableViewRow>, Array<Dictionary<Titanium.UI.TableViewRow>>]

      - name: animation
        summary: Animation properties. (iOS only.)
        type: TableViewAnimationProperties
        optional: true

  - name: appendSection
    summary: Appends a single section or an array of sections to the end of the table.
    description: |
        Each section can be passed as a [TableViewSection](Titanium.UI.TableViewSection) object, or as
        dictionary specifying the properties for a table section, in which case this `TableView` will
        create `TableViewSection` objects as needed.

        On iOS, the section(s) can be inserted with animation by specifying a `properties` parameter.

        Due to a known issue, TIMOB-12616, this method should not be used for adding sections on iOS.
    parameters:
      - name: section
        summary: Section or section to add to the table.
        type: [Titanium.UI.TableViewSection, Dictionary<Titanium.UI.TableViewSection>, Array<Titanium.UI.TableViewSection>, Array<Dictionary<Titanium.UI.TableViewSection>>]

      - name: animation
        summary: Animation properties. (iOS only.)
        type: TableViewAnimationProperties
        optional: true
    since: 3.0.0
    platforms: [android, iphone, ipad, macos]

  - name: deleteRow
    summary: Deletes an existing row.
    description: |
        On iOS, the row can be deleted with animation by specifying a `properties` parameter.
        Starting in SDK 3.1.0, the row can be specified using <Titanium.UI.TableViewRow> on Android and iOS.
    parameters:
      - name: row
        summary: Index of the row to delete, or the row object to delete.
        type: [Number, Titanium.UI.TableViewRow]

      - name: animation
        summary: Animation properties. (iOS only.)
        type: TableViewAnimationProperties
        optional: true

  - name: deleteSection
    summary: Deletes an existing section.
    description: |
        On iOS, the section can be deleted with animation by specifying a `properties` parameter.
    parameters:
      - name: section
        summary: Index of the section to delete.
        type: Number

      - name: animation
        summary: Animation properties. (iOS only.)
        type: TableViewAnimationProperties
        optional: true
    since: 3.0.0
    platforms: [android, iphone, ipad, macos]

  - name: deselectRow
    summary: Programmatically deselects a row.
    parameters:
      - name: row
        summary: Row index to deselect.
        type: Number
    platforms: [iphone,ipad, macos]

  - name: insertRowAfter
    summary: Inserts a row after another row.
    description: |
        Each row can be passed as a [TableViewRow](Titanium.UI.TableViewRow) object, or as
        dictionary specifying the properties for a table row, in which case this `TableView` will
        create `TableViewRow` objects as needed.

        On iOS, the row(s) may be inserted with animation by setting the `animation` parameter.
    parameters:
      - name: index
        summary: Index of the row to insert after.
        type: Number

      - name: row
        summary: Row to insert.
        type: [Titanium.UI.TableViewRow, Dictionary<Titanium.UI.TableViewRow>]

      - name: animation
        summary: Animation properties. (iOS only.)
        type: TableViewAnimationProperties
        optional: true


  - name: insertSectionAfter
    summary: Inserts a section after another section.
    description: |
        Each section can be passed as a [TableViewSection](Titanium.UI.TableViewSection) object, or as
        dictionary specifying the properties for a table section, in which case this `TableView` will
        create `TableViewSection` objects as needed.

        On iOS, the section(s) may be inserted with animation by setting the `animation` parameter.

        Due to a known issue, TIMOB-12616, this method should not be used for adding sections on iOS.
    parameters:
      - name: index
        summary: Index of the section to insert after.
        type: Number

      - name: section
        summary: section to insert.
        type: [Titanium.UI.TableViewSection, Dictionary<Titanium.UI.TableViewSection>]

      - name: animation
        summary: Animation properties. (iOS only.)
        type: TableViewAnimationProperties
        optional: true
    since: 3.0.0
    platforms: [android, iphone, ipad, macos]

  - name: insertRowBefore
    summary: Inserts a row before another row.
    description: |
        Each row can be passed as a [TableViewRow](Titanium.UI.TableViewRow) object, or as
        dictionary specifying the properties for a table row, in which case this `TableView` will
        create `TableViewRow` objects as needed.

        On iOS, the row(s) may be inserted with animation by setting the `animation` parameter.
    parameters:
      - name: index
        summary: Index of the row to insert before.
        type: Number

      - name: row
        summary: Row to insert.
        type: [Titanium.UI.TableViewRow, Dictionary<Titanium.UI.TableViewRow>]

      - name: animation
        summary: Animation properties. (iOS only.)
        type: TableViewAnimationProperties
        optional: true

  - name: insertSectionBefore
    summary: Inserts a section before another section.
    description: |
        Each section can be passed as a [TableViewSection](Titanium.UI.TableViewSection) object, or as
        dictionary specifying the properties for a table section, in which case this `TableViewSection` will
        create `TableViewSection` objects as needed.

        On iOS, the section(s) may be inserted with animation by setting the `animation` parameter.

        Due to a known issue, TIMOB-12616, this method should not be used for adding sections on iOS.
    parameters:
      - name: index
        summary: Index of the section to insert before.
        type: Number

      - name: section
        summary: section to insert.
        type: [Titanium.UI.TableViewSection, Dictionary<Titanium.UI.TableViewSection>]

      - name: animation
        summary: Animation properties. (iOS only.)
        type: TableViewAnimationProperties
        optional: true
    since: 3.0.0
    platforms: [android, iphone, ipad, macos]

  - name: scrollToIndex
    summary: Scrolls the table view to ensure that the specified row is on screen.
    description: |
        On iOS, specify a <TableViewAnimationProperties> object to control the position that
        the selected row is scrolled to, and whether scrolling is animated.
    parameters:
      - name: index
        summary: Row index to scroll to.
        type: Number

      - name: animation
        summary: Animation properties.
        type: TableViewAnimationProperties
        optional: true

  - name: scrollToTop
    summary: |
        Scrolls the table to a specific top position where 0 is the topmost y position in the
        table view.
    description: |
        The behavior of this method is platform-specific.

        On Android, the `top` value is interpreted as a row index that should be scrolled
        to the top of the screen. The table will not scroll the last row of data higher than
        the bottom of the screen. If there is less than one screenful of data below the
        specified row, the table doesn't scroll the specified row all the way to the top.
        If the table has less than one screenful of data total, it does not scroll at all.

        On iOS, the `top` value is interpreted as a pixel offset between the top of the top
        row of data and the top of the table view. So a `top` value of 0 scrolls the list to
        the top. A positive value scrolls it down, and a negative value scrolls the list up
        above the first item.

        On iOS, specify a <TableViewAnimationProperties> object with `animated` set to `false` to
        disable the scrolling animation.
    parameters:
      - name: top
        summary: Y position for the top of the table view.
        type: Number

      - name: animation
        summary: Animation properties.
        type: TableViewAnimationProperties
        optional: true


  - name: setContentInsets
    summary: Sets this tableview's content insets.
    description: |
        A table view is essentially a scroll view that contains a set of static row views that
        represents the content. Thus, the `setContentInsets` method facilitates a margin, or inset,
        distance between the content and the container scroll view.

        Typically used with the [headerPullView](Titanium.UI.TableView.headerPullView) property.
    parameters:
      - name: edgeInsets
        summary: |
          Sets the distance that the content view is inset from the enclosing scroll view of the table.
          For example:

          ``` js
          setContentInset({ top: 50, bottom: 10, right: 10, left: 10 }, { animated: true });
          ```
        type: Padding

      - name: options
        summary: |
            Determines whether, and how, the content inset change should be animated.

            Note that the default here is equivalent to passing in `{ animated: false }`
        type: AnimatedWithDurationOptions
        optional: true
    platforms: [iphone, ipad, macos]
    since: "2.1.0"

  - name: setContentOffset
    summary: Sets the value of the content offset of the table view without animation by default.
    platforms: [iphone, ipad, macos]
    parameters:
      - name: contentOffset
        summary: |
            Dictionary with the properties `x`, `y`.
            The `x` and `y` coordinates reposition the top-left point of the scrollable region of the table view.
        type: Point
      - name: options
        summary: |
            Pass in `{ animated: true }` to animate the transition.

            Note that the default here is equivalent to passing in `{ animated: false }`
        type: AnimatedOptions
        optional: true
        default: "{ animated: false }"
    since: 3.4.0

  - name: selectRow
    summary: |
        Programmatically selects a row. In Android, it sets the currently selected item. If in touch mode,
        the item will not be selected but it will still be positioned appropriately. If the specified
        selection position is less than 0, then the item at position 0 will be selected.
    parameters:
      - name: row
        summary: Row index to select.
        type: Number
    platforms: [iphone, ipad, android, macos]
    since: {iphone: "1.8.2", ipad: "1.8.2", android: "3.0.0"}

  - name: setData
    summary: Sets the data in the table.
    description: |
        Each row can be passed as a [TableViewRow](Titanium.UI.TableViewRow) object, or as
        dictionary specifying the properties for a table row, in which case this `TableView` will
        create `TableViewRow` objects as needed.

        `setData` can also be used to add [TableViewSection](Titanium.UI.TableViewSection)s to a
        table view.
    parameters:
      - name: data
        summary: Rows or sections to add to this table.
        type: [ Array<Titanium.UI.TableViewRow>, Array<Dictionary<Titanium.UI.TableViewRow>>, Array<Titanium.UI.TableViewSection> ]

      - name: animation
        summary: Animation properties. (iOS only.)
        type: TableViewAnimationProperties
        optional: true

  - name: setHeaderPullView
    summary: Sets the value of the [Titanium.UI.TableView.headerPullView] property.
    parameters:
      - name: view
        summary: View to display.
        type: Titanium.UI.View
    platforms: [iphone, ipad, macos]
    since: "2.1.0"
    deprecated:
      since: "10.0.0"
      removed: "10.0.0"
      notes: Use the <Titanium.UI.TableView.headerPullView> property instead.


  - name: updateRow
    summary: Updates an existing row, optionally with animation.
    parameters:
      - name: index
        summary: Index of the row to update.
        type: Number

      - name: row
        summary: Row data to update.
        type: Titanium.UI.TableViewRow

      - name: animation
        summary: Animation properties. (iOS only.)
        type: TableViewAnimationProperties

  - name: updateSection
    summary: Updates an existing section, optionally with animation.
    description: |
        Known issues:

        *   On iOS, event listeners do not fire correctly after table view sections are
            updated using the `updateSection` methods.
            ([TIMOB-12616](https://jira.appcelerator.org/browse/TIMOB-12616)
    parameters:
      - name: index
        summary: Index of the section to update.
        type: Number

      - name: section
        summary: section data to update.
        type: Titanium.UI.TableViewSection

      - name: animation
        summary: Animation properties. (iOS only.)
        type: TableViewAnimationProperties
    since: 3.0.0
    platforms: [android, iphone, ipad, macos]

properties:
  - name: allowsSelection
    summary: Determines whether this table's rows can be selected.
    description: Set to `false` to prevent rows from being selected.
    type: Boolean
    default: true
    platforms: [iphone, ipad, macos]

  - name: allowsSelectionDuringEditing
    summary: Determines whether this table's rows can be selected while editing the table.
    description: Set to `true` to allow rows to be selected.
    type: Boolean
    default: false
    platforms: [iphone, ipad, macos]

  - name: backgroundColor
    summary: Background color of the view, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]
    default: transparent on non-iOS platforms, white on the iOS platform

  - name: data
    summary: Rows of the table view.
    type: [Array<Titanium.UI.TableViewRow>, Array<Titanium.UI.TableViewSection>]

  - name: editable
    summary: |
        Determines the rows' default editable behavior, which allows them to be deleted by the user
        when the table is in `editing` or `moving` mode.
    description: |
        This property determines the default behavior of child rows, but may be overridden by
        a row's [editable](Titanium.UI.TableViewRow.editable) property.

        See the <Titanium.UI.TableView> description section for a full explanation of the TableView's
        `editing` and `moving` modes.
    type: Boolean
    default: Depends on `editing` and `moving` mode
    platforms: [android, iphone, ipad, macos]
    since: {android: "9.3.0", iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0"}

  - name: editing
    summary: |
        Determines whether row editing mode is active.
    description: |
        The `editing` mode allows rows to be deleted or re-ordered, depending on their
        [editable](Titanium.UI.TableViewRow.editable) and [moveable](Titanium.UI.TableViewRow.moveable)
        settings.

        See the <Titanium.UI.TableView> description section for a full explanation of the TableView's
        `editing` and `moving` modes.
    type: Boolean
    default: false
    platforms: [android, iphone, ipad, macos]
    since: {android: "9.3.0", iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0"}

  - name: filterAttribute
    summary: Filter attribute to be used when searching.
    description: |
        On the Android platform, this property can only be set to Titanium-defined properties of the
        TableViewRow object, such as `title`.  To search text stored in a different attribute, set the `title`
        property of the TableViewRow object to the property to be searched. For example:

        ``` js
        var label = Ti.UI.createLabel({text: 'Foobar'}),
        var row = Ti.UI.createTableViewRow(title: label.text);
        row.add(label);
        ```

        On the iOS platform, this property can be set to any property on the TableViewRow object,
        including arbitrary properties set on the object, not only Titanium-defined properties.

        Note that the filter is not anchored to the beginning of the string. So typing "ha"
        in the text box will include rows titled 'Harold' and 'Harvard', but also 'Sharon'
        and 'Jonathan'.

    type: String
    platforms: [android, iphone, ipad, macos]

  - name: filterAnchored
    summary: Determines whether the search is limited to the start of the string
    description: Set to `true` to enable case anchored search.
    type: Boolean
    default: false
    platforms: [ android, iphone, ipad, macos]
    since: "3.3.0"

  - name: filterCaseInsensitive
    summary: Determines whether the search is case insensitive.
    description: Set to `false` to enable case sensitive search.
    type: Boolean
    default: true
    platforms: [android, iphone, ipad, macos]

  - name: footerDividersEnabled
    summary: When set to false, the ListView will not draw the divider before the footer view.
    type: Boolean
    availability: creation
    default: undefined but behaves as false
    platforms: [android]
    since: "3.3.0"

  - name: footerTitle
    summary: Table view footer title.
    type: String

  - name: maxClassname
    summary: Max number of row class names.
    description: |
        See <Titanium.UI.TableViewRow.className> for more details. This property will default to
        32 when it is set to a number lesser than that.
    availability: creation
    type: Number
    default: 32
    platforms: [android]
    since: "5.2.0"

  - name: headerPullView
    summary: |
        View positioned above the first row that is only revealed when the user drags the table
        contents down.
    description: |
        A `headerPullView` is a UI control that is often used to provide a convenient way for the
        user to refresh a table's data.  Typically used with the
        [setContentInsets](Titanium.UI.TableView.setContentInsets) method.

        To specify the wrapper color see <Titanium.UI.View.pullBackgroundColor>.

        For an example, see the "Pull to refresh" section in the
        [TableViews guide](https://docs.appcelerator.com/platform/latest/#!/guide/TableViews).

        Alloy applications can use a `<HeaderPullView>` element inside a `<TableView>` element.

        ``` xml
        <Alloy>
            <TableView>
                <HeaderPullView platform="ios">
                    <View class="pull">
                        <Label color="#F2F4F4" bottom="25dp">Header pull view</Label>
                    </View>
                </HeaderPullView>
            </TableView>
        </Alloy>
        ```
    type: Titanium.UI.View
    platforms: [iphone, ipad, macos]
    since: "2.1.0"

  - name: refreshControl
    summary: View positioned above the first row that is only revealed when the user drags the list view contents down.
    description: |
        An alternate to the headerPullView property. See <Titanium.UI.RefreshControl> for usage and examples.
    type: Titanium.UI.RefreshControl
    platforms: [android, iphone, ipad, macos]
    since: { android: "6.2.0", iphone: "3.2.0", ipad: "3.2.0" }

  - name: hideSearchOnSelection
    summary: Determines whether the search field should hide on completion.
    description: |
        Set to `false` to prevent the search field from being hidden when an item in the search
        results is clicked.

        Many standard applications (such as Contacts) have a behavior equivalent to `false` for this
        value, but the default is `true` for legacy reasons.

        The Android platform behaves as though this value were `false`.
    type: Boolean
    default: true
    platforms: [iphone, ipad, macos]

  - name: allowsMultipleSelectionDuringEditing
    summary: Determines whether multiple items of this table view can be selected at the same time while editing the table.
    type: Boolean
    default: false
    since: 8.2.0
    platforms: [iphone, ipad, macos]

  - name: allowsMultipleSelectionInteraction
    summary: Allows a two-finger pan gesture to automatically transition the table view into editing mode and start selecting rows.
    description: |
        Setting this property to true allows the user to start selecting multiple contiguous rows via a two-finger pan gesture. 
        If the table view is already in editing mode, the user can also select multiple rows via a one-finger pan gesture along 
        the edge of the table that contains editing controls (checkboxes). In order to support this behavior, 
        you must also set <Titanium.UI.TableView.allowsMultipleSelectionDuringEditing> to true.
        Once user interaction stops the <Titanium.UI.TableView.rowsselected> event is fired.
    type: Boolean
    default: false
    since: 8.2.0
    platforms: [iphone, ipad, macos]

  - name: footerView
    summary: Table view footer as a view that will be rendered instead of a label.
    description: |
        In Alloy you can use a `<FooterView>` element nested in a `<TableView>` element:

        ``` xml
        <Alloy>
            <TableView>
                <FooterView>
                    <View backgroundColor="#a00" height="50dp"/>
                </FooterView>
                <TableViewRow><Label>Row 1</Label></TableViewRow>
                <TableViewRow><Label>Row 2</Label></TableViewRow>
            </TableView>
        </Alloy>
        ```
    type: Titanium.UI.View

  - name: headerDividersEnabled
    summary: When set to false, the ListView will not draw the divider after the header view.
    type: Boolean
    availability: creation
    default: undefined but behaves as false
    platforms: [android]
    since: "3.3.0"

  - name: headerTitle
    summary: Table view header title.
    type: String

  - name: headerView
    summary: Table view header as a view that will be rendered instead of a label.
    description: |
        In Alloy you can use a `<HeaderView>` element nested in a `<TableView>` element:

        ``` js
        <Alloy>
            <TableView>
                <HeaderView>
                    <View backgroundColor="#a00" height="50dp"/>
                </HeaderView>
                <TableViewRow><Label>Row 1</Label></TableViewRow>
                <TableViewRow><Label>Row 2</Label></TableViewRow>
            </TableView>
        </Alloy>
        ```
    type: Titanium.UI.View

  - name: index
    summary: Array of objects (with `title` and `index` properties) to control the table view index.
    description: |
        If an index array is specified, an index bar is displayed on the right-hand side of the
        table view. Clicking on a title in the index bar scrolls the table view to the row
        index associated with that title. If the index is -1 the table view will scroll to the top.

    type: Array<TableViewIndexEntry>
    platforms: [iphone, ipad, macos]

  - name: maxRowHeight
    summary: Maximum row height for table view rows.
    type: Number

  - name: minRowHeight
    summary: Minimum row height for table view rows.
    type: Number

  - name: moveable
    summary: |
        Determines the rows' default moveable behavior, which allows them to be re-ordered by the
        user when the table is in `editing` or `moving` mode.
    description: |
        This property determines the default behavior of child rows, but may be overridden by a
        row's [moveable](Titanium.UI.TableViewRow.moveable) property.

        See the <Titanium.UI.TableView> description section for a full explanation of the TableView's
        `editing` and `moving` modes.
    type: Boolean
    default: Depends on `editing` and `moving` mode
    platforms: [android, iphone, ipad, macos]
    since: {android: "9.3.0", iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0"}

  - name: moving
    summary: |
        Determines whether row moving mode is active.
    description: |
        The `moving` mode allows rows to be deleted or re-ordered, depending on their
        [editable](Titanium.UI.TableViewRow.editable) and [moveable](Titanium.UI.TableViewRow.moveable)
        settings.

        See the <Titanium.UI.TableView> description section for a full explanation of the TableView's
        `editing` and `moving` modes.
    type: Boolean
    default: false
    platforms: [android, iphone, ipad, macos]
    since: {android: "9.3.0", iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0"}

  - name: overScrollMode
    summary: Determines the behavior when the user overscrolls the view.
    type: Number
    constants: Titanium.UI.Android.OVER_SCROLL_*
    default: Titanium.UI.Android.OVER_SCROLL_ALWAYS
    platforms: [android]
    since: "3.1.0"

  - name: rowHeight
    summary: Default row height for table view rows.
    type: Number

  - name: scrollable
    summary: If `true`, the tableview can be scrolled.
    type: Boolean
    default: true
    since: { android: 7.3.0, iphone: 0.8, ipad: 0.8 }
    platforms: [android, iphone, ipad, macos]

  - name: scrollIndicatorStyle
    summary: Style of the scrollbar.
    type: Number
    constants: Titanium.UI.iOS.ScrollIndicatorStyle.*
    default: <Titanium.UI.iOS.ScrollIndicatorStyle.DEFAULT>
    since: 2.1.0
    platforms: [iphone, ipad, macos]

  - name: scrollsToTop
    summary: Controls whether the scroll-to-top gesture is effective.
    description: |
        The scroll-to-top gesture is a tap on the status bar; The default value of this property is true.
        This gesture works when you have a single visible table view.
        If there are multiple table views, web views, text areas, and/or scroll views visible,
        you will need to disable (set to false) on the above views you DON'T want this
        behaviour on. The remaining view will then respond to scroll-to-top gesture.
    type: Boolean
    default: true
    platforms: [iphone,ipad, macos]
    since: 2.1.2

  - name: search
    summary: Search field to use for the table view.
    description: |
        In an Alloy application, you can use a `<SearchView>` or `<SearchBar>` element inside a `<TableView>` element.

        ``` xml
        <Alloy>
            <TableView>
              <!-- search, shorthand with Ti.UI.SearchBar -->
              <SearchBar platform="ios"/>
              <!-- search, shorthand with Ti.UI.Android.SearchView -->
              <SearchView ns="Ti.UI.Android" platform="android"/>
            </TableView>
        </Alloy>
        ```
    type: [Titanium.UI.SearchBar, Titanium.UI.Android.SearchView]
    platforms: [android, iphone, ipad, macos]

  - name: dimBackgroundForSearch
    summary: A Boolean indicating whether the underlying content is dimmed during a search.
    description: |
          If you do not want to show the dimmed background when clicking on the search bar,
          set this property `false` during creation.
    type: Boolean
    default: true
    since: 6.2.0
    platforms: [iphone, ipad, macos]
    availability: creation

  - name: showSearchBarInNavBar
    summary: A Boolean indicating whether search bar will be in navigation bar.
    description: |
          If you want to show the search bar in navigation bar, set this property `true` during creation. 
          Use the <Titanium.UI.Window.hidesSearchBarWhenScrolling> property to control the visibility of the 
          searchbar when scrolling.
    type: Boolean
    default: false
    since: 8.1.0
    platforms: [iphone, ipad, macos]
    osver: {ios: {min: "11.0"}}
    availability: creation
    
  - name: searchAsChild
    summary: Determines whether the [SearchBar](Titanium.UI.SearchBar) or [SearchView](Titanium.UI.Android.SearchView) appears as part of the TableView.
    description: Set to false if the search view will be displayed in the action bar.
    type: Boolean
    default: true
    since: 3.0.2
    platforms: [android]

  - name: searchHidden
    summary: Determines whether the search field is visible.
    description: Set to `true` to hide the search field.
    type: Boolean
    default: false (search field visible)
    platforms: [iphone, ipad, macos]

  - name: sectionCount
    summary: Number of sections in this table view.
    type: Number
    permission: read-only
    since: 3.0.0
    platforms: [android, iphone, ipad, macos]

  - name: sections
    summary: Sections of this table.
    description: |
        In Release 3.0, this property is read-only on Android.

        Due to a known issue, TIMOB-12616, the `sections` property should not be used
        for adding sections on iOS.
    type: Array<Titanium.UI.TableViewSection>
    since: { android: 3.1.0, iphone: 3.0.0, ipad: 3.0.0 }
    platforms: [android, iphone, ipad, macos]

  - name: separatorColor
    summary: Separator line color between rows, as a color name or hex triplet.
    description: |
        To make the line invisible, set this property to `transparent`, or the same value as the
        [backgroundColor](Titanium.UI.TableView.backgroundColor) property.

        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]
    default: platform-specific default color

  - name: separatorInsets
    summary: The insets for table view separators (applies to all cells).
    deprecated:
        since: "5.2.0"
        notes: Use [Titanium.UI.TableView.tableSeparatorInsets](Titanium.UI.TableView.tableSeparatorInsets) instead.
    description: |
        Cell separators do not extend all the way to the edge of the table view.
        This property sets the default inset for all cells in the table. Set this to a dictionary
        with two keys, `left` specifying inset from left edge and `right` specifying the inset from the right edge.

        For example:
        ``` js
        tableView1.separatorInsets = {
            left: 10,
            right: 10
        };
        ```
    type: HorizontalInsets
    since: 3.2.0
    osver: {ios: {min: "7.0"}}
    platforms: [iphone, ipad, macos]

  - name: touchFeedback
    summary: A material design visual construct that provides an instantaneous visual confirmation of touch point.
    description: |
        Touch feedback is only applied to a view's background.
    type: Boolean
    default: true
    platforms: [android]
    osver: {android: {min: "5.0"}}
    since: "10.0.0"

  - name: tableSeparatorInsets
    summary: The insets for the table view header and footer.
    description: |
        Cell separators do not extend all the way to the edge of the table view. Set this to a
        dictionary with two keys, `left` specifying inset from left edge and `right` specifying the inset from the
        right edge. If the rowSeparatorInsets is not set, the tableSeparatorInsets will also set the cell insets.

        For example:
        ``` js
        tableView1.tableSeparatorInsets = {
            left: 10,
            right: 10
        };
        ```
    type: HorizontalInsets
    since: "5.2.0"
    osver: {ios: {min: "7.0"}}
    platforms: [iphone, ipad, macos]

  - name: rowSeparatorInsets
    summary: The insets for table view cells (applies to all cells).
    description: |
        Cell separators do not extend all the way to the edge of the table view. Set this to a
        dictionary with two keys, `left` specifying inset from left edge and `right` specifying the inset from the
        right edge. This property is only available upon creation of the cells.

        For example:
        ``` js
        tableView1.rowSeparatorInsets = {
            left: 10,
            right: 10
        };
        ```
    type: HorizontalInsets
    since: "5.2.0"
    osver: {ios: {min: "7.0"}}
    platforms: [iphone, ipad, macos]

  - name: separatorStyle
    summary: Separator style constant.
    type: Number
    constants: Titanium.UI.TABLE_VIEW_SEPARATOR_STYLE_*
    platforms: [iphone, ipad, android, macos]
    since: {android: "5.2.0"}

  - name: showVerticalScrollIndicator
    summary: Determines whether this table view displays a vertical scroll indicator.
    description: Set to `false` to hide the vertical scroll indicator.
    type: Boolean
    default: true
    platforms: [iphone, ipad, macos]

  - name: style
    summary: |
        Style of the table view, specified using one of the constants from
        <Titanium.UI.iOS.TableViewStyle>.
    description: Style should always be set before setting the `data` on table view.
    type: Number
    constants: Titanium.UI.iOS.TableViewStyle.*
    platforms: [iphone, ipad, macos]

  - name: resultsBackgroundColor
    summary: The background color of the search results (iOS-only).
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
        Note: A transparent background-color is not officially supported by Apple to
        prevent that the list of results overlaps with the list view below it.
    type: [String, Titanium.UI.Color]
    default: undefined (behaves as white)
    since: 7.3.0
    platforms: [iphone, ipad, macos]
    availability: creation

  - name: resultsSeparatorColor
    summary: |
        Separator line color between rows inside search results,
        as a color name or hex triplet (iOS-only).
    description: |
        To make the line invisible, set this property to `transparent`, or the same value as the
        [backgroundColor](Titanium.UI.TableView.backgroundColor) property.
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]
    default: undefined (behaves as gray)
    since: 7.3.0
    platforms: [iphone, ipad, macos]
    availability: creation

  - name: resultsSeparatorStyle
    summary: The separator style of the search results (iOS-only).
    type: Number
    constants: Titanium.UI.TABLE_VIEW_SEPARATOR_STYLE_*
    since: 7.3.0
    platforms: [iphone, ipad, macos]
    availability: creation

  - name: resultsSeparatorInsets
    summary: |
        The insets for search results separators (applies to all cells & iOS-only).
    description: |
        Cell separators do not extend all the way to the edge of the list view.
        This property sets the default inset for all cells in the table.
        Set this to a dictionary with two keys, `left` specifying inset from left edge and `right`
        specifying the inset from the right edge.
    type: HorizontalInsets
    since: "7.3.0"
    platforms: [iphone, ipad, macos]
    availability: creation

examples:
  - title: Simple Table View
    example: |
        Create a basic table view.

        ``` js
        Ti.UI.backgroundColor = 'white';
        var win = Ti.UI.createWindow();

        var tableData = [ {title: 'Apples'}, {title: 'Bananas'}, {title: 'Carrots'}, {title: 'Potatoes'} ];

        var table = Ti.UI.createTableView({
          data: tableData
        });
        win.add(table);
        win.open();
        ```

  - title: Table View Sections
    example: |
        Create a table with three sections, each with two rows. Add two sections to the table
        before and one after it is rendered. This sample only works on Release 3.0 and later.

        ``` js
        Ti.UI.backgroundColor = 'white';
        var win = Ti.UI.createWindow();

        var sectionFruit = Ti.UI.createTableViewSection({ headerTitle: 'Fruit' });
        sectionFruit.add(Ti.UI.createTableViewRow({ title: 'Apples' }));
        sectionFruit.add(Ti.UI.createTableViewRow({ title: 'Bananas' }));

        var sectionVeg = Ti.UI.createTableViewSection({ headerTitle: 'Vegetables' });
        sectionVeg.add(Ti.UI.createTableViewRow({ title: 'Carrots' }));
        sectionVeg.add(Ti.UI.createTableViewRow({ title: 'Potatoes' }));

        var table = Ti.UI.createTableView({
          data: [sectionFruit, sectionVeg]
        });

        win.add(table);
        win.open();

        var sectionFish = Ti.UI.createTableViewSection({ headerTitle: 'Fish' });
        sectionFish.add(Ti.UI.createTableViewRow({ title: 'Cod' }));
        sectionFish.add(Ti.UI.createTableViewRow({ title: 'Haddock' }));

        // Prior to Release 3.0, you can only add and remove sections by setting the data property
        // table.data = [ sectionFish, sectionFruit, sectionVeg ];
        // Due to a known issue, TIMOB-12616, the section access methods and sections
        // property should not be used on iOS with Release 3.0.x.
        table.insertSectionBefore(0, sectionFish);
        ```

  - title: Table View with Composite Layout
    example: |
        Create a table of rows that contain a custom child-view layout.

        ``` js
        var win = Ti.UI.createWindow({
          backgroundColor: 'black',
          title: 'TableView Demo'
        });

        // generate random number, used to make each row appear distinct for this example
        function randomInt(max){
          return Math.floor(Math.random() * max) + 1;
        }

        var IMG_BASE = 'images/';
        var defaultFontSize = Ti.Platform.name === 'android' ? 16 : 14;

        var tableData = [];

        for (var i=1; i<=20; i++){
          var row = Ti.UI.createTableViewRow({
            className:'forumEvent', // used to improve table performance
            selectedBackgroundColor:'white',
            rowIndex:i, // custom property, useful for determining the row during events
            height:110
          });

          var imageAvatar = Ti.UI.createImageView({
            image: IMG_BASE + 'custom_tableview/user.png',
            left:10, top:5,
            width:50, height:50
          });
          row.add(imageAvatar);

          var labelUserName = Ti.UI.createLabel({
            color:'#576996',
            font:{fontFamily:'Arial', fontSize:defaultFontSize+6, fontWeight:'bold'},
            text:'Fred Smith ' + i,
            left:70, top: 6,
            width:200, height: 30
          });
          row.add(labelUserName);

          var labelDetails = Ti.UI.createLabel({
            color:'#222',
            font:{fontFamily:'Arial', fontSize:defaultFontSize+2, fontWeight:'normal'},
            text:'Replied to post with id ' + randomInt(1000) + '.',
            left:70, top:44,
            width:360
          });
          row.add(labelDetails);

          var imageCalendar = Ti.UI.createImageView({
            image:IMG_BASE + 'custom_tableview/eventsButton.png',
            left:70, bottom: 2,
            width:32, height: 32
          });
          row.add(imageCalendar);

          var labelDate = Ti.UI.createLabel({
            color:'#999',
            font:{fontFamily:'Arial', fontSize:defaultFontSize, fontWeight:'normal'},
            text:'on ' + randomInt(30) + ' Nov 2012',
            left:105, bottom:10,
            width:200, height:20
          });
          row.add(labelDate);

          tableData.push(row);
        }

        var tableView = Ti.UI.createTableView({
          backgroundColor:'white',
          data:tableData
        });

        win.add(tableView);
        win.open();
        ```

  - title: Alloy XML Markup
    example: |
        Previous table view sections example as an Alloy view.

        ``` xml
        <Alloy>
            <Window id="win" backgroundColor="white">
                <TableView id="table">
                    <TableViewSection id="sectionFruit" headerTitle="Fruit">
                        <TableViewRow title="Apple"/>
                        <TableViewRow title="Bananas"/>
                    </TableViewSection>
                    <TableViewSection id="sectionVeg" headerTitle="Vegetables">
                        <TableViewRow title="Carrots"/>
                        <TableViewRow title="Potatoes"/>
                    </TableViewSection>
                    <TableViewSection id="sectionFish" headerTitle="Fish">
                        <TableViewRow title="Cod"/>
                        <TableViewRow title="Haddock"/>
                    </TableViewSection>
                </TableView>
            </Window>
        </Alloy>
        ```

---
name: TableViewAnimationProperties
summary: A simple object for specifying the animation properties to use when inserting or deleting rows, or scrolling the table.
description: |
    Not all properties apply to all methods.

    `animationStyle` does not apply to the `scrollToTop` or `scrollToIndex` methods.

    `positon` only applies to the `scrollToIndex` method.
platforms: [iphone, ipad, android, macos]
since: {android: "10.1.0", iphone: "3.1.0", ipad: "3.1.0", macos: "9.2.0"}
properties:
  - name: animated
    summary: Whether this table change should be animated. Ignored if any `animationStyle` value is specified.
    type: Boolean
    default: true

  - name: animationStyle
    summary: Type of animation to use for row insertions and deletions.
    type: Number
    constants: Titanium.UI.iOS.RowAnimationStyle.*
    default: |
        If `animated` is `true` but no `animationStyle` is specified, the style defaults to
        [FADE](Titanium.UI.iOS.RowAnimationStyle.FADE).

  - name: position
    summary: Specifies what position to scroll the selected row to.
    type: Number
    constants: Titanium.UI.iOS.TableViewScrollPosition.*
    default: <Titanium.UI.iOS.TableViewScrollPosition.NONE>

---
name: TableViewIndexEntry
summary: A simple object that represents an index entry in a `TableView`.
properties:
  - name: title
    summary: Title to display in the index bar for this item.
    type: String

  - name: index
    summary: Row index associated with this item.
    type: Number

---
name: SelectedRowObject
summary: The arguments for the <Titanium.UI.TableView.rowsselected> event.
since: 8.2.0
platforms: [iphone, ipad, macos]    
properties:
  - name: index
    summary: Row index.
    type: Number

  - name: row
    summary: Table view row object.
    type: Titanium.UI.TableViewRow

  - name: rowData
    summary: |
        Properties of the row. Use this property rather than `row` to access any custom row properties.
    type: Dictionary<Titanium.UI.TableViewRow>

  - name: section
    summary: Table view section object, if the clicked row is contained in a section.
    type: Titanium.UI.TableViewSection
