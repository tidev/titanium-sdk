---
name: Titanium.UI.ListItem
summary: A list item is an individual item in a list section.
description: |
    A list item is a combination of a <ListDataItem> and <ItemTemplate>.  The list data item
    represents the actual data, while the item template represents the style elements of the item.

    You should not create `ListItem` objects with a JavaScript factory method, as you do other Titanium proxies.
    Instead, you should pass a <ListDataItem> array to the `setItems` method of a `ListSection`. The list data items 
    contain the data you want to display in the list.

    Alloy applications can use **`<ListItem>`** elements to create `ListItem` objects. `<ListItem>` elements
    must be nested inside a **`<ListSection>`** element, which itself is nested in a `<ListView>` element, 
    as shown below:

    ``` xml
    <Alloy>
        <ListView id="list">
            <ListSection id="accounts">
                <ListItem image="images/checking_account.png" title="Checking"/>
                <ListItem image="images/saving_account.png" title="Savings"/>
            </ListSection>
        </ListView>
    </Alloy>
    ```

    By default, only the `title`, `image` and `accessoryType` keys of the list data item's
    `properties` dictionary are displayed if an item template is not defined.  See "Default List Items" 
    under "Examples" section for an example of using the default template.


    #### Item Templates

    To customize the style of a list item, use an item template to create your view structure.

    Add key-value pairs of view properties and their values to the `properties` dictionary of the
    item template to set view properties of the list item.

    **Note:** If possible, do not use `Ti.UI.SIZE` or non-static dimensions to set the
    dimensions of view elements in list items.  Instead, try to use static dimensions. Scrolling in
    the list view may be jerky if you use non-static dimensions.

    Add key-value pairs of event names and their callback functions (or array of callback functions
    for multiple callback bindings) to the `events` dictionary of the  item template to bind callbacks
    to events, which are bubbled from the subcomponents of the item.

    Add additional views, such as labels or image views, to the `childTemplates` array of the item
    template. The child templates are item templates with two extra properties:

    - Set the `type` property to a Titanium view class, such as `Ti.UI.Label` or `Ti.UI.ImageView`,
      to use that view in your template.
    - Set the `bindId` to bind the template to a custom property in the list data item. The custom
      properties in the list data item contain key-value pairs of view properties and their values.

    A list template supports the following view classes:

      * <Titanium.UI.ActivityIndicator>
      * <Titanium.UI.Button>
      * <Titanium.UI.ButtonBar>
      * <Titanium.UI.ImageView>
      * <Titanium.UI.Label>
      * <Titanium.UI.MaskedImage>
      * <Titanium.UI.ProgressBar>
      * <Titanium.UI.Picker>
      * <Titanium.UI.ScrollableView>
      * <Titanium.UI.Slider>
      * <Titanium.UI.Switch>
      * <Titanium.UI.TextArea>
      * <Titanium.UI.TextField>
      * <Titanium.UI.iOS.BlurView>
      * <Titanium.UI.iOS.LivePhotoView>
      * <Titanium.UI.iOS.Stepper>
      * <Titanium.UI.iOS.TabbedBar>

    For example, suppose you have a list data item defined as `{foo:{text: 'foobar'}}` and an item
    template defined as `{childTemplates: [{type: 'Ti.UI.Label', bindId: 'foo'}]}`.  The `foo`
    property in the list data item binds to the label in the template, which sets the `text`
    property of the label in the template to the `text` property in the list data item.

    To bind the list data item to an item template, use the <Titanium.UI.ListView.templates>
    property to map the template to a style name, then use the style name to either set the
    <Titanium.UI.ListView.defaultItemTemplate> property to globally set the style for all items or set the
    `template` property of the list data item to override or individually set the style.

    On iOS, you can specify one of the template constants for the <ListDataItem.template> property
    or <Titanium.UI.ListView.defaultItemTemplate> property: <Titanium.UI.LIST_ITEM_TEMPLATE_CONTACTS>,
    <Titanium.UI.LIST_ITEM_TEMPLATE_SETTINGS> or <Titanium.UI.LIST_ITEM_TEMPLATE_SUBTITLE>.

    #### Eventing

    Unlike other views, you cannot use the `addEventListener` method to bind callbacks to events for a
    ListItem.

    Use list view's [itemclick](Titanium.UI.ListView.itemclick) event to monitor click events on
    items in the list view. Do not rely on the `source` property to determine which item fired the
    event.  Either use the `sectionIndex` and `itemIndex`, or the `itemId` to determine the list item
    that generated the event and use the `bindId` to check which child control fired the event.
    See "Default List Item" under "Examples" section for an example of using the `itemclick` event.

    To monitor events that bubble to the `ListItem` or to monitor events of the view subcomponents,
    bind them to the item by using the `events` dictionary of the item template or the child view
    templates respectively. Add the bindings as key-value pairs, where the key is the event name
    and the value is the callback (or array of callbacks for multiple bindings). See "List Items
    with an Item Template" under "Examples" section for an example of binding a `click` event to an 
    item using an item template.
platforms: [android, ipad, iphone, macos]
since: '3.1.0'
extends: Titanium.Proxy
createable: false
excludes:
    methods: [addEventListener, applyProperties, fireEvent, removeEventListener]
    properties: [bubbleParent]
properties:

  - name: itemId
    summary: A user defined string that gets passed to events.
    type: String
    accessors: false

  - name: accessoryType
    summary: Sets an accessory on the right side of an item.
    type: Number
    constants: Titanium.UI.LIST_ACCESSORY_TYPE_*
    default: Titanium.UI.LIST_ACCESSORY_TYPE_NONE
    accessors: false

  - name: backgroundColor
    summary: Background color of the view, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]
    default: Transparent
    accessors: false

  - name: backgroundImage
    summary: Background image to render when the item is not selected.
    description: |
        Must be a local resource.
    type: String
    since: 3.2.0
    platforms: [android, iphone, ipad, macos]
    accessors: false

  - name: backgroundGradient
    summary: Background gradient to render when the item is not selected.
    type: Gradient
    since: 3.2.0
    platforms: [android, iphone, ipad, macos]
    accessors: false

  - name: backgroundSelectedColor
    summary: Background color of the view, as a color name or hex triplet when item is selected.
    description: |
        On Android, clicking on ListItem's sub-views will not trigger this unless these views have 'touchEnabled' set to false.
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]
    since: 10.0.0
    platforms: [android, iphone, ipad, macos]
    default: transparent
    accessors: false

  - name: backgroundSelectedImage
    summary: Background image to render when the item is selected.
    description: |
        Must be a local resource.
        On Android, clicking on ListItem's sub-views will not trigger this unless these views have 'touchEnabled' set to false.
    type: String
    since: 10.0.0
    platforms: [android, iphone, ipad, macos]
    accessors: false

  - name: backgroundSelectedGradient
    summary: Background gradient to render when the item is selected.
    type: Gradient
    since: 10.0.0
    platforms: [iphone, ipad, macos]
    accessors: false

  - name: selectedBackgroundColor
    summary: Background color of the view, as a color name or hex triplet when item is selected.
    description: |
        On Android, clicking on ListItem's sub-views will not trigger this unless these views have 'touchEnabled' set to false.
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]
    since: 3.2.0
    platforms: [android, iphone, ipad, macos]
    default: transparent
    accessors: false
    deprecated:
        since: "10.0.0"
        notes: This property has been deprecated in favor of <Titanium.UI.ListItem.backgroundSelectedColor>.

  - name: selectedBackgroundImage
    summary: Background image to render when the item is selected.
    description: |
        Must be a local resource.
        On Android, clicking on ListItem's sub-views will not trigger this unless these views have 'touchEnabled' set to false.
    type: String
    since: 3.2.0
    platforms: [android, iphone, ipad, macos]
    accessors: false
    deprecated:
        since: "10.0.0"
        notes: This property has been deprecated in favor of <Titanium.UI.ListItem.backgroundSelectedImage>.

  - name: selectedBackgroundGradient
    summary: Background gradient to render when the item is selected.
    type: Gradient
    since: 3.2.0
    platforms: [iphone, ipad, macos]
    accessors: false
    deprecated:
        since: "10.0.0"
        notes: This property has been deprecated in favor of <Titanium.UI.ListItem.backgroundSelectedGradient>.

  - name: canEdit
    summary: Specifies if the item can be deleted by a user initiated action.
    description: |
        For more information see the "Editing Support" section of <Titanium.UI.ListView>.
    type: Boolean
    default: false
    since: {android: "9.3.0", iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0"}
    platforms: [android, iphone, ipad, macos]
    accessors: false

  - name: canInsert
    summary: Specifies if the item can be inserted by a user initiated action.
    description: |
        For more information see the "Editing Support" section of <Titanium.UI.ListView>.
    type: Boolean
    default: false
    since: 5.2.0
    platforms: [iphone, ipad, macos]
    accessors: false

  - name: canMove
    summary: Specifies if the item can be reordered within the list view by a user initiated action.
    description: |
        For more information see the "Editing Support" section of <Titanium.UI.ListView>.
    type: Boolean
    default: false
    since: {android: "9.3.0", iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0"}
    platforms: [android, iphone, ipad, macos]
    accessors: false

  - name: editActions
    summary: Specifies custom action items to be shown when when a list item is edited.
    description: |
        For more information see the "Editing Support" section of <Titanium.UI.ListView>.
    type: Array<RowActionType>
    since: 4.1.0
    osver: {ios: {min: "8.0"}}
    platforms: [iphone, ipad, macos]

  - name: searchableText
    summary: The text to match against when the [ListView](Titanium.UI.ListView) is performing a search.
    description: |
        Used in conjunction with [searchView](Titanium.UI.ListView.searchView), [searchText](Titanium.UI.ListView.searchText) and [caseInsensitiveSearch](Titanium.UI.ListView.caseInsensitiveSearch) properties of ListView.
    type: String
    since: 3.2.0
    platforms: [android, iphone, ipad, macos]
    accessors: false

  - name: color
    summary: Default text color of the item when not selected, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.

        On Android, `selectedColor` is not supported, so the text is always displayed in this color.

        Only applies to the built-in templates.
    type: [String, Titanium.UI.Color]
    accessors: false
    
  - name: subtitleColor
    summary: Default text color of the subtitle, as a color name or hex triplet.
    description: |
        This property is only used on iOS and if the ListDataItem `template` property or ListView
        `defaultItemTemplate` property is either: <Titanium.UI.LIST_ITEM_TEMPLATE_SUBTITLE>, 
        <Titanium.UI.LIST_ITEM_TEMPLATE_CONTACTS> or <Titanium.UI.LIST_ITEM_TEMPLATE_SETTINGS>.
    type: [String, Titanium.UI.Color]
    accessors: false
    platforms: [iphone, ipad, macos]
    since: "6.1.0"
    
  - name: selectedColor
    summary: Color to use for the item title when the item is selected, as a color name or hex triplet.
    description: |
        This property is only used on iOS.
        
        For information about color values, see the "Colors" section of <Titanium.UI>. 
    type: [String, Titanium.UI.Color]
    since: "6.0.0"
    platforms: [iphone,ipad, macos]    
    
  - name: selectedSubtitleColor
    summary: Color to use for the item subtitle when the item is selected, as a color name or hex triplet.
    description: |
        This property is only used on iOS and if the ListDataItem `template` property or ListView
        `defaultItemTemplate` property is either: <Titanium.UI.LIST_ITEM_TEMPLATE_SUBTITLE>, 
        <Titanium.UI.LIST_ITEM_TEMPLATE_CONTACTS> or <Titanium.UI.LIST_ITEM_TEMPLATE_SETTINGS>.

        For information about color values, see the "Colors" section of <Titanium.UI>. 
    type: [String, Titanium.UI.Color]
    since: "6.1.0"
    platforms: [iphone,ipad, macos]    
    
  - name: font
    summary: Font to use for the item title.
    description: |
        Only applies to the built-in templates.
    type: Font
    default: System default font.
    accessors: false

  - name: height
    summary: Row height in platform-specific units.
    description: |
        On Android, the value can be either a float value or a dimension string, for example, '40dp'.
        By default, the minimum height is 30 dp on the Android platform.

        On iOS, the value can only be an absolute value.
    type: [Number,String]
    accessors: false

  - name: image
    summary: Image to render in the image area of the item, specified as a local path or URL.
    description: |
        On iOS, the image is on the left, and on Android, the image is on the right.

        On Android, this image only appears on the default template.

        On iOS, only local images are supported.

        On iOS, this image only appears if the ListDataItem `template` property or ListView
        `defaultItemTemplate` property is either: <Titanium.UI.LIST_ITEM_TEMPLATE_DEFAULT>,
        <Titanium.UI.LIST_ITEM_TEMPLATE_SETTINGS> or <Titanium.UI.LIST_ITEM_TEMPLATE_SUBTITLE>.
    type: String
    accessors: false

  - name: title
    summary: Title to set in the text area of the item.
    description: |
        This title only appears for the built-in templates.
    type: String
    accessors: false

  - name: selectionStyle
    summary: Selection style constant to control the selection color.
    description: |
        Specify one of the constants from <Titanium.UI.iOS.ListViewCellSelectionStyle>.
    type: Number
    platforms: [iphone,ipad, macos]
    accessors: false

  - name: subtitle
    summary: Subtitle to set in the text area of the item.
    description: |
        This subtitle only appears if the ListDataItem `template` property or ListView
        `defaultItemTemplate` property is set to either: <Titanium.UI.LIST_ITEM_TEMPLATE_CONTACTS>,
        <Titanium.UI.LIST_ITEM_TEMPLATE_SETTINGS> or <Titanium.UI.LIST_ITEM_TEMPLATE_SUBTITLE>.
    type: String
    platforms: [iphone,ipad, macos]
    accessors: false

examples:
  - title: Default List Items
    example: |
        Creates a list without using an item template. Monitors the `itemclick` event to check and
        uncheck tasks.

        ``` js
        var win = Ti.UI.createWindow({backgroundColor: 'white'});
        var listView = Ti.UI.createListView();

        var tasks = [
            {id: 'trash', name: 'Take Out the Trash', icon: 'trash.png'},
            {id: 'dishes', name: 'Do the Dishes', icon: 'dishes.png'},
            {id: 'doggie', name: 'Walk the Dog', icon: 'doggie.png'}
        ];

        var data = [];
        for (var i = 0; i < tasks.length; i++) {
            data.push({ 
                properties: {
                    itemId: tasks[i].id,
                    title: tasks[i].name,
                    image: tasks[i].icon,
                    accessoryType: Ti.UI.LIST_ACCESSORY_TYPE_NONE,
                    color: 'black'
                }
            });
        }

        var section = Ti.UI.createListSection();
        section.items = data;
        listView.sections = [section];
        listView.addEventListener('itemclick', function(e) {
            var item = section.getItemAt(e.itemIndex);
            if (item.properties.accessoryType == Ti.UI.LIST_ACCESSORY_TYPE_NONE) {
                item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;
                item.properties.color = 'red';
            } else {
                item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;
                item.properties.color = 'black';
            }
            section.updateItemAt(e.itemIndex, item);
        });
        win.add(listView);
        win.open();
        ```

  - title: Default List Items (Alloy version)
    example: |
        Alloy version of previous example. For additional Alloy examples of using `ListView`, see <Titanium.UI.ListView>. 

        index.xml
        ``` xml
        <!-- views/index.xml -->
        <Alloy>
            <Window class="container" title="Some things">
                <ListView id="listView">
                    <ListSection id="section">
                        <ListItem image="images/trash.jpg" title="Take Out the Trash"/>
                        <ListItem image="images/dishes.png" title="Do the Dishes"/>
                        <ListItem image="images/doge.png" title="Walk the Dog"/>
                    </ListSection>
                </ListView>
            </Window>
        </Alloy>
        ```

        index.js
        ``` js
        // controllers/index.js
        $.listView.addEventListener('itemclick', function(e) {
            var item = $.section.getItemAt(e.itemIndex);
            if (item.properties.accessoryType == Ti.UI.LIST_ACCESSORY_TYPE_NONE) {
                item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;
                item.properties.color = 'red';
            } else {
                item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;
                item.properties.color = 'black';
            }
            $.section.updateItemAt(e.itemIndex, item);
        });
        ```

  - title: List Items with an Item Template
    example: |
        Previous example modified to use an item template.  The template defines a small icon on the
        far left, a title label to the right of the icon and a subtitle below the title label in
        smaller text.

        Monitors the `click` event of the item rather than the `itemclick` event of the list view.

        ``` js
        var win = Ti.UI.createWindow({backgroundColor: 'white'});

        var plainTemplate = {
            childTemplates: [
                {                            // Image justified left
                    type: 'Ti.UI.ImageView', // Use an image view for the image
                    bindId: 'pic',           // Maps to a custom pic property of the item data
                    properties: {            // Sets the image view properties
                        width: '50dp', height: '50dp', left: 0
                    }
                },
                {                            // Title
                    type: 'Ti.UI.Label',     // Use a label for the title
                    bindId: 'title',         // Maps to a custom title property of the item data
                    properties: {            // Sets the label properties
                        color: 'black',
                        font: { fontFamily:'Arial', fontSize: '20dp', fontWeight:'bold' },
                        left: '60dp', top: 0,
                    },
                },
                {                            // Subtitle
                    type: 'Ti.UI.Label',     // Use a label for the subtitle
                    bindId: 'subtitle',      // Maps to a custom subtitle property of the item data
                    properties: {            // Sets the label properties
                        color: 'gray',
                        font: { fontFamily:'Arial', fontSize: '14dp' },
                        left: '60dp', top: '25dp',
                    }
                }
            ],
            // Binds a callback to the click event, which catches events bubbled by the view subcomponents.
            events: {click: toggleCheck }
        };

        // The following JSON API calls copy the plainTemplate object minus functions.
        // This method of copying an object is simple but not quick.
        // If performance is a factor, create your own method to copy an object.

        var redTemplate = JSON.parse(JSON.stringify(plainTemplate));
        // Change the text color to red
        redTemplate.childTemplates[1].properties.color = 'red';
        redTemplate.childTemplates[2].properties.color = 'red';
        // Rebind the click event callback
        redTemplate.events.click = toggleCheck;

        var listView = Ti.UI.createListView({
            // Maps plainTemplate to 'uncheck' and redTemplate to 'check' 
            templates: { 'uncheck': plainTemplate, 'check': redTemplate },
            // Use 'uncheck', that is, the plainTemplate created earlier for all items
            // Can be overridden by the item's template property
            defaultItemTemplate: 'uncheck'
        });

        var tasks = [
            {id: 'trash', name: 'Take Out the Trash', person: 'Yakko', icon: 'trash.png'},
            {id: 'dishes', name: 'Do the Dishes', person: 'Wakko', icon: 'dishes.png'},
            {id: 'doggie', name: 'Walk the Dog', person: 'Dot', icon: 'doggie.png'}
        ];

        var data = [];
        for (var i = 0; i < tasks.length; i++) {
            data.push({
                // Maps to the title component in the template
                // Sets the text property of the Label component
                title : { text: tasks[i].name },
                // Maps to the subtitle component in the template
                // Sets the text property of the Label component
                subtitle : { text : tasks[i].person },
                // Maps to the pic component in the template
                // Sets the image property of the ImageView component
                pic : { image : tasks[i].icon },
                // Sets the regular list data properties
                properties : {
                    itemId: tasks[i].id,
                    accessoryType: Ti.UI.LIST_ACCESSORY_TYPE_NONE,
                }
            });
        }

        var section = Ti.UI.createListSection();
        section.items = data;
        listView.sections = [section];

        // Modified version of the `itemclick` event listener
        // Changes the item template rather than the list item's color property
        function toggleCheck(e) {
            var item = section.getItemAt(e.itemIndex);
            if (item.properties.accessoryType == Ti.UI.LIST_ACCESSORY_TYPE_NONE) {
                item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;
                item.template = 'check';
            } else {
                item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;
                item.template = 'uncheck';
            }
            section.updateItemAt(e.itemIndex, item);
        } 

        win.add(listView);
        win.open();
        ```

---
name: ItemTemplate
summary: Template that represents the basic appearance of a list item.
description: See <Titanium.UI.ListItem> for examples of using an item template.
platforms: [android, ipad, iphone, macos]
since: '3.1.0'
properties:
  - name: properties
    summary: Contains key-value pairs of view properties and their values that are applied to the ListItem.
    description: |
        If there are properties set in the <ListDataItem>, the properties set in the template are
        overridden by the ones set in the list data item.
    type: Dictionary<Titanium.UI.ListItem>

  - name: events
    summary: Contains key-value pairs of view events and their listeners that are applied to the ListItem.
    description: |
        Array values are considered as multiple event listeners for that event.

        Event listeners added here respond to bubbled events fired from the view subcomponents.
    type: Dictionary

  - name: childTemplates
    summary: |
        Contains an array of subview templates to be added (in order) as children to this view.
    type: Array<ViewTemplate>

---
name: ViewTemplate
summary: Template that represents a view subcomponent of an <ItemTemplate>.
description: See <Titanium.UI.ListItem> for examples of using an item template.
platforms: [android, ipad, iphone, macos]
since: '3.1.0'
properties:
  - name: type
    summary: View's class name, for example, `Ti.UI.Button`.
    description: |
        Only the following view classes are supported:

          * <Titanium.UI.ActivityIndicator>
          * <Titanium.UI.Button>
          * <Titanium.UI.ButtonBar>
          * <Titanium.UI.ImageView>
          * <Titanium.UI.Label>
          * <Titanium.UI.MaskedImage>
          * <Titanium.UI.ProgressBar>
          * <Titanium.UI.Picker>
          * <Titanium.UI.ScrollableView>
          * <Titanium.UI.Slider>
          * <Titanium.UI.Switch>
          * <Titanium.UI.TextArea>
          * <Titanium.UI.TextField>
          * <Titanium.UI.iOS.BlurView>
          * <Titanium.UI.iOS.LivePhotoView>
          * <Titanium.UI.iOS.Stepper>
          * <Titanium.UI.iOS.TabbedBar>
    type: String
    optional: false

  - name: bindId
    summary: View's ID (or set of IDs) used for data binding. This value must be unique.
    type: String

  - name: properties
    summary: |
        Contains key-value pairs of view properties and their values that are applied to this view component.
    type: Dictionary

  - name: events
    summary: |
        Contains key-value pairs of view events and their listeners that are applied to this view component.
    description: |
        Array values are considered as multiple event listeners for that event.
    type: Dictionary

  - name: childTemplates
    summary: |
        Contains an array of subview templates to be added (in order) as children to this view.
    type: Array<ViewTemplate>

---
name: ListDataItem
summary: Represents displayed item data.
description: |
    In addition to the properties defined below, you can define custom key-value pairs, which bind to
    the child templates of an <ItemTemplate>.  The key for these pairs match the `bindId` of
    the child view templates and the values are a dictionary of view properties applied to the view components.
    Any other properties that are not identified by a `bindId` are permitted but are ignored by the item template.

    See <Titanium.UI.ListItem> for examples of using a list data item.
platforms: [android, ipad, iphone, macos]
since: '3.1.0' 
properties:
  - name: template
    type: [String, Number]
    summary: |
        Template ID configured with the <Titanium.UI.ListView.templates> property or
        <Titanium.UI.LIST_ITEM_TEMPLATE_DEFAULT>.
    description: |
        On iOS, you can specify one of the following pre-defined templates:
        <Titanium.UI.LIST_ITEM_TEMPLATE_CONTACTS>,
        <Titanium.UI.LIST_ITEM_TEMPLATE_SETTINGS> or <Titanium.UI.LIST_ITEM_TEMPLATE_SUBTITLE>.
    default: |
        If the ListView's `defaultItemTemplate` property is not set,
        then <Titanium.UI.LIST_ITEM_TEMPLATE_DEFAULT> is used.

  - name: properties
    type: Dictionary<Titanium.UI.ListItem>
    summary: |
        Contains key-value pairs of view properties and their values that are applied to the
        `ListItem`.
    description: |
        If there are properties set in the <ItemTemplate> (not the children view templates),
        the values set in the list data item override the template's properties.

---
name: RowActionType
summary: Represents the custom edit action for a ListItem.
description: |
    By default when a listItem has [canEdit](Titanium.UI.ListItem.canEdit) set to true, a left swipe on the the row presens the 'Delete' button.
    This object lets developers define custom titles for editing actions supported on the row. 
    This object is used in conjunction with the [editActions](Titanium.UI.ListItem.editActions) property and 
    [editaction](Titanium.UI.ListView.editaction) event. 
platforms: [ipad, iphone, macos]
since: '4.1.0' 
osver: {ios: {min: "8.0"}}
properties:
  - name: title
    type: String
    summary: The title of the row action.
    optional: false
    
  - name: identifier
    summary: |
        The [identifier](RowActionType. identifier) of the row action. Only included in the event 
        if previously defined. Available in Titanium 6.0.0 and later.
    type: String

  - name: style
    type: Number
    summary: The style of the row action.
    description: |
        Use one of <Titanium.UI.iOS.ROW_ACTION_STYLE_DEFAULT>, <Titanium.UI.iOS.ROW_ACTION_STYLE_DESTRUCTIVE> or
        <Titanium.UI.iOS.ROW_ACTION_STYLE_NORMAL> 
    optional: false

  - name: color
    type: String
    summary: The background color of the row action.
    description: |
        By default the background color of the row action is defined by the style applied. Use this property to 
        override the default background color of the row action.
    optional: true
