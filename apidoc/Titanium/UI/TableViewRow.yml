---
name: Titanium.UI.TableViewRow
summary: |
    A table view row is an individual item in a table, organized into table view sections.
description: |
    Use the <Titanium.UI.createTableViewRow> method or **`<TableViewRow>`** Alloy element to create
    a table view row.

    These may be explicitly added to [TableViewSection](Titanium.UI.TableViewSection) objects, which are applied
    to a [TableView](Titanium.UI.TableView). If a table section is not specified, one will be
    automatically created.

    A row's contents can be as simple as a single line of text, or comprised of a completely
    customized layout of child views.

    #### Creating Table View Rows

    Rows may be created using the properties directly available on the `TableViewRow` object, to
    achieve the following:

    * Row title to display the text content in the row.
    * Background color and background image.
    * Images on the left and right sides of the row.
    * System decorations, such as checkboxes.

    Alternatively, custom layouts of multiple lines of text, different fonts, and additional
    images or controls can be created by adding child views to the row. In this case, the row's
    `title` property should not be set.

    As events automatically bubble/propogate to parent views, a listener may be placed on the table
    view to detect events fired from the rows. The benefit is that it is not necessary to
    explicitly create a listener for every individual row.

    See the [TableView](Titanium.UI.TableView) description and examples section for more information
    about creating table rows.

    #### Platform Implementation Notes

    The `top`, `left` and other positional parameters are not used for their usual purposes, because
    the table view row is automatically positioned by its parent.

    On Android, these properties are used to position the content (title) inside the row. For example,
    setting `top` to 20 moves the title down from the top of the row.

    On iOS, these values have no effect.

    Also, note that the selected text color, `selectedColor`, can only be set on iOS.
    On Android, the text color does not change when the row is selected.

    #### Row Swipe Gestures (Android and iOS)

    A common requirement is to enable the user to interact with table rows using swipe gestures.
    As this event is not available for the `TableViewRow` object, it will not "bubble up" to the
    `TableView`, where a <Titanium.UI.TableView.swipe> is recognized.

    A typical solution is to use a standard view as a container, or wrapper, for all each row's child
    views, because it recognizes <Titanium.UI.View.swipe> events and allows them to pass to the table.
    Each child view should have touch events disabled, so that the container view provides a reliable
    source for these events. Refer to the "Row Swipe Gestures" example for a demonstration.

    For iOS, read the [Row Editing and Moving Modes notes on TableView](Titanium.UI.TableView) regarding
    the interactions between edit modes and swipes.
extends: Titanium.UI.View
since: "0.9"
excludes:
    events: [dblclick, doubletap, focus, longpress, pinch, singletap, touchmove, twofingertap]
    methods: [animate]

events:
  - name: click
    summary: Fired when a table row is clicked by the user.
    properties:
      - name: detail
        summary: |
            Indicates whether the detail button was clicked. Only `true` if `row.hasDetail` is
            `true` and the detail button was clicked.
        type: Boolean

      - name: index
        summary: Row index.
        type: Number

      - name: row
        summary: Table view row object.
        type: Titanium.UI.TableViewRow

      - name: rowData
        summary: Dictionary containing the properties set on the row.
        type: Dictionary<Titanium.UI.TableViewRow>

      - name: searchMode
        summary: Boolean to indicate if the table is in search mode.
        type: Boolean

      - name: section
        summary: Table view section object, if the clicked row is contained in a section.
        type: Titanium.UI.TableViewSection

      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: touchcancel
    summary: Fired when a touch gesture is interrupted by the device.
    description: |
        Generated in various circumstances, including an incoming call to allow the UI to clean
        up state.

        On Android and iOS, be aware that a row or table touch event and a table
        [scroll](Titanium.UI.TableView.scroll) event cannot occur concurrently. If a table begins
        to scroll during a touch event, the appropriate row or table `touchcancel` event fire
        before the `scroll` event begins.
    platforms: [iphone, ipad, macos]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: touchend
    summary: Fired when a touch gesture is complete.
    description: |
        On Android and iOS, be aware that a row or table touch event and a table
        [scroll](Titanium.UI.TableView.scroll) event cannot occur concurrently. If a table begins
        to scroll during a touch event, the appropriate row or table `touchcancel` event fire
        before the `scroll` event begins.
    platforms: [iphone, ipad, macos]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: touchstart
    summary: Fired as soon as the device detects a touch gesture against this view.
    description: |
        On Android and iOS, be aware that a row or table touch event and a table
        [scroll](Titanium.UI.TableView.scroll) event cannot occur concurrently. If a table begins
        to scroll during a touch event, the appropriate row or table `touchcancel` event fire
        before the `scroll` event begins.
    platforms: [iphone, ipad, macos]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: touchmove
    summary: Fired as soon as the device detects movement of a touch..
    description: |
        On Android and iOS, be aware that a row or table touch event and a table
        [scroll](Titanium.UI.TableView.scroll) event cannot occur concurrently. If a table begins
        to scroll during a touch event, the appropriate row or table `touchcancel` event fire
        before the `scroll` event begins.
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.0.1", ipad: "3.0.1"}
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

properties:
  - name: className
    summary: Class name for the row.
    description: |
        A class name represents a unique row layout.

        A table view row must have a unique class name if the row layout is unique. However,
        use the same name for rows that have the same structural layout (even if the content is
        different) to provide maximum rendering performance.

        For example, if some rows include images and some rows do not, you would have two class
        names, one for image rows and one for plain rows.

        This property exists on iOS, but is ignored.
    type: String
    platforms: [android]

  - name: color
    summary: Default text color of the row when not selected, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.

        On Android, the default text color is black if the background color is closer to white
        otherwise the default text color is white also `selectedColor` is not supported
        so the text is always displayed in this color.
    type: [String, Titanium.UI.Color]

  - name: deleteButtonTitle
    summary: Text to display on the delete button when editable is enabled
    description: When [editable](Titanium.UI.TableViewRow.editable) is enabled on the TableViewRow, use this property to change the title of the delete button.
    type: String

  - name: editable
    summary: |
        Determines the rows' editable behavior, which allows them to be deleted by the user when the
        table is in `editing` or `moving` mode.
    description: |
        If this property is not explicitly set, it will return `undefined` and the row's editable
        behavior will be determined by its parent table's [editable](Titanium.UI.TableView.editable)
        property.

        See the <Titanium.UI.TableView> description section for a full explanation of the TableView's
        row `editing` and `moving` modes.

        If you want to change the title of the delete button, use the [deleteButtonTitle](Titanium.UI.TableViewRow.deleteButtonTitle] property
    type: Boolean
    default: undefined
    platforms: [android, iphone, ipad, macos]
    since: {android: "9.3.0", iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0"}

  - name: font
    summary: Font to use for the row title.
    type: Font
    default: System default font.

  - name: footer
    summary: The footer title of the row.
    description: |
        The `footer` property is used to assign a footer title to a row. It has the same effect as setting
        the `footerTitle` property of a <Titanium.UI.TableViewSection>.
    type: String
    platforms: [iphone, ipad, android, macos]
    deprecated:
      since: "10.0.0"
      notes: Use the <Titanium.UI.TableViewRow.footerTitle> property instead.

  - name: footerTitle
    summary: The footer title of the row.
    description: |
        The `footerTitle` property is used to assign a footer title to a row. It has the same effect as setting
        the `footerTitle` property of a <Titanium.UI.TableViewSection>.
    type: String
    platforms: [iphone, ipad, android, macos]
    since: {android: "10.0.0", iphone: "10.0.0", ipad: "10.0.0", macos: "10.0.0"}

  - name: hasCheck
    summary: |
        Determines whether a system-provided checkmark is displayed on the right-hand side of
        the row.
    type: Boolean
    default: false

  - name: hasChild
    summary: |
        Determines whether a system-provided arrow is displayed on the right-hand side of the row.
    description: |
        The `hasChild` flag is used to indicate to the user that clicking on the row displays more
        detailed information.

        On iOS, this is specifically used when clicking on the row navigates to the next table view
        in a heirarchy of table views.
    type: Boolean
    default: false

  - name: hasDetail
    summary: |
        Determines whether a system-provided detail disclosure button is displayed on the right-hand
        side of the row.
    description: |
        The `hasDetail` flag is used to indicate to the user that more details are
        available on the row.

        Specifically on iOS the detail disclosure button indicates that clicking on the row results
        in a detail view of that item.

        The `detail` property in the click event is set to `true` if the click occurred on
        the detail button itself, `false` if the click occurs anywhere else in the row.

        For rows that have `hasDetail` set to false, the `detail` flag is always `false`.
    type: Boolean
    default: false
    platforms: [iphone,ipad, android, macos]
    since: {android: "9.3.0"}

  - name: header
    summary: The header title of the row.
    description: |
        The `header` property is used to assign a header title to a row. It has the same effect as setting
        the `headerTitle` property of a <Titanium.UI.TableViewSection>.
    type: String
    platforms: [iphone, ipad, android, macos]
    deprecated:
      since: "10.0.0"
      notes: Use the <Titanium.UI.TableViewRow.headerTitle> property instead.

  - name: headerTitle
    summary: The header title of the row.
    description: |
        The `headerTitle` property is used to assign a header title to a row. It has the same effect as setting
        the `headerTitle` property of a <Titanium.UI.TableViewSection>.
    type: String
    platforms: [iphone, ipad, android, macos]
    since: {android: "10.0.0", iphone: "10.0.0", ipad: "10.0.0", macos: "10.0.0"}

  - name: indentionLevel
    summary: Indention level for the row.
    description: Indentation values greater than 0 indent the row text.
    type: Number
    default: 0
    platforms: [iphone, ipad, macos]

  - name: leftImage
    summary: Image to render in the left image area of the row, specified as a local path or URL.
    type: String

  - name: moveable
    summary: |
        Determines the rows' moveable behavior, which allows them to be re-ordered by the user when
        the table is in `editing` or `moving` mode.
    description: |
        If this property is not explicitly set, it will return `undefined` and the row's moveable
        behavior will be determined by its parent table's [moveable](Titanium.UI.TableView.moveable)
        property.

        See the <Titanium.UI.TableView> description section for a full explanation of the TableView's
        row `editing` and `moving` modes.
    type: Boolean
    default: undefined
    platforms: [android, iphone, ipad, macos]
    since: {android: "9.3.0", iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0"}

  - name: opacity
    description: |
        To set the opacity of a row on iOS, specify an aRGB value with the
        <Titanium.UI.TableViewRow.backgroundColor> property.
    platforms: [android]

  - name: rightImage
    summary: Image to render in the right image area of the row, specified as a local path or URL.
    type: String

  - name: backgroundSelectedColor
    summary: Background color to render when the row is selected, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]
    since: "10.0.0"

  - name: backgroundSelectedImage
    summary: Background image to render when the row is selected.
    type: String
    since: "10.0.0"

  - name: selectedBackgroundColor
    summary: Background color to render when the row is selected, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]
    deprecated:
        since: "10.0.0"
        notes: This property has been deprecated in favor of <Titanium.UI.TableViewRow.backgroundSelectedColor>.

  - name: selectedBackgroundImage
    summary: Background image to render when the row is selected.
    type: String
    deprecated:
        since: "10.0.0"
        notes: This property has been deprecated in favor of <Titanium.UI.TableViewRow.backgroundSelectedImage>.

  - name: selectedColor
    summary: Color of the row text when the row is selected, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]
    platforms: [iphone, ipad, macos]

  - name: selectionStyle
    summary: Selection style constant to control the selection color.
    description: |
        Specify one of the constants from <Titanium.UI.SELECTION_STYLE_*>.
    type: Number
    platforms: [android, iphone, ipad, macos]
    since: {android: "10.1.0", iphone: "5.4.0", ipad: "5.4.0", macos: "9.2.0"}

  - name: title
    summary: Text to display on the row.
    description: Do not specify if using views as children of the row.
    type: String

  - name: accessibilityLabel
    summary: A succint label associated with the table row for the device's accessibility service.
    description: |
        See <Titanium.UI.View.accessibilityLabel> description.
    since: "3.0.0"
    platforms: [iphone, ipad, macos]
    type: String

examples:
  - title: Simple Table View Row example
    example: |
        Create a table view row containing a red square view.

        ``` js
        var row = Titanium.UI.createTableViewRow();
        var view = Titanium.UI.createView({
          backgroundColor:'red',
          width: 20, height: 20
        });
        row.add(view);
        ```
  - title: Row Swipe Gestures
    example: |
        Create a table of rows. When a row is swiped, output its ID to the log.

        ``` js
        var tableData = [];

        var win = Ti.UI.createWindow({ backgroundColor: 'white' });

        var table = Ti.UI.createTableView({ objName: 'table' });

        for (var i = 0; i <= 20; i++){
          var row = Ti.UI.createTableViewRow({
            className: 'row',
            objName: 'row',
            touchEnabled: true,
            height: 100
          });

          var enabledWrapperView = Ti.UI.createView({
            backgroundColor:'#008FD5',
            objName: 'enabledWrapperView',
            rowID: i,
            width: Ti.UI.FILL, height: '100%'
          });

          var disabledWrapperView = Ti.UI.createView({
            backgroundColor:'#A2E0FF',
            objName: 'disabledWrapperView',
            touchEnabled: false,
            width: 300, height: '80%'
          });
          enabledWrapperView.add(disabledWrapperView);

          var label = Ti.UI.createLabel({
            backgroundColor:'#313F48',
            color: 'white',
            objName: 'label',
            text: i,
            touchEnabled: false,
            left: 0,
            width: 200
          });
          disabledWrapperView.add(label);

          row.add(enabledWrapperView);
          tableData.push(row);
        }

        table.data = tableData;

        table.addEventListener('swipe', function(e){
          if (e.source && e.source.objName !== 'table'){
            Ti.API.info('Row swiped: ' + e.source);
            Ti.API.info('Row swiped: ' + e.source.objName);
            Ti.API.info('Row ID : ' + e.source.rowID);
          }
        });

        win.add(table);
        win.open();
        ```

  - title: Alloy XML Markup
    example: |
        Previous simple table view row example as an Alloy view.

        ``` xml
        <Alloy>
            <TableViewRow id="row">
                <View id="view" backgroundColor="red" width="20" height="20"/>
            </TableViewRow>
        </Alloy>
        ```
