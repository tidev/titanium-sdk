---
name: Titanium.UI.Android.ProgressIndicator
summary: A progress dialog or a horizontal progress bar in the title of the window.

description:  |
    A progress indicator can be used to show the progress of an operation in the UI to let the
    user know that some action is taking place. It is used to indicate an ongoing activity of
    determinate or indeterminate length.

    Use the <Titanium.UI.Android.createProgressIndicator> method or **`<ProgressIndicator>`** Alloy
    element to create a progress indicator.

    A progress indicator can be either a progress dialog or a horizontal progress bar in the title
    of the window. The progress dialog is a modal dialog that blocks the UI. See also:
    <Titanium.UI.Android.PROGRESS_INDICATOR_DIALOG>,
    <Titanium.UI.Android.PROGRESS_INDICATOR_STATUS_BAR>.

    **NOTE:** <Titanium.UI.Android.PROGRESS_INDICATOR_STATUS_BAR> does not work anymore on devices
    running Android 4.4+ since the underlying API was deprecated and removed by Google. See
    [TIMOB-27312](https://jira.appcelerator.org/browse/TIMOB-27312) for more details.

    Calling <Titanium.UI.Android.ProgressIndicator.show> displays the indicator,
    and calling <Titanium.UI.Android.ProgressIndicator.hide> removes it.
extends: Titanium.UI.View
since: "3.0.0"
platforms: [android]
excludes:
    events: [click, dblclick, doubletap, focus, keypressed, longclick, longpress, pinch, postlayout,
             singletap, swipe, touchcancel, touchend, touchmove, touchstart, twofingertap]
    methods: [add, animate, convertPointToView, remove, removeAllChildren, toImage]
    properties: [accessibilityHidden, accessibilityHint, accessibilityLabel, accessibilityValue,
                 anchorPoint, animatedCenter, backgroundColor, backgroundDisabledColor,
                 backgroundDisabledImage, backgroundFocusedColor, backgroundFocusedImage, backgroundGradient,
                 backgroundImage, backgroundLeftCap, backgroundRepeat, backgroundSelectedColor,
                 backgroundSelectedImage, backgroundTopCap, borderColor, borderRadius, borderWidth, bottom,center,
                 children, clipMode, focusable, height, horizontalWrap, keepScreenOn, layout, left, opacity,overrideCurrentAnimation,
                 pullBackgroundColor, rect, right, size, softKeyboardOnFocus, tintColor, top, touchEnabled, transform,
                 viewShadowColor, viewShadowOffset, viewShadowRadius, visible, width, zIndex]
methods:
  - name: hide
    summary: Hides the progress indicator and stops the animation.

  - name: show
    summary: Shows the progress indicator and starts the animation.

properties:
  - name: cancelable
    summary: |
        When `true` allows the user to cancel the progress dialog by pressing the BACK button.
    type: Boolean

  - name: canceledOnTouchOutside
    summary: |
        When `cancelable` is set to `true` and this is set to `true`, the dialog is canceled when touched outside the window's bounds.
    type: Boolean
    default: false
    since: "3.6.0"

  - name: message
    summary: Message text.
    type: String

  - name: messageid
    summary: Key identifying a string in the locale file to use for the message text.
    description: Only one of `message` or `messageid` should be specified.
    type: String

  - name: min
    summary: Minimum value of the progress bar.
    type: Number

  - name: max
    summary: Maximum value of the progress bar.
    type: Number

  - name: location
    summary: Location for the progress indicator.
    type: Number
    constants: [ Titanium.UI.Android.PROGRESS_INDICATOR_DIALOG,
                 Titanium.UI.Android.PROGRESS_INDICATOR_STATUS_BAR ]
    default: <Titanium.UI.Android.PROGRESS_INDICATOR_DIALOG>

  - name: type
    summary: Type for the progress indicator.
    type: Number
    constants: [ Titanium.UI.Android.PROGRESS_INDICATOR_INDETERMINANT,
                 Titanium.UI.Android.PROGRESS_INDICATOR_DETERMINANT ]
    default: <Titanium.UI.Android.PROGRESS_INDICATOR_INDETERMINANT>

events:
  - name: cancel
    summary: Fired when the user has canceled the progress indicator dialog.
    description: |
        The user triggers this event by pressing the BACK button when the dialog is visible.
        The dialog will be hidden and this event dispatched.

examples:
  - title: Simple Progress Indicator
    example: |
        Click the button to show a progress indicator while
        some code executes and hide it on completion.

        ``` js
        Ti.UI.backgroundColor = 'white';

        var win = Ti.UI.createWindow({
          backgroundColor: 'blue'
        });

        var button = Ti.UI.createButton({
          title: 'Show Progress Dialog'
        });

        var progressIndicator = Ti.UI.Android.createProgressIndicator({
          message: 'Loading...',
          location: Ti.UI.Android.PROGRESS_INDICATOR_DIALOG,
          type: Ti.UI.Android.PROGRESS_INDICATOR_DETERMINANT,
          cancelable: true,
          min: 0,
          max: 10
        });

        button.addEventListener('click', function (e) {
          progressIndicator.show();
          var value = 0;
          setInterval(function(){
            if (value > 10) {
                return;
            }
            progressIndicator.value = value;
            value ++;
          }, 200);
          // do some work that takes 3 seconds
          // ie. replace the following setTimeout block with your code
          setTimeout(function(){
            progressIndicator.hide();
          }, 3000);
        });

        win.add(button);
        win.open();
        ```

  - title: Alloy XML Markup
    example: |
        Previous example as an Alloy view-controller.

        index.xml:
        ``` xml
        <Alloy>
            <Window backgroundColor="blue">
                <Button id="button" onClick="showIndicator">Show Progress Dialog</Button>

                <ProgressIndicator ns="Ti.UI.Android" platform="android" id="progressIndicator"
                  message="Loading..." min="0" max="10" cancelable="true"
                  location="Ti.UI.Android.PROGRESS_INDICATOR_DIALOG"
                  type="Ti.UI.Android.PROGRESS_INDICATOR_DETERMINANT" />
            </Window>
        </Alloy>
        ```

        index.js:
        ``` js
        function showIndicator(e) {
            $.progressIndicator.show();
            var value = 0;
            setInterval(function(){
                if (value > 10) {
                    return;
                }
                $.progressIndicator.value = value;
                value ++;
            }, 200);
            // do some work that takes 3 seconds
            // ie. replace the following setTimeout block with your code
            setTimeout(function(){
                $.progressIndicator.hide();
            }, 3000);
        }
        $.index.open();
        ```
