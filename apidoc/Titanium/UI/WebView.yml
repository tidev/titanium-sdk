---
name: Titanium.UI.WebView
summary: |
    The web view allows you to open an HTML5 based view which can load either local or remote content.
description: |
    Use the <Titanium.UI.createWebView> method or **`<WebView>`** Alloy element to create a web view.

    Web views are more expensive to create than other native views because of the requirement to
    load the HTML browser into memory.

    The web view content can be any valid web content such as HTML, PDF, SVG or other WebKit supported
    content types.

    #### JavaScript Context in WebViews--Local vs. Remote Content

    JavaScript in the web view executes in its own context.  The web view can interact with this
    content, but most of this functionality is limited to local content.

    **Local Scripts**

    When running local web content
    (that is, content that is included in the application's resources), scripts have
    access to the Titanium namespace. In particular, when running local web content:

    - You can use <Titanium.App.addEventListener> and
      <Titanium.App.fireEvent> to receive and send application-level events.

    - Events can be logged using the <Titanium.API> logging methods.

    **Remote Scripts**

    Scripts downloaded from remote web servers cannot access the Titanium namespace.

    To interact with remote content, wait until the content is loaded, then use the
    [evalJS](Titanium.UI.WebView.evalJS) method to execute a JavaScript expression
    inside the web view and retrieve the value of an expression.

    #### Local JavaScript Files

    During the build process for creating a package, all JavaScript files, that is, any file with a
    '.js' extension, are removed and their content is encrypted and obfuscated into one resource,
    causing these files to not load properly in a WebView if they are loaded externally.

    For JavaScript files referenced in static local HTML files, these JavaScript files are omitted
    from processing and left intact, which means they can be correctly loaded in the WebView.

    For local JavaScript files not referenced in static local HTML files, for example, a
    dynamically-generated HTML file referencing a local JavaScript file,
    rename the file extension of the local JavaScript files to '.jslocal' instead of '.js'.

    The build process for testing your application on the simulator, emulator or device does not
    affect the loading of local JavaScript files.

    #### iOS Platform Implementation Notes

    On the iOS platform, the native web view handles scrolling and other related touch
    events internally. If you add event listeners on the web view **or its parent views**
    for any of the standard touch events (`touchstart`, `click`, and so on), these events
    do not reach the native web view, and the user will not be able to scroll, zoom, click
    on links, and so on. To prevent this default behavior, set
    [willHandleTouches](Titanium.UI.WebView.willHandleTouches) to `false`.

    In other words, you can have either Titanium-style events against the
    web view instance, or internal JavaScript events in the DOM, but not both.

    #### Android Platform Implementation Notes

    **Android 4.4 and Later Support**

    Starting with Android 4.4 (API Level 19), the WebView component is based off of Chromium,
    introducing a number of changes to its rendering engine.  Web content may look or behave
    differently depending on the Android version.  The WebView does not
    have full feature parity with Chrome for Android.

    By default, the Chromium WebView uses hardware acceleration, which may cause content to
    fail to render. If the WebView fails to render the content, the web view will clear
    itself, displaying only the default background color. The following log messages will be
    displayed in the console:

    ```
    [WARN] :   AwContents: nativeOnDraw failed; clearing to background color.
    [INFO] :   chromium: [INFO:async_pixel_transfer_manager_android.cc(56)]
    ```

    To workaround this issue, you can enable software rendering by setting the WebView's
    [borderRadius](Titanium.UI.WebView.borderRadius) property to a value greater than zero.

    If you are developing local HTML content and size your elements using percentages, the WebView may
    not calculate the sizes correctly when hardware acceleration is enabled, resulting in the same
    behavior previously mentioned.

    To workaround this issue, you can use the previously mentioned workaround to enable software
    rendering, use absolute size values or use the
    [onresize](https://developer.mozilla.org/en-US/docs/Web/API/Window.onresize) event to set the
    heights of the components.  For example, if you have a div element with an id set to `component`
    that needs to use the entire web view, the following callback resizes the content to use the
    full height of the web view:

    ``` js
    window.onresize= function(){
        document.getElementById("component").style.height = window.innerHeight + 'px';
    };
    ```

    For more information, see the following topics:

      * [Android Developers: Migrating to WebView in Android 4.4](https://developer.android.com/guide/webapps/migrating.html)
      * [Google Chrome: WebView for Android](https://developer.chrome.com/multidevice/webview/overview)

    **Plugin Support**

    The Android web view supports native plugins.

    To use plugin content, you must set the [pluginState](Titanium.UI.WebView.pluginState) property
    to either [WEBVIEW_PLUGINS_ON](Titanium.UI.Android.WEBVIEW_PLUGINS_ON) or
    [WEBVIEW_PLUGINS_ON_DEMAND](Titanium.UI.Android.WEBVIEW_PLUGINS_ON_DEMAND).

    You must also call [pause](Titanium.UI.WebView.pause) when the current activity is
    paused, to prevent plugin content from continuing to run in the background. Call
    [resume](Titanium.UI.WebView.resume) when the current activity is resumed. You can
    do this by adding listeners for the [Activity.pause](Titanium.Android.Activity.pause)
    and [Activity.resume](Titanium.Android.Activity.resume) events.

    **Accessing Cookies**

    On Android, the web view uses the system cookie store which does not share cookies with the
    <Titanium.Network.HTTPClient> cookie store. Developers can manage their cookies for both
    cookie stores using the methods <Titanium.Network.addHTTPCookie>, <Titanium.Network.addSystemCookie>,
    <Titanium.Network.getHTTPCookies>, <Titanium.Network.getHTTPCookiesForDomain>, <Titanium.Network.getSystemCookies>,
    <Titanium.Network.removeHTTPCookie>, <Titanium.Network.removeHTTPCookiesForDomain>, <Titanium.Network.removeAllHTTPCookies>,
    <Titanium.Network.removeSystemCookie>, <Titanium.Network.removeAllSystemCookies>.
    
    **WKWebView**
    
    With Titanium SDK 8.0.0, we now use WKWebView to implement Ti.UI.WebView (as Apple has deprecated UIWebView).
    WKWebView has few restriction specially with local file accessing. For supporting custom-fonts with WKWebView 
    a little modification is required in the HTML files:
    
    ``` html
    <style>
      @font-face
        {
          font-family: 'Lato-Regular';
          src: url('fonts/Lato-Regular.ttf');
        }
    </style>
    ```

    To have a WKWebView scale the page the same way as UIWebView, add the following meta tag to the HTML header:

    ``` html
    <html>
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
      </head>
    </html>
    ```

    ### Ti.UI.SIZE and WebViews

    With Titanium 8.0.0+, <Titanium.UI.SIZE> does not work for WebViews. We recommend to give a **fixed height** 
    to <Titanium.UI.WebView> (as noted in [TIDOC-3355](https://jira.appcelerator.org/browse/TIDOC-3355)).
    
    As a workaround you can try to get the `document.body.scrollHeight` inside <Titanium.UI.WebView.load> event 
    of webview and set the height to webview. See following example.

    ``` js
    var win = Ti.UI.createWindow({
      backgroundColor: 'white';
    });

    var verticalView = Ti.UI.createView({layout: 'vertical', width: "100%", height: "100%"});

    verticalView.add(Ti.UI.createLabel({text: 'Label 1', top: 30, width: Ti.UI.SIZE, height: Ti.UI.SIZE}));

    var htmla = "<div style='font-family: Helvetica Neue; font-size:16px'><ul><li>Item 1</li><li>Item 2</li></ul></div>";
    var html = "<!DOCTYPE html>";
  
    html += "<html><head><meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0'><style type='text/css'>html {-webkit-text-size-adjust: none;}</style><script type='text/javascript'>document.ontouchmove = function(event){event.preventDefault();}</script></head><body style='overflow: hidden'>";
    html += htmla;
    html += "</body></html>";
  
    var webview = Ti.UI.createWebView({left: '14dp', right: '14dp', top: '7dp', height: Ti.UI.SIZE, html: html, backgroundColor: "yellow"});
  
    verticalView.add(webview);

    verticalView.add(Ti.UI.createLabel({text: 'Label 2', top: 30, width: Ti.UI.SIZE, height: Ti.UI.SIZE}));

    win.add(verticalView);

    win.open();

    webview.addEventListener('load', function(e) {
      var result = webview.evalJSSync('document.body.scrollHeight');
      Ti.API.info('webview height: ' + result);
      webview.height = result;
    });
    ``` 
    
    #### For More Information

    See [Integrating Web
    Content](https://docs.appcelerator.com/platform/latest/#!/guide/Integrating_Web_Content)
    in the Titanium Mobile Guides for more information on using web views, including use
    cases, more code examples, and best practices for web view content.
extends: Titanium.UI.View
excludes:
    methods: [ add, remove, removeAllChildren, replaceAt ]
    properties: [children]
since: "0.8"
methods:
  - name: setHtml
    summary: Sets the value of [html](Titanium.UI.WebView.html) property.
    description: |
      The `options` parameter can be used to specify two options that affect
      the WebView main content presentation:

      *  `baseURL`. Sets the URL that the web content's paths will be relative to.
      *  `mimeType`. Sets the MIME type for the content. Defaults to "text/html" if not specified.

      For example:

      ``` js
      setHtml('<html><body>Hello, <a href="/documentation">Titanium</a>!</body></html>',
              { baseURL: 'https://developer.appcelerator.com/' });
      ```
    parameters:
      - name: html
        summary: New HTML to display in the web view.
        type: String

      - name: options
        summary: Optional parameters for the content. Only used by iOS and Android.
        optional: true
        type: setHtmlOptions
    since: {android: "8.1.0", iphone: "2.0.0", ipad: "2.0.0", macos: "9.2.0"}
    platforms: [android, iphone, ipad, macos]

  - name: canGoBack
    summary: Returns `true` if the web view can go back in its history list.
    returns:
        type: Boolean

  - name: canGoForward
    summary: Returns `true` if the web view can go forward in its history list.
    returns:
        type: Boolean

  - name: evalJS
    summary: |
        Evaluates a JavaScript expression inside the context of the web view and
        optionally, returns a result. If a callback function is passed in as second argument,
        the evaluation will take place asynchronously and the the callback function will be called with the result.
    description: |
        The JavaScript expression must be passed in as a string. If you are passing in any objects,
        you must serialize them to strings using [stringify](Global).

        The `evalJS` method returns a string representing the value of the expression. For
        example, the following call retrieves the `document.title` element from the
        document currently loaded into the web view.

        ``` js
        var docTitle = myWebView.evalJS('document.title');
        ```

        It is not necessary to include `return` in the JavaScript. In fact, the following
        call returns the empty string:

        ``` js
        myWebView.evalJS('return document.title');
        ```

        The `evalJS` variant with a second callback argument executes asynchronously.

        ``` js
        myWebView.evalJS('document.title', function (result) {
          // Manipulate the result here
        });
        ```
    returns:
        type: String
        summary: Result of the evaluation. May be null if the asynchronous variant of this method is called.

    parameters:
      - name: code
        summary: JavaScript code as a string. The code will be evaluated inside the web view context.
        type: String

      - name: callback
        summary: Optional callback function for the result. Required on Windows, optional on iOS/Android.
        optional: true
        type: Callback<String>

  - name: goBack
    summary: Goes back one entry in the web view's history list, to the previous page.

  - name: goForward
    summary: Goes forward one entry in this web view's history list, if possible.

  - name: pause
    summary: Pauses native webview plugins.
    description: |
        Add a `pause` handler to your <Titanium.Android.Activity> and invoke
        this method to pause native plugins.

        Call [resume](Titanium.UI.WebView.resume) to unpause native plugins.
    since: "1.8.0"
    platforms: [android]

  - name: reload
    summary: Reloads the current webpage.

  - name: repaint
    summary: Forces the web view to repaint its contents.
    platforms: [iphone, ipad, macos]

  - name: release
    summary: Releases memory when the web view is no longer needed.
    since: "2.0.0"
    platforms: [android]

  - name: resume
    summary: Resume native webview plugins.
    description: |
        Used to unpause native plugins after calling [pause](Titanium.UI.WebView.pause).

        Add a `resume` handler to your <Titanium.Android.Activity> and invoke
        this method to resume native plugins.
    since: "1.8.0"
    platforms: [android]

  - name: setBasicAuthentication
    summary: |
        Sets the basic authentication for this web view to use on subsequent URL requests.
    description: |
        The persistence property of this method is only supported on iOS and Titanium SDK 8.0.0+. 
        It is ignored on other platforms and versions.
    platforms: [android, iphone, ipad, macos]
    parameters:
      - name: username
        summary: Basic auth user name.
        type: String

      - name: password
        summary: Basic auth password.
        type: String

      - name: persistence
        summary: |
            Constants specify how long the credential will be kept. 
            This is only supported on iOS and Titanium SDK 8.0.0+.
        type: Number
        constants: Titanium.UI.iOS.CREDENTIAL_PERSISTENCE_*

  - name: stopLoading
    summary: Stops loading a currently loading page.

  - name: startListeningToProperties
    summary: Add native properties for observing for change. 
    description: |
        Some common properties are title, URL, estimatedProgress etc. 
        See native KVO capability at https://developer.apple.com/documentation/webkit/wkwebview.
        See example section "Listening to Web View properties in iOS" for usage.      
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    parameters:
      - name: propertyList
        summary: List of properties for listen.
        type: Array<String>

  - name: stopListeningToProperties
    summary: Remove native properties from observing.
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    parameters:
      - name: propertyList
        summary: List of properties to remove.
        type: Array<String>

  - name: takeSnapshot
    summary: Takes a snapshot of the view's visible viewport.
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    parameters:
      - name: callback
        summary: Function to call upon snapshot captured.
        type: Callback<SnapshotResult>

  - name: addUserScript
    summary: Adds a user script.
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    parameters:
      - name: params
        summary: Properties required to create user script.
        type: UserScriptParams

  - name: removeAllUserScripts
    summary: Removes all associated user scripts.
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}

  - name: addScriptMessageHandler
    summary: Adds a script message handler.
    description: |
        Adding a script message handler with name 'name' causes the JavaScript function 
        window.webkit.messageHandlers.name.postMessage(messageBody) to be defined in all 
        frames in the web view.      
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    parameters:
      - name: handlerName
        summary: |
            The name of the message handler and should not be '_Ti_', 
            as titanium is using it for internal usage.
        type: String

  - name: removeScriptMessageHandler
    summary: Removes a script message handler.
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    parameters:
      - name: name
        summary: The name of the message handler.
        type: String

  - name: backForwardList
    summary: |
        An object which maintains a list of visited pages used to go back and forward to the most recent page.     
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    returns:
        type: BackForwardList

  - name: createPDF
    summary: |
        Create a PDF document representation from the web page currently displayed in the WebView.
    description: |
        If the data is written to a file the resulting file is a valid PDF document.
    platforms: [iphone, ipad]
    since: "9.2.0"
    osver: {ios: {min: "14.0"}}
    parameters:
      - name: callback
        summary: Function to call upon pdf creation.
        type: Callback<DataCreationResult>

  - name: createWebArchive
    summary: Create WebKit web archive data representing the current web content of the WebView.
    description: |
        WebKit web archive data represents a snapshot of web content. It can be loaded into a WebView directly, 
        and saved to a file for later use.
    platforms: [iphone, ipad]
    since: "9.2.0"
    osver: {ios: {min: "14.0"}}
    parameters:
      - name: callback
        summary: Function to call upon web archive creation.
        type: Callback<DataCreationResult>

  - name: findString
    summary: Searches the page contents for the given string.
    platforms: [iphone, ipad]
    since: "9.2.0"
    osver: {ios: {min: "14.0"}}
    parameters:
      - name: searchString
        summary: The string to search for.
        type: String
      - name: options
        summary: Options for search.
        type: StringSearchOptions
        optional: true
      - name: callback
        summary: Function to call upon search finished.
        type: Callback<SearchResult>
events:
  - name: beforeload
    summary: Fired before the web view starts loading its content.
    description: |
        This event may fire multiple times depending on the content or URL.  For example, if you set
        the URL of the web view to a URL that redirects to another URL, such as an HTTP URL
        redirecting to an HTTPS URL, this event is fired for the original URL and the redirect URL.

        This event does not fire when navigating remote web pages.
    properties:
      - name: url
        type: String
        summary: URL of the web document being loaded.

      - name: navigationType
        summary: Constant indicating the user's action.
        type: Number
        constants: Titanium.UI.iOS.WEBVIEW_NAVIGATIONTYPE_*
        platforms: [ipad, iphone, macos]

      - name: isMainFrame
        summary: Indicate if the event was generated from the main page or an iframe.
        type: Boolean
        platforms: [ipad, iphone, macos]
        since: {iphone: "9.0.0", ipad: "9.0.0", macos: "9.2.0"}

  - name: error
    summary: Fired when the web view cannot load the content.
    description: |
        The `errorCode` value refers to one of the <Titanium.UI> URL_ERROR constants or, if it does not
        match one of those constants, it refers to a platform-specific constant. The platform-specific
        values are underlying [iOS NSURLError*](https://developer.apple.com/documentation/foundation/1508628-url_loading_system_error_codes)
        or [Android WebViewClient ERROR_*](https://developer.android.com/reference/android/webkit/WebViewClient.html) constants.
    properties:
      - name: success
        summary: Indicates a successful operation. Returns `false`.
        type: Boolean

      - name: error
        summary: Error message, if any returned. May be undefined.
        type: String

      - name: code
        summary: |
            Error code.
            If the error was generated by the operating system, that system's error value
            is used. Otherwise, this value will be -1.
        type: Number
        constants: Titanium.UI.URL_ERROR_*

      - name: url
        summary: URL of the web document.
        type: String
        platforms: [iphone, ipad, android, macos]
      - name: message
        summary: Error message. Use error instead.
        type: String
        platforms: [iphone, ipad, android]
        deprecated:
            since: "3.1.0"
            removed: "9.0.0"
            notes: Use the `error` property instead. Removed on ios in 8.0.0. Removed on android in 9.0.0.
      - name: errorCode
        summary: A constant or underlying platform specific error code. Use code instead.
        type: Number
        constants: Titanium.UI.URL_ERROR_*
        platforms: [iphone, ipad, android]
        deprecated:
            since: "3.1.0"
            removed: "9.0.0"
            notes: Use the `code` property instead. Removed on ios in 8.0.0. Removed on android in 9.0.0.

  - name: load
    summary: Fired when the web view content is loaded.
    properties:
      - name: url
        type: String
        summary: URL of the web document.

  - name: onLoadResource
    summary: Fired when loading resource.
    description: |
        Android only. Notify the host application that the WebView will load the resource specified by the given url.
    platforms: [android]
    since: "3.6.0"
    properties:
      - name: url
        summary: The url of the resource that will load.
        type: String

  - name: sslerror
    summary: Fired when an SSL error occurred.
    description: |
        This is a synchronous event and the developer can change the value of `ignoreSslError`
        to control if the request should proceed or fail.
    platforms: [android, iphone, ipad, macos]
    since: {android: "3.3.0", iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    properties:
      - name: code
        summary: SSL error code.
        type: Number
        platforms: [android]

  - name: onStopBlacklistedUrl
    summary: Fired when a blacklisted URL is stopped.
    platforms: [android]
    since: 5.4.0
    properties:
      - name: url
        summary: The URL of the web document that is stopped.
        type: String
    deprecated:
        since: "6.1.0"
        removed: "9.0.0"
        notes: Use the  cross-platform `blacklisturl` event instead.

  - name: blacklisturl
    summary: Fired when a blacklisted URL is stopped.
    platforms: [android, iphone, ipad, macos]
    since: {android: "6.1.0", iphone: "6.1.0", ipad: "6.1.0", macos: "9.2.0"}
    properties:
      - name: url
        summary: The URL of the web document that is stopped.
        type: String
    deprecated:
        since: "9.2.0"
        notes: Use the `blockedurl` event instead.

  - name: blockedurl
    summary: Fired when a URL has been blocked from loading.
    description: |
        This event is fired when the end-user attempts to navigate to a website matching a URL in
        the <Titanium.UI.WebView.blockedURLs> property.
    platforms: [android, iphone, ipad, macos]
    since: "9.2.0"
    properties:
      - name: url
        summary: The URL of the web document that has been blocked from loading.
        type: String

  - name: message
    summary: Fired when a script message is received from a webpage.
    description: |
        This event get fired when you have added a message handler using <Titanium.UI.WebView.addScriptMessageHandler> 
        and the webpage sends a message to it.
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    properties:
      - name: url
        summary: URL of the web document being loaded.
        type: String
      - name: body
        summary: The body of the message sent from webview.
        type: String
      - name: name
        summary: The name of the message handler to which the message is sent.
        type: String
      - name: isMainFrame
        summary: |
            A Boolean value indicating whether the frame is the web site's main frame or a subframe.
        type: Boolean

  - name: progress
    summary: Fired when webpage download progresses.
    description: |
        Provides a normalized value between 0.0 and 1.0, where 0.0 indicates nothing was downloaded and 
        1.0 means the page and all of its resources has finished downloading.
    platforms: [android, ipad, iphone, macos]
    since: {android: "9.1.0", iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    properties:
      - name: value
        summary: An estimate of what fraction of the current navigation has been loaded.
        type: Number
      - name: url
        summary: URL of the web document being loaded.
        type: String

  - name: redirect
    summary: Fired when a web view receives a server redirect.
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    properties:
      - name: title
        summary: Page title of webpage.
        type: String
      - name: url
        summary: URL of the web document being loaded.
        type: String

  - name: handleurl
    summary: Fired when <Titanium.UI.WebView.allowedURLSchemes> contains scheme of opening url.
    description: |
        See the example section "Usage of allowedURLSchemes and handleurl in iOS".
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    properties:
      - name: handler
        summary: Handler <Titanium.UI.iOS.WebViewDecisionHandler>.
        type: String
      - name: url
        summary: URL of the web document being loaded.
        type: String

properties:
  - name: allowsLinkPreview
    summary: |
        A Boolean value that determines whether pressing on a link displays a preview of the
        destination for the link.
    description: |
        This property is available on devices that support 3D Touch. Default value is `false`.

        If you set this value to `true` for a web view, users (with devices that support 3D Touch)
        can preview link destinations, and can preview detected data such as addresses, by pressing on links.
        Such previews are known to users as peeks. If a user presses deeper, the preview navigates (or pops,
        in user terminology) to the destination. Because pop navigation switches the user from your app to
        Safari, it is opt-in, by way of this property, rather default behavior for this class.
    type: Boolean
    default: false
    osver: {ios: {min: "9.0"}}
    platforms: [iphone, ipad, macos]
    since: {iphone: "5.4.0", ipad: "5.4.0", macos: "9.2.0"}

  - name: blacklistedURLs
    summary: |
        An array of url strings to blacklist.
    description: |
        An array of url strings to blacklist. This will stop the webview from going to urls listed in
        the blacklist. Note, this only applies in the links clicked inside the webview. The first website
        that is loaded will not be stopped even if it matches the blacklist.
    type: Array<String>
    since: {android: "5.4.0", iphone: "6.1.0", ipad: "6.1.0", macos: "9.2.0"}
    platforms: [android, iphone, ipad, macos]
    availability: creation
    deprecated:
        since: "9.2.0"
        notes: Use the <Titanium.UI.WebView.blockedURLs> property instead.

  - name: blockedURLs
    summary: |
        An array of url strings to be blocked.
    description: |
        An array of url strings to be blocked from loading. This will stop the webview from going to urls
        listed in this array. Note that this only applies to the links tapped on by the end-user.
        The first website that is loaded will not be stopped, even if it is listed in the blocklist.
    type: Array<String>
    since: "9.2.0"
    platforms: [android, iphone, ipad, macos]
    availability: creation

  - name: data
    summary: Web content to load.
    description: |
        Android only supports loading data from a `Blob`, not a `File`.

        See also: [url](Titanium.UI.WebView.url) and [html](Titanium.UI.WebView.html).
    type: [Titanium.Blob, Titanium.Filesystem.File]

  - name: disableBounce
    summary: |
        Determines whether the view will bounce when scrolling to the edge of the scrollable region.
    description: |
        Set to `true` to disable the bounce effect.
    type: Boolean
    default: false
    platforms: [iphone, ipad, macos]

  - name: disableContextMenu
    summary: Determines whether or not the webview should not be able to display the context menu.
    description: |
        Set to `true` to disable the context menu. Note that disabling the context menu will
        also disable the text selection on iOS.
    type: Boolean
    default: false
    platforms: [iphone, ipad, android, macos]
    since: {android: "6.1.0", iphone: "6.1.0", ipad: "6.1.0", macos: "9.2.0"}

  - name: enableJavascriptInterface
    summary: Enable adding javascript interfaces internally to webview prior to JELLY_BEAN_MR1 (Android 4.2)
    description: |
        This property is introduced to prevent a security issue with older devices (< JELLY_BEAN_MR1)
    type: Boolean
    platforms: [android]
    since: "3.6.0"
    availability: creation
    default: true

  - name: handlePlatformUrl
    summary: Lets the webview handle platform supported urls
    description: |
        By default any urls that are not handled by the Titanium platform but can be handled by the
        shared application are automatically sent to the shared application and the webview does not
        open these. When this property is set to `true` the webview will attempt to handle these
        urls and they will not be sent to the shared application. An example is links to telephone
        numbers.
    type: Boolean
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.3.0", ipad: "3.3.0", macos: "9.2.0"}
    default: undefined. Behaves as if false
    deprecated:
        since: "8.0.0"
        notes: |
            This property in no more supported in Titanium SDK 8.0.0+. Use property <Titanium.UI.WebView.allowedURLSchemes> 
            in conjuction with <Titanium.UI.WebView.handleurl>. See the example section 
            "Usage of allowedURLSchemes and handleurl in iOS".

  - name: configuration
    summary: The configuration for the new web view.
    description: |
        This property can only be set when creating the webview and will be ignored when set afterwards. 
    type: Titanium.UI.iOS.WebViewConfiguration
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}

  - name: allowedURLSchemes
    summary: List of allowed URL schemes for the web view.
    description: |
        See the example section "Usage of allowedURLSchemes and handleurl in iOS". 
    type: Array<String>
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}

  - name: hideLoadIndicator
    summary: Hides activity indicator when loading remote URL.
    type: Boolean
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.0.0", ipad: "3.0.0", macos: "9.2.0"}
    default: false

  - name: assetsDirectory
    summary: Path of file or directory to allow read access by the WebView.
    description: |
        Use this property to change the resources the web view has access to when loading the content of a local file.
        By default the web view only has access to files inside the same directory as the loaded file. To reference
        resources from other directories (e.g. a parent directory) change this property accordingly.

        If assetsDirectory references a single file, only that file may be loaded. If assetsDirectory references a
        directory, files inside that directory may be loaded.

        This property needs to be set before [url](Titanium.UI.WebView.url) is assigned to a local file.
    type: String
    platforms: [iphone, ipad, macos]
    since: {iphone: "9.0.0", ipad: "9.0.0", macos: "9.2.0"}

  - name: html
    summary: HTML content of this web view.
    description: |
        See [setHtml](Titanium.UI.WebView.setHtml) for additional parameters that can be
        specified when setting HTML content.

        The web view's content can also be set using the [data](Titanium.UI.WebView.data) or
        [url](Titanium.UI.WebView.url) properties.

        See also: [data](Titanium.UI.WebView.data) and [url](Titanium.UI.WebView.url).
    type: String

  - name: keyboardDisplayRequiresUserAction
    summary: A Boolean value indicating whether web content can programmatically display the keyboard.
    description: |
        When this property is set to true, the user must explicitly tap the elements in the web view
        to display the keyboard (or other relevant input view) for that element. When set to false,
        a focus event on an element causes the input view to be displayed and associated with
        that element automatically.
    type: Boolean
    default: undefined but behaves as true
    platforms: [iphone, ipad, macos]
    since: {iphone: "6.1.0", ipad: "6.1.0", macos: "9.2.0"}

  - name: ignoreSslError
    summary: Controls whether to ignore invalid SSL certificates or not.
    description: |
        If set to `true`, the web page loads despite having an invalid SSL certificate.
        If set to `false`, a web page with an invalid SSL certificate does not load.

        iOS Note: As soon as you set this property to `true`, iOS will cache the response
        for the lifetime of the current web view.
    type: Boolean
    default: undefined but behaves as false
    since: {android: "3.0.0", iphone: "6.0.2", ipad: "6.0.2", macos: "9.2.0"}
    platforms: [android, iphone, ipad, macos]

  - name: loading
    summary: Indicates if the webview is loading content.
    type: Boolean
    platforms: [iphone, ipad, macos]

  - name: onCreateWindow
    summary: |
        Callback function called when there is a request for the application to create a new window
        to host new content.
    description: |
        For example, the request is triggered if a web page wants to open a URL in a new
        window.  By default, Titanium will open a new full-size window to host the new content.
        Use the callback to override the default behavior.

        The callback needs to create a new WebView object to host the content in and add the WebView to the
        application UI. The callback must return either a WebView object to host the content in or `null` if
        it does not wish to handle the request.

        The callback is passed a dictionary with two boolean properties:

          * `isDialog`: set to true if the content should be opened in a dialog window rather than a
            full-size window.
          * `isUserGesture`: set to true if the user initiated the request with a gesture, such as
            tapping a link.

        The following example opens new web content in a new tab rather than a new window:

        ``` js
        var tabGroup = Ti.UI.createTabGroup(),
            win = Ti.UI.createWindow(),
            tab = Ti.UI.createTab({window: win, title: 'Start Page'}),
            webview = Ti.UI.createWebView({ url:'index.html'});

        webview.onCreateWindow = function(e) {
            var newWin = Ti.UI.createWindow(),
                newWebView = Ti.UI.createWebView(),
                newTab = Ti.UI.createTab({window: newWin, title: 'New Page'});
            newWin.add(newWebView);
            tabGroup.addTab(newTab);
            return newWebView;
        };

        win.add(webview);
        tabGroup.addTab(tab);
        tabGroup.open();
        ```
    type: Callback<Object>
    platforms: [android]
    since: "2.1.0"

  - name: onlink
    summary: Fired before navigating to a link.
    description: |
        The callback will be called before navigating to the link. The Boolean return value of the
        callback will determine if the link will be navigated or discarded.
    type: Callback<OnLinkURLResponse>
    platforms: [iphone, ipad, android, macos]
    since: {android: "7.5.0", iphone: "7.5.0", ipad: "7.5.0", macos: "9.2.0"}

  - name: overScrollMode
    summary: Determines the behavior when the user overscrolls the view.
    type: Number
    constants: Titanium.UI.Android.OVER_SCROLL_*
    default: Titanium.UI.Android.OVER_SCROLL_ALWAYS
    platforms: [android]
    since: "3.1.0"

  - name: cacheMode
    summary: Determines how a cache is used in this web view.
    type: Number
    constants: Titanium.UI.Android.WEBVIEW_LOAD_*
    default: <Titanium.UI.Android.WEBVIEW_LOAD_DEFAULT>
    platforms: [android]
    since: "3.2.0"

  - name: pluginState
    summary: Determines how to treat content that requires plugins in this web view.
    description: |
        This setting affects the loading of content that requires web plugins.

        To enable hardware acceleration, add the `tool-api-level` and
        `manifest` elements shown below inside the `android` element in your `tiapp.xml` file.

        ``` xml
        <android xmlns:android="http://schemas.android.com/apk/res/android">
            <tool-api-level>11</tool-api-level>
            <manifest>
                <application android:hardwareAccelerated="true"/>
            </manifest>
        </android>
        ```

        See Android documentation for
        [WebSettings.PluginState](https://developer.android.com/reference/android/webkit/WebSettings.PluginState.html).

        This property only works on Android devices at API Level 8 or greater.
    type: Number
    constants: Titanium.UI.Android.WEBVIEW_PLUGINS_*
    platforms: [android]
    since: "1.8.0"
    osver: {android: {min: "2.2"}}
    default: <Titanium.UI.Android.WEBVIEW_PLUGINS_OFF>

  - name: scrollsToTop
    summary: Controls whether the scroll-to-top gesture is effective.
    description: |
        The scroll-to-top gesture is a tap on the status bar; The default value of this property is true.
        This gesture works when you have a single visible web view.
        If there are multiple table views, web views, text areas, and/or scroll views visible,
        you will need to disable (set to false) on the above views you DON'T want this
        behaviour on. The remaining view will then respond to scroll-to-top gesture.
    type: Boolean
    default: true
    platforms: [iphone, ipad, macos]
    since: {iphone: "2.0.0", ipad: "2.0.0", macos: "9.2.0"}

  - name: enableZoomControls
    summary: If `true`, zoom controls are enabled.
    type: Boolean
    platforms: [android]
    since: "1.8.0"
    default: true

  - name: mixedContentMode
    summary: If `true`, allows the loading of insecure resources from a secure origin.
    description: |
        On iOS this functionality can be set in the `<plist>` section of the tiapp.xml
        using the `NSAllowsArbitraryLoads` key as part of the App Transport Security.
        The plist key is enabled by default, allowing arbitrary loads to be processed.
    type: Boolean
    platforms: [android]
    since: "7.5.0"
    default: false
    availability: creation

  - name: scalesPageToFit
    summary: If `true`, scale contents to fit the web view.
    description: |
        On iOS, setting this to `true` sets the initial zoom level to show the entire
        page, and enables the user to zoom the web view in and out. Setting this to
        `false` prevents the user from zooming the web view.

        On Android, only controls the initial zoom level.
    platforms: [android, iphone, ipad, macos]
    type: Boolean
    default: |
        `false` on iOS. On Android, `false` when content is specified as a local URL,
        `true` for any other kind of content (remote URL, `Blob`, or `File`).

  - name: url
    summary: URL to the web document.
    description: |
        This property changes as the content of the webview changes (such as when the user
        clicks a hyperlink inside the web view).

        See also: [data](Titanium.UI.WebView.data) and [html](Titanium.UI.WebView.html).
    type: String

  - name: userAgent
    summary: The User-Agent header used by the web view when requesting content.
    description: |
        On the iOS platform, this is not per-webview. Once you have set this property for a webview
        it will not change for same. But while creating new webview it can be changed to new user agent.

        On Android, changing the user agent after the webview has begun loading content may cause
        the webview to reload and fire multiple `load` or `beforeload` events. Developers should provide the
        user agent value in the creation properties to avoid the reload and multiple events firing.
    type: String
    default: System default user-agent value.
    platforms: [android, iphone, ipad, macos]
    since: {android: "2.0.0", iphone: "6.1.0", ipad: "6.1.0", macos: "9.2.0"}

  - name: willHandleTouches
    summary: Explicitly specifies if this web view handles touches.
    description: |
        On the iOS platform, if this web view **or any of its parent views** have touch
        listeners, the Titanium component intercepts **all** touch events. This
        prevents the user from interacting with the native web view components.

        Set this flag to `false` to disable the default behavior. Setting this property to `false`
        allows the user to interact with the native web view and still honor any `touch` events sent to
        its parents. No `touch` events will be generated when the user interacts with the web view itself.

        Set this flag to `true` if you want to receive touch events from the web view and
        the user does not need to interact with the web content directly.

        This flag is `true` by default to retain backwards compatibility with previous
        behavior.
    type: Boolean
    platforms: [iphone, ipad, macos]
    since: {iphone: "1.8.2", ipad: "1.8.2", macos: "9.2.0"}
    default: true

  - name: lightTouchEnabled
    summary: Enables using light touches to make a selection and activate mouseovers.
    description: |
        Setting this property solves the problem of web links with specific length not triggering a link click in Android.

        This is only an Android specific property and has no effect starting from API level 18.

        This flag is `true` by default to retain backwards compatibility with previous
        behavior.
    type: Boolean
    platforms: [android]
    since: "3.2.0"
    default: true

  - name: requestHeaders
    summary: Sets extra request headers for this web view to use on subsequent URL requests.
    description: |
        Setting this property allows you to set custom headers to the URL requests.
        The parameter will be key-value pairs: `{"Custom-field1":"value1", "Custom-field2":"value2"}`

        On Android you should avoid Calling `setRequestHeaders()` right after `createWebView()`. Use the `requestHeaders` property
        inside `createWebView()` or put it inside the window `open` event.
    type: Dictionary
    platforms: [android, iphone, ipad, macos]
    since: {android: "6.1.0", iphone: "6.1.0", ipad: "6.1.0", macos: "9.2.0"}

  - name: zoomLevel
    summary: Manage the zoom-level of the current page.
    type: Number
    default: undefined. Behaves as no zoom applied.
    platforms: [android, iphone, ipad, macos]
    since: {android: "7.3.0", iphone: "7.3.0", ipad: "7.3.0", macos: "9.2.0"}

  - name: allowsBackForwardNavigationGestures
    summary: |
        A Boolean value indicating whether horizontal swipe gestures will trigger back-forward list navigations.
    type: Boolean
    default: false
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}

  - name: title
    summary: Returns page title of webpage.
    type: String
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    permission: read-only

  - name: progress
    summary: An estimate of what fraction of the current navigation has been loaded.
    description: |
        This value ranges from 0.0 to 1.0 based on the total number of bytes expected 
        to be received, including the main document and all of its potential subresources. 
        After loading completes, the progress remains at 1.0 until a new download starts, 
        at which point progress is reset to 0.0.
    type: Number
    platforms: [android, iphone, ipad, macos]
    since: {android: "9.1.0", iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    permission: read-only

  - name: cachePolicy
    summary: The cache policy for the request.
    type: Number
    constants: Titanium.UI.iOS.CACHE_POLICY_*
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}

  - name: timeout
    summary: The timeout interval for the request, in seconds.
    type: Number
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}

  - name: selectionGranularity
    summary: |
        The level of granularity with which the user can interactively select content in the web view.
    type: Number
    constants: Titanium.UI.iOS.SELECTION_GRANULARITY_*
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    permission: read-only

  - name: secure
    summary: |
        A Boolean value indicating whether all resources on the page have been loaded through 
        securely encrypted connections.
    type: Boolean
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
    permission: read-only

---
name: SnapshotResult
summary: The parameter passed to the <Titanium.UI.WebView.takeSnapshot> callback.
platforms: [iphone, ipad, macos]
since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
properties:
  - name: snapshot
    summary: The snapshot image.
    type: Titanium.Blob
  - name: success
    summary: Indicates if the snapshot taken.
    description: Returns `true` on successful snapshot captured, otherwise `false`.
    type: Boolean
  - name: error
    summary: Error message, if any returned.
    description: May be undefined.
    type: String

---
name: DataCreationResult
summary: The parameter passed to the <Titanium.UI.WebView.createPDF> or <Titanium.UI.WebView.createWebArchive>callback.
platforms: [iphone, ipad]
since: "9.2.0"
properties:
  - name: data
    summary: The created data.
    type: Titanium.Blob
  - name: success
    summary: Indicates if the data creation successful or not.
    description: Returns `true` on successful creation, otherwise `false`.
    type: Boolean
  - name: error
    summary: Error message, if any returned.
    description: May be undefined.
    type: String

---
name: SearchResult
summary: The parameter passed to the <Titanium.UI.WebView.findString>.
platforms: [iphone, ipad]
since: "9.2.0"
properties:
  - name: success
    summary: Indicates if string found or not.
    description: Returns `true` if found, otherwise `false`.
    type: Boolean
  - name: error
    summary: Error message, if any returned.
    description: May be undefined.
    type: String

---
name: StringSearchOptions
summary: |
    The optional options to pass to the <Titanium.UI.WebView.findString>. Pass a
    dictionary with one or more of the following string-keys:
        * `caseSensitive` (Boolean value)
        * `backward` (Boolean value)
        * `wraps` (Boolean value)
properties:
  - name: caseSensitive
    summary: Whether or not the search should be case sensitive.
    type: Boolean
    default: false
    optional: true

  - name: backward
    type: Boolean
    summary: |
        The direction to search from the current selection. The search will respect the writing direction of the document
    default: false
    optional: true

  - name: wraps
    summary: Whether the search should start at the beginning of the document once it reaches the end.
    type: Boolean
    default: true
    optional: true

---
name: BackForwardList
summary: The object returned to the <Titanium.UI.WebView.backForwardList> method.
platforms: [iphone, ipad, macos]
since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
properties:
  - name: currentItem
    summary: The current item.
    type: BackForwardListItem
  - name: backItem
    summary: The item immediately preceding the current item.
    type: BackForwardListItem
  - name: forwardItem
    summary: The item immediately following the current item.
    type: BackForwardListItem
  - name: backList
    summary: The portion of the list preceding the current item.
    description: The items are in the order in which they were originally visited.
    type: Array<BackForwardListItem>
  - name: forwardList
    summary: The portion of the list following the current item.
    description: The items are in the order in which they were originally visited.
    type: Array<BackForwardListItem>

---
name: BackForwardListItem
summary: The object represents a webpage in the back-forward of a web view.
platforms: [iphone, ipad, macos]
since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
properties:
  - name: url
    summary: The URL of the webpage represented by this item.
    type: String
  - name: initialUrl
    summary: The URL of the initial request that created this item.
    type: String
  - name: title
    summary: The title of the webpage represented by this item.
    type: String

examples:
  - title: Basic Web View to External URL
    example: |
        Create a web view to a remote URL and open the window as modal.

        ``` js
        var webview = Titanium.UI.createWebView({url:'http://www.appcelerator.com'});
        var window = Titanium.UI.createWindow();
        window.add(webview);
        window.open({modal:true});
        ```
  - title: Alloy XML Markup
    example: |
        Previous example as an Alloy view.

        ``` xml
        <Alloy>
            <Window id="win" modal="true">
                <WebView id="webview" url="http://www.appcelerator.com" />
            </Window>
        </Alloy>
        ```
  - title: Listening to Web View properties in iOS
    example: |
        Create a web view and listen 'title' property of web view.

        ``` js
        var webview = Ti.UI.createWebView({
            url:'http://www.appcelerator.com'
        });
        webview.startListeningToProperties([ 'title' ]);
        webview.addEventListener('title', function(e) {
            alert('Title is : -' +e.value);
        });
        var window = Ti.UI.createWindow();
        window.add(webview);
        window.open();
        ```
  - title: Usage of allowedURLSchemes and handleurl in iOS
    example: |
        Create a web view and listen 'handleurl' event to open url from Titanium platform.
        
        ``` js
        var webview = Ti.UI.createWebView({
            url: 'https://www.google.com',
            allowedURLSchemes: [ 'https', 'http' ]
        });

        webview.addEventListener('handleurl', function(e) {
            var handler = e.handler;
            Ti.Platform.openURL(e.url);
            handler.invoke(Ti.UI.iOS.ACTION_POLICY_CANCEL); 
        });
        var window = Ti.UI.createWindow();
        window.add(webview);
        window.open();
        ```

---
name: OnLinkURLResponse
summary: An object returned when the <Titanium.UI.WebView.onlink> callback is fired.
platforms: [iphone, ipad, android, macos]
properties:
  - name: url
    summary: The url of the link that should be navigated to.
    type: String

---
name: UserScriptParams
summary: Dictionary of options for the <Titanium.UI.WebView.addUserScript> method.
platforms: [iphone, ipad, macos]
since: {iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}
properties:
  - name: source
    summary: A script that can be injected into a webpage.
    type: String
  - name: injectionTime
    summary: The time when the script should be injected into the webpage.
    type: Number
    constants: Titanium.UI.iOS.INJECTION_TIME_DOCUMENT_*
    default: Titanium.UI.iOS.INJECTION_TIME_DOCUMENT_START
    optional: true
  - name: mainFrameOnly
    summary: |
        A Boolean value indicating whether the script should be injected only into the 
        main frame (true) or into all frames (false).
    type: Boolean
    default: false
    optional: true

---
name: setHtmlOptions
summary: Options used by <Titanium.UI.WebView.setHtml>
properties:
  - name: baseURL
    summary: Sets the URL that the web content's paths will be relative to.
    type: String

  - name: mimeType
    type: String
    summary: Sets the MIME type for the content. Defaults to "text/html" if not specified.
    default: "text/html"
    optional: true
