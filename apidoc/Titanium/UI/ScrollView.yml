---
name: Titanium.UI.ScrollView
summary: A view that contains a horizontally and/or vertically-scrollable region of content.
description: |
    Use the <Titanium.UI.createScrollView> method or **`<ScrollView>`** Alloy element to create a scroll view.

    Views added to the scroll view will be scrolled based on the size of the scrollable region of
    content. If a scrollable region fits within the size of its scroll view, the view will not
    scroll.

    #### Android Platform Notes

    On Android, a scroll view can only scroll in one direction, either vertically or horizontally,
    and not both at the same time. The <Titanium.UI.ScrollView.scrollType> property sets the scroll
    direction explicitly. If the `scrollType` property is not assigned a value, the scroll view
    attempts to determine the scroll direction based on some the following rules:

    * If <Titanium.UI.ScrollView.contentWidth> and <Titanium.UI.ScrollView.width> are both
    set and are equal to each other, or if they are both set
    *and* `showVerticalScrollIndicator` is set to `true`, then the scroll direction is set to
    "vertical".

    * If <Titanium.UI.ScrollView.contentHeight> and <Titanium.UI.ScrollView.height> are
    both set and are equal, or if they are both set and <Titanium.UI.ScrollView.showHorizontalScrollIndicator> is set to
    `true`, then the scroll direction is set to "horizontal".

    Pinching a `ScrollableView` to zoom in and out of content is not supported on Android. On iOS, this action
    is natively supported by the UIScrollView class, but on Android, the native ScrollView class does
    not support this action.
extends: Titanium.UI.View
since: "0.9"

methods:
  - name: scrollTo
    summary: Moves the specified coordinate of the scrollable region into the viewable area.
    parameters:
      - name: x
        summary: X coordinate from the scrollable region's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate from the scrollable region's coordinate system.
        type: Number

      - name: options
        summary: |
            A simple object for specifying the animation properties when scrolling the view (since SDK 6.1.0).
            When set to `{ animated: true }` it will scroll smoothly to the destination.

            Note that the default here is equivalent to passing in `{ animated: true }`
        type: AnimatedOptions
        optional: true
        default: "{ animated: true }"

  - name: setContentOffset
    summary: Sets the value of the [contentOffset](Titanium.UI.ScrollView.contentOffset) property.
    platforms: [iphone, ipad, macos]
    parameters:
      - name: contentOffsetXY
        summary: |
            X and Y coordinates to which to reposition the top-left point of the scrollable region.
        type: Point
      - name: animated
        summary: |
            A JS object with an `animated` property which determines whether the scrollable region reposition should be animated.

            Note that the default here is equivalent to passing in `{ animated: true }`
        type: AnimatedOptions
        optional: true
        default: "{ animated: true }"

  - name: setZoomScale
    summary: Sets the value of the [zoomScale](Titanium.UI.ScrollView.zoomScale) property.
    platforms: [iphone, ipad, macos]
    parameters:
      - name: zoomScale
        summary: Scaling factor of the scroll view's content.
        type: Number

      - name: options
        summary: |
            A JS object with an `animated` property which determines whether the scrollable region reposition should be animated

            Note that the default here is equivalent to passing in `{ animated: false }`
        type: AnimatedOptions
        optional: true
        default: "{ animated: false }"

  - name: scrollToBottom
    summary: Moves the end of the scrollable region into the viewable area.
    description: |
        On Android the behavior of `scrollToBottom` depends on whether this scroll view scrolls
        horizontally or vertically. For vertical scroll views, `scrollToBottom` moves the bottom
        of the scrollable region into the viewable area. For horizontal scroll views,
        `scrollToBottom` moves the rightmost edge of of the scrollable region into the viewable area.

        On iOS, `scrollToBottom` moves the bottom-right corner of the scrollable region into the
        viewable area.
    platforms: [android, iphone, ipad, macos]
    since: {iphone: "2.1.0", ipad: "2.1.0"}

  - name: scrollToTop
    summary: Moves the top of the scrollable region into the viewable area.
    description: |
        On Android the behavior of `scrollToTop` depends on whether this scroll view scrolls
        horizontally or vertically. For vertical scroll views, `scrollToTop` moves the top
        of the scrollable region into the viewable area. For horizontal scroll views,
        `scrollToTop` moves the leftmost edge of of the scrollable region into the viewable area.

        On iOS, `scrollToTop` moves the top-left corner of the scrollable region into the
        viewable area.
    platforms: [iphone, ipad, android, macos]
    since: "7.0.0"

events:
  - name: scale
    summary: Fired when the zoom scale factor changes.
    platforms: [iphone, ipad, macos]
    properties:
      - name: scale
        summary: New scaling factor as a float.
        type: Number

  - name: scroll
    summary: Fired when the scrollable region is scrolled.
    properties:

      - name: contentSize
        summary: |
            The current content size of the scroll view defined by its `width` and `height` properties.
        type: Size
        platforms: [android, iphone, ipad, macos]
        since: { iphone: "5.2.0", ipad: "5.2.0", android: "8.3.0" }

      - name: decelerating
        summary: Indicates whether the scroll is decelerating.
        type: Boolean
        platforms: [iphone, ipad, macos]

      - name: dragging
        summary: |
            Indicates whether the event was fired during a dragging gesture, where the touch
            remained in contact with the display to physically drag the view, as opposed to it being
            the result of scrolling momentum.
        type: Boolean
        platforms: [iphone, ipad, macos]

      - name: zooming
        summary: |
            Indicates whether the event was fired during a zooming operation. This is only available
            from Release 3.2.3 of the Titanium Mobile SDK.
        type: Boolean
        platforms: [iphone, ipad, macos]

      - name: curZoomScale
        summary: |
            The current scaling factor of the scroll view content. This might not be equal to
            the `zoomScale` property or be within the range specified by `minZoomScale` and `maxZoomScale`.
            This is only available from Release 3.2.3 of the Titanium Mobile SDK.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: dragStart
    summary: Fired when the scrollable region starts being dragged.
    description: |
        This event has been deprecated and renamed dragstart (lower case).

        A dragging gesture is when a touch remains in contact with the display to physically drag
        the view, as opposed to it being the result of scrolling momentum.
    platforms: [iphone, ipad, macos]

  - name: dragEnd
    summary: Fired when the scrollable region stops being dragged.
    description: |
        This event has been deprecated and renamed dragend (lower case).

        A dragging gesture is when a touch remains in contact with the display to physically drag
        the view, as opposed to it being the result of scrolling momentum.
    platforms: [iphone, ipad, macos]
    properties:
      - name: decelerate
        summary: |
            Indicates whether scrolling will continue but decelerate, now that the drag gesture has
            been released by the touch. If `false`, scrolling will stop immediately.
        type: Boolean

  - name: dragstart
    summary: Fired when the scrollable region starts being dragged.
    description: |
        A dragging gesture is when a touch remains in contact with the display to physically drag
        the view, as opposed to it being the result of scrolling momentum.
    platforms: [android, iphone, ipad, macos]
    since: { iphone: "3.0.0", ipad: "3.0.0", android: "6.2.0" }

  - name: dragend
    summary: Fired when the scrollable region stops being dragged.
    description: |
        A dragging gesture is when a touch remains in contact with the display to physically drag
        the view, as opposed to it being the result of scrolling momentum.
    platforms: [android, iphone, ipad, macos]
    properties:
      - name: decelerate
        summary: |
            Indicates whether scrolling will continue but decelerate, now that the drag gesture has
            been released by the touch. If `false`, scrolling will stop immediately.
            Is always `true` on Android.
        type: Boolean
    since: { iphone: "3.0.0", ipad: "3.0.0", android: "6.2.0" }

properties:
  - name: canCancelEvents
    summary: Determines whether this scroll view can cancel subview touches in order to scroll instead.
    description: |
        On iOS, this property maps to the native `canCancelContentTouches` property which controls
        whether touches in the content view always lead to tracking. See [UIScrollView](https://developer.apple.com/documentation/uikit/uiscrollview) for more details.

        On Android, setting this property to false prevents the scroll view from intercepting
        any touch events from its subviews. Note that this behavior may be slightly different from iOS.
    type: Boolean
    default: true
    platforms: [android, iphone, ipad, macos]

  - name: contentHeight
    summary: Height of the scrollable region.
    description: |
        While absolute dimensions are supported, relative values, such as those provided
        in percentages, are not. The minimum value for contentHeight is the height of the scroll view.
        Measured in platform-specific units; pixels on Android, effective pixels on Windows and density-independent pixels (dip) on iOS.
    type: [Number, String]

  - name: contentOffset
    summary: X and Y coordinates to which to reposition the top-left point of the scrollable region.
    description: |
        On iOS, a new value causes the scroll view to perform an animated scroll to the new offset.
        The <Titanium.UI.ScrollView.setContentOffset> method can be used to prevent this animation.
    type: Point

  - name: contentWidth
    summary: Width of the scrollable region.
    description: |
        While absolute dimensions are supported, relative values, such as those provided
        in percentages, are not. The minimum value for contentWidth is the width of the scroll view.
        Measured in platform-specific units; pixels on Android, effective pixels on Windows and density-independent pixels (dip) on iOS.
    type: [Number, String]

  - name: decelerationRate
    summary: The deceleration rate of the ScrollView.
    type: Number
    constants: Titanium.UI.iOS.SCROLL_DECELERATION_RATE_*
    default: Undefined.
    platforms: [iphone, ipad, macos]
    since: "3.2.3"

  - name: disableBounce
    summary: Determines whether scroll bounce of the scrollable region is enabled.
    description: |
        Set to `true` to disable horizontal and vertical bounce.

        This property takes precedence over the `horizontalBounce` and `verticalBounce` properties.
    type: Boolean
    default: false
    platforms: [iphone, ipad, macos]

  - name: horizontalBounce
    summary: Determines whether horizontal scroll bounce of the scrollable region is enabled.
    description: |
        With the default value of `true`, dragging in the horizontal direction is always allowed and
        also bounces.

        Set to `false` to disable horizontal scroll bounce if the horizontal content is smaller than
        the scroll view bounds. However, larger content will still bounce when scrolled.

        Note that the `disableBounce` property takes precedence over the `horizontalBounce` and
        `verticalBounce` properties.
    type: Boolean
    default: true
    platforms: [iphone, ipad, macos]

  - name: keyboardDismissMode
    summary: The manner in which the keyboard is dismissed when a drag begins in the scroll view.
    type: Number
    constants: Titanium.UI.iOS.KEYBOARD_DISMISS_MODE_*
    platforms: [iphone, ipad, macos]
    default: Undefined (behaves like Titanium.UI.iOS.KEYBOARD_DISMISS_MODE_NONE)
    since: "6.0.0"

  - name: maxZoomScale
    summary: Maximum scaling factor of the scrollable region and its content.
    description: |
        This value determines how large the content can be scaled.
        It must be greater than the [minimum zoom scale](Titanium.UI.ScrollView.minZoomScale) for zooming to be enabled.
        The default value is 1.0 unless otherwise specified.

        Note that specifying a value less than or equal to 0 will hide all contents of the scroll view.
    type: Number
    default: 1.0
    platforms: [iphone, ipad, macos]

  - name: minZoomScale
    summary: Minimum scaling factor of the scrollable region and its content.
    description: |
        This value determines how small the content can be scaled.
        It must be less than the [maximum zoom scale](Titanium.UI.ScrollView.maxZoomScale) for zooming to be enabled.
        The default value is 1.0 unless otherwise specified.
    type: Number
    default: 1.0
    platforms: [iphone, ipad, macos]

  - name: overScrollMode
    summary: Determines the behavior when the user overscolls the view.
    type: Number
    constants: Titanium.UI.Android.OVER_SCROLL_*
    default: Titanium.UI.Android.OVER_SCROLL_ALWAYS
    platforms: [android]
    since: "3.1.0"

  - name: refreshControl
    summary: View positioned above the first row that is only revealed when the user drags the scroll view contents down.
    description: |
        An alternate to the pullView property. See <Titanium.UI.RefreshControl> for usage and examples. Since Titanium
        SDK 7.5.0, the RefreshControl API is also available on iOS < 10.
    type: Titanium.UI.RefreshControl
    platforms: [android, iphone, ipad, macos]
    since: { android: "6.3.0", iphone: "6.0.0", ipad: "6.0.0" }

  - name: scrollsToTop
    summary: Controls whether the scroll-to-top gesture is effective.
    description: |
        The scroll-to-top gesture is a tap on the status bar; The default value of this property is true.
        This gesture works when you have a single visible scroll view.
        If there are multiple table views, web views, text areas, and/or scroll views visible,
        you will need to disable (set to false) on the above views that you don't want this
        behaviour on. The remaining view will then respond to scroll-to-top gesture.
    type: Boolean
    default: true
    platforms: [iphone,ipad, macos]
    since: 2.0.0

  - name: scrollIndicatorStyle
    summary: Style of the scrollbar.
    type: Number
    constants: Titanium.UI.iOS.ScrollIndicatorStyle.*
    default: Titanium.UI.iOS.ScrollIndicatorStyle.DEFAULT
    platforms: [iphone, ipad, macos]

  - name: scrollType
    summary: |
        Limits the direction of the scrollable region, overriding the deduced setting. Set to
        `horizontal` or `vertical`.
    description: |
        See the [scrollView](Titanium.UI.ScrollView) description for more details about how the
        scroll direction is deduced when this property is not defined.
    type: String
    availability: creation
    platforms: [android]

  - name: scrollingEnabled
    summary: Determines whether scrolling is enabled for the view.
    type: Boolean
    default: true
    platforms: [android, iphone, ipad, macos]
    since: { iphone: "3.0.0", ipad: "3.0.0", android: "3.0.0" }

  - name: showHorizontalScrollIndicator
    summary: Determines whether the horizontal scroll indicator is visible.
    description: Set to `true` to show the horizontal scroll indicator.
    type: Boolean
    default: false


  - name: showVerticalScrollIndicator
    summary: Determines whether the vertical scroll indicator is visible.
    description: Set to `true` to show the vertical scroll indicator.
    type: Boolean
    default: false


  - name: verticalBounce
    summary: Determines whether vertical scroll bounce of the scrollable region is enabled.
    description: |
        With the default value of `true`, dragging in the vertical direction is always allowed and
        also bounces.

        Set to `false` to disable vertical scroll bounce if the vertical content is smaller than
        the scroll view bounds. However, larger content will still bounce when scrolled.

        Note that the `disableBounce` property takes precedence over the `horizontalBounce` and
        `verticalBounce` properties.
    type: Boolean
    default: true
    platforms: [iphone, ipad, macos]

  - name: zoomScale
    summary: Scaling factor of the scroll view's content.
    description: |
        This value is bound by the [minZoomScale](Titanium.UI.ScrollView.minZoomScale) and [maxZoomScale](Titanium.UI.ScrollView.maxZoomScale) properties.
    type: Number
    default: 1
    platforms: [iphone, ipad, macos]
examples:
  - title: Simple Scroll View
    example: |
        Create a scroll view with content.

        ``` js
        var win = Ti.UI.createWindow({
          backgroundColor: 'white',
          exitOnClose: true,
          fullscreen: false,
          title: 'ScrollView Demo'
        });

        var scrollView = Ti.UI.createScrollView({
          showVerticalScrollIndicator: true,
          showHorizontalScrollIndicator: true,
          height: '80%',
          width: '80%'
        });
        var view = Ti.UI.createView({
          backgroundColor:'#336699',
          borderRadius: 10,
          top: 10,
          height: 2000,
          width: 1000
        });
        scrollView.add(view);
        win.add(scrollView);
        win.open();
        ```

  - title: Scroll View as a Table View
    example: |
        Create a scroll view that contains a set of views in a layout to resemble a table view with
        rows. This approach can mitigate the native Android issue described in the "TextFields in
        Tables with SOFT_INPUT_ADJUST_PAN" section of <Titanium.UI.TableView>.

        ``` js
        var win = Ti.UI.createWindow({
          backgroundColor:'white'
        });

        if (Ti.UI.Android){
          win.windowSoftInputMode = Ti.UI.Android.SOFT_INPUT_ADJUST_PAN;
        }

        function createRow(i) {
          var row = Ti.UI.createView({
            backgroundColor: 'white',
            borderColor: '#bbb',
            borderWidth: 1,
            width:'100%', height: 70,
            top: 0, left: 0
          });
          var inputTextField = Ti.UI.createTextField({
            hintText: 'Enter value ' + i,
            keyboardType: Ti.UI.KEYBOARD_NUMBERS_PUNCTUATION,
            top: 10, left: '10%',
            width: '80%', height: 60
          });
          row.add(inputTextField);
          return row;
        }

        var scrollView = Ti.UI.createScrollView({
          bottom:120,
          layout: 'vertical'
        });

        for(var i = 0; i <= 20; i++){
        var row = createRow(i);
          scrollView.add(row);
        }
        win.add(scrollView);

        var label = Ti.UI.createLabel({
          backgroundColor:'darkgray',
          text: 'Your advert here',
          textAlign: 'center',
          bottom:0,
          width: Titanium.UI.FILL,
          height:100
        });
        win.add(label);
        win.open();
        ```

  - title: Alloy XML Markup
    example: |
       Previous simple scroll view example as an Alloy view.

        ``` xml
        <Alloy>
            <Window id="win" backgroundColor="white" exitOnClose="true" fullscreen="false" title="ScrollView Demo">
                <ScrollView id="scrollView" showVerticalScrollIndicator="true" showHorizontalScrollIndicator="true" height="80%" width="80%">
                    <View id="view" backgroundColor="#336699" borderRadius="10" top="10" height="2000" width="1000" />
                </ScrollView>
            </Window>
        </Alloy>
        ```
