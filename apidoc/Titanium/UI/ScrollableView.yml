---
name: Titanium.UI.ScrollableView
summary: |
    A view that encapsulates a horizontally-scrolling set of child views, known as pages, navigable
    using its built-in horizontal swipe gestures.
description: |
    Use the <Titanium.UI.createScrollableView> method or **`<ScrollableView>`** Alloy element to create
    a scrollable view.

    The `ScrollableView` supports an on-screen paging control to indicate whether a previous or next
    page exists. When the paging control is enabled on iOS, by default it appears as
    small dots on the bottom of the screen, whereas Android displays arrows on the left and
    right-hand sides.

    Use the `cacheSize` property to cache views inside the scrollable view. This can be required when
    using complex view structures in the scrollable view (e.g. map views) and the app might crash if no
    proper cache size is specified. See the <Titanium.UI.ScrollableView.cacheSize> documentation for more
    infos regarding view caching.

    Only the `scroll` event exists for the `ScrollableView` on Android. To support others, child
    views may be added to pages, and event listeners added to these views instead of the pages
    themselves.

    In a previous Titanium version for iOS, the `maxZoomScale` and `minZoomScale` properties were
    removed for performance and parity reasons. As they still remain in <Titanium.UI.ScrollView>,
    the equivalent functionality may be obtained by adding a `ScrollView` to `ScrollableView`. See
    the "Simple Scrollable View with 2 Zoomable Images" example for a demonstration.
excludes:
    events: [ 'click', 'longclick', 'pinch', 'swipe', 'touchend', 'touchmove' ]
    properties: [children]
    methods: [add, remove, removeAllChildren, replaceAt]

extends: Titanium.UI.View
platforms: [android, iphone, ipad, macos]
since: "0.8"

methods:
  - name: insertViewsAt
    summary: Inserts views at the specified position in the [views](Titanium.UI.ScrollableView.views) array.
    parameters:
      - name: position
        summary: Position(index) in the [views](Titanium.UI.ScrollableView.views) array to insert the view
        type: Number

      - name: views
        summary: Views to insert.
        type: Array<Titanium.UI.View>
    since: 5.4.0
    platforms: [android, iphone, ipad, macos]

  - name: addView
    summary: Adds a new page to this Scrollable View.
    parameters:
      - name: view
        summary: The page to add.
        type: Titanium.UI.View

  - name: moveNext
    summary: |
        Sets the current page to the next consecutive page in <Titanium.UI.ScrollableView.views>.
    description: |
        Since Titanium Mobile Release 3.3.0, using this method to change current page animates the change on iOS and Android.
    platforms: [android,  iphone, ipad, macos]
    since: {iphone: "3.3.0", ipad: "3.3.0"}

  - name: movePrevious
    summary: |
        Sets the current page to the previous consecutive page in <Titanium.UI.ScrollableView.views>.
    description: |
        Since Titanium Mobile Release 3.3.0, using this method to change current page animates the change on iOS and Android.
    platforms: [android,  iphone, ipad, macos]
    since: {iphone: "3.3.0", ipad: "3.3.0"}

  - name: removeView
    summary: Removes an existing page from this Scrollable View.
    description: |
        On Android, does nothing if the page does not exist in
        <Titanium.UI.ScrollableView.views>.

        On iOS, throws an exception if the page does not exist in <Titanium.UI.ScrollableView.views>
        or the index is invalid.
    parameters:
      - name: view
        summary: |
            A <Titanium.UI.View> object (all platforms) or integer index (Android and iOS only) of
            the page to remove.
        type: [Number, Titanium.UI.View]

  - name: scrollToView
    summary: Scrolls to the specified page in <Titanium.UI.ScrollableView.views>.
    parameters:
      - name: view
        summary: An integer index or <Titanium.UI.View> object to set as the current page.
        type: [Number, Titanium.UI.View]

  - name: setIndicatorImageForPage
    summary: Sets the indicator image for the specified page.
    description: |
        Override the indicator image for a specific page. Symbol images are recommended.
        Use <Titanium.UI.iOS.systemImage> to get system-supplied symbol images. See examples section for usage.
    parameters:
      - name: image
        summary: |
            The image for the indicator, defined using a local filesystem path,
            or a `Blob` object containing image data. Resets to the default if image is null.
        type: [String, Titanium.Blob]
      - name: pageNo
        summary: Page number to set the image.
        type: Number
    since: 9.2.0
    platforms: [iphone, ipad]
    osver: {ios: {min: "14.0"}}

events:
  - name: dblclick
    summary: Fired when the device detects a double click against the view.
    platforms: [iphone, ipad, macos]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: doubletap
    summary: Fired when the device detects a double tap against this page.
    platforms: [iphone, ipad, macos]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: longpress
    summary: Fired when the device detects a long press against this view.
    description: |
        Generated by touching and holding on a touchscreen, this event occurs before the
        finger is lifted again. Note that `longpress` cannot be generated with a trackball.
    platforms: [iphone, ipad, macos]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: singletap
    summary: Fired when the device detects a single tap against this view.
    platforms: [iphone, ipad, macos]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: touchcancel
    summary: Fired when a touch gesture is interrupted by the device.
    description: |
        Generated in various circumstances, including an incoming call to allow the UI to clean
        up state.
    platforms: [iphone, ipad, macos]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: touchstart
    summary: Fired as soon as the device detects a touch gesture against this view.
    platforms: [iphone, ipad, macos]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: twofingertap
    summary: Fired when the device detects a two-finger tap against the view.
    platforms: [iphone, ipad, macos]
    properties:
      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

  - name: scroll
    summary: Fired repeatedly as the view is being scrolled.
    description: |
        Prior to 2.1, the scroll event did not fire consistently on all platforms. On iOS,
        it fired when scrolling ended, and on Android, it fired when drag ended. You can restore
        the pre-2.1 behavior by listening for the `scrollEnd` or `dragEnd` events instead.
    properties:

      - name: currentPage
        summary: Index of the currently visible view of <Titanium.UI.ScrollableView.views>.
        type: Number

      - name: currentPageAsFloat
        type: Number
        summary: |
           Current page index that the view is scrolled to as a float. For
           example, if the user is holding the `ScrollableView` in between
           the first and second page, this will have a value of 0.5.

      - name: view
        summary: The currently visible view.
        type: Titanium.UI.View

  - name: scrollend
    summary: Fired when the view has stopped moving completely.
    properties:
      - name: currentPage
        summary: Index of the currently visible view of <Titanium.UI.ScrollableView.views>.
        type: Number

      - name: view
        summary: The currently visible view.
        type: Titanium.UI.View
    since: '3.0.0'

  - name: dragend
    summary: Fired when the scrolling drag gesture on the view has been completed.
    platforms: [android]
    since: "3.0.0"
    properties:
      - name: currentPage
        summary: Index of the currently visible view of <Titanium.UI.ScrollableView.views>.
        type: Number
      - name: view
        summary: The currently visible view.
        type: Titanium.UI.View


properties:
  - name: cacheSize
    summary: Number of pages to cache (pre-render).
    description: |
        Pages are rendered in the range (currentPage +/- (cacheSize - 1)/2), *rounded down* for even
        values (i.e. cacheSize=4 renders 3 pages into the cache.) Keep in mind that improved
        performance (larger cache) will lead to faster performance, but greater memory usage.
    type: Number
    platforms: [android, iphone, ipad, macos]
    since: {android: "4.1.0"}

  - name: currentPage
    summary: Index of the active page.
    description: |
        Since Titanium Mobile Release 3.3.0, using this property to change current page changes the
        page without animation on iOS and Android.
    type: Number

  - name: currentPageIndicatorColor
    summary: Color for the current page of the paging control, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]
    default: undefined (system-default white)
    platforms: [iphone, ipad, macos]
    since: "5.4.0"

  - name: disableBounce
    summary: Determines whether page bouncing effect is disabled.
    type: Boolean
    default: false
    platforms: [iphone, ipad, macos]

  - name: overScrollMode
    summary: Determines the behavior when the user overscolls the view.
    type: Number
    constants: Titanium.UI.Android.OVER_SCROLL_*
    default: Titanium.UI.Android.OVER_SCROLL_ALWAYS
    platforms: [android]
    since: "3.1.0"

  - name: pagingControlColor
    summary: Color of the paging control, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]
    default: "black"
    platforms: [iphone,ipad, macos]

  - name: preferredIndicatorImage
    summary: |
        The preferred image for indicators, defined using a local filesystem path, or a `Blob` object containing image data.
    description: |
        Symbol images are recommended. Use <Titanium.UI.iOS.systemImage> to get system-supplied symbol images.
        See examples section for usage.
    type: [String, Titanium.Blob]
    platforms: [iphone,ipad]
    since: "9.2.0"
    osver: {ios: {min: "14.0"}}

  - name: pagingControlHeight
    summary: Height of the paging control, in pixels.
    type: Number
    default: 20
    platforms: [iphone,ipad, macos]

  - name: pageIndicatorColor
    summary: Color of the paging control, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]
    default: undefined (system-default gray)
    platforms: [iphone, ipad, macos]
    since: "5.4.0"

  - name: showPagingControl
    summary: Determines whether the paging control is visible.
    description: Set to `true` to show paging control.
    type: Boolean
    default: false

  - name: pagingControlTimeout
    summary: Number of milliseconds to wait before hiding the paging control.
    description: Set to less than or equal to `0` to disable timeout, to keep controls displayed.
    type: Number
    availability: creation
    default: 3000
    platforms: [android]

  - name: pagingControlAlpha
    summary: Alpha value of the paging control.
    type: Number
    default: 1.0
    platforms: [iphone,ipad, macos]
    since: "2.1.0"

  - name: pagingControlOnTop
    summary: Determines whether the paging control is displayed at the top or bottom of the view.
    description: Set to `true` for the paging control at the top.
    type: Boolean
    default: false
    platforms: [iphone,ipad, macos]
    since: "2.1.0"

  - name: overlayEnabled
    summary: Determines whether the paging control is added as an overlay to the view.
    description: |
        If this property is set to `true`, the view takes up the entire height available in the
        parent view and the paging control is placed over the view. It is advisable to set an
        appropriate value for [pagingControlAlpha](Titanium.UI.ScrollableView.pagingControlAlpha)
        along with this property, so that the underlying view content may be seen properly.
    type: Boolean
    default: false
    platforms: [iphone,ipad, macos]
    since: "2.1.0"

  - name: scrollingEnabled
    summary: Determines whether scrolling is enabled for the view.
    description: If this property is unset or `true`, scrolling is enabled.
    type: Boolean
    default: undefined (scrolling enabled)
    platforms: [iphone, ipad, android, macos]
    since: { android: "2.1.0", iphone: "2.0.0", ipad: "2.0.0" }

  - name: views
    summary: Sets the pages within this Scrollable View.
    type: Array<Titanium.UI.View>

  - name: clipViews
    summary: |
        Determines whether the previous and next pages are clipped, so that they are not visible
        adjacent to the current page.
    description: |
        Set to `false` to allow the previous or next pages to be seen. Note that
        ScrollableView's [width](Titanium.UI.ScrollableView.width) must be smaller than its parent
        view in order to make this property effective.
    type: Boolean
    availability: creation
    default: true
    since: { iphone: 0.9, ipad: 0.9, android: 7.5.0 }
    platforms: [iphone, ipad, android, macos]

  - name: hitRect
    summary: Sets the region where this view responds to gestures.
    description: |
        This property is particularly useful when [clipViews](Titanium.UI.ScrollableView.clipViews)
        is set to `false` and the dimension of this view is small, to create a larger area for the
        user to perform swipe gestures against.

        Note that the `x` and `y` values specified are relative to the position of the view.
    type: Dimension
    default: undefined (hit against size of view)
    platforms: [iphone, ipad, macos]
    since: "2.1"

  - name: padding
    summary: The padding applied to the scrollable view.
    platforms: [android]
    type: Padding
    since: "7.5.0"

examples:
  - title: Simple Scrollable View with 3 Views
    example: |
        Create three views and assign them as pages to a scrollable view.

        ``` js
        var win = Ti.UI.createWindow();

        var view1 = Ti.UI.createView({ backgroundColor:'#123' });
        var view2 = Ti.UI.createView({ backgroundColor:'#246' });
        var view3 = Ti.UI.createView({ backgroundColor:'#48b' });

        var scrollableView = Ti.UI.createScrollableView({
          views:[view1,view2,view3],
          showPagingControl:true
        });

        win.add(scrollableView);
        win.open();
        ```

  - title: Simple Scrollable View with 2 Zoomable Images
    example: |
        Create two scroll views, each containing an image view, and assign them as pages to a
        scrollable view.

        ``` js
        var img1 = Ti.UI.createImageView({
            image:'http://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/' +
            'Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg/' +
            '402px-Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg'
        });
        var img1Wrapper = Ti.UI.createScrollView({
            maxZoomScale:4.0,
        });
        img1Wrapper.add(img1);

        var img2 = Ti.UI.createImageView({
            image:'http://www.nasa.gov/images/content/' +
            '616903main_rover_comparison1600_1600-1200.jpg'
        });
        var img2Wrapper = Ti.UI.createScrollView({
            maxZoomScale:4.0,
        });
        img2Wrapper.add(img2);
        var photosView = Ti.UI.createScrollableView({
            showPagingControl:true,
            views:[img1Wrapper, img2Wrapper]
        });
        win.add(photosView);
        ```

  - title: Scrollable View with multiple visible views
    example: |
      Create three views and assign them as pages to a scrollable view. Each page is narrower than
      a scrollable view, so multiple views are visible at the same time.

      ``` js
      var win = Ti.UI.createWindow();

      var view1 = Ti.UI.createView({ backgroundColor:'#123' });
      var view2 = Ti.UI.createView({ backgroundColor:'#246' });
      var view3 = Ti.UI.createView({ backgroundColor:'#48b' });

      // Common params
      var params = {
        views:[view1,view2,view3],
        clipViews:false,
        showPagingControl:false,
        top: 0
      };

      if (Ti.Platform.name === 'android') {
        // Android specific params
        params.padding = {
          left:40,
          right:40
        };
      } else {
        // iOS specific params
        params.width = '90%';
      }
      var scrollableView = Ti.UI.createScrollableView(params);
      win.add(scrollableView);
      win.open();
      ```

  - title: Alloy XML Markup
    example: |
        First example as an Alloy view.

        ``` xml
        <Alloy>
            <Window id="win">
                <ScrollableView id="scrollableView" showPagingControl="true">
                    <View id="view1" backgroundColor="#123">
                      <Label>View 1</Label>
                    </View>
                    <View id="view2" backgroundColor="#246">
                    <Label>View 2</Label>
                    </View>
                    <View id="view3" backgroundColor="#48b">
                    <Label>View 3</Label>
                    </View>
                </ScrollableView>
            </Window>
        </Alloy>
        ```

  - title: Scrollable View with indicator image (iOS only)
    example: |
      Create three views and assign them as pages to a scrollable view. Assign preferred indicator image.
      After window opens, update second page indicator image.

      ``` js
      var win = Ti.UI.createWindow({ extendSafeArea: false });

      var view1 = Ti.UI.createView({ backgroundColor:'#123' });
      var view2 = Ti.UI.createView({ backgroundColor:'#246' });
      var view3 = Ti.UI.createView({ backgroundColor:'#48b' });
      var backwardImage = Ti.UI.iOS.systemImage('backward');
      var scrollableView = Ti.UI.createScrollableView({
        views:[view1,view2,view3],
        showPagingControl:true,
        preferredIndicatorImage: backwardImage
      });

      win.add(scrollableView);
      win.addEventListener('open', function () {
        var forwardImage = Ti.UI.iOS.systemImage('forward');
        scrollableView.setIndicatorImageForPage(forwardImage, 1);
      });

      win.open();
      ```
