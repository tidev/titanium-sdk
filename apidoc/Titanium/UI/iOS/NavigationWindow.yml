---
name: Titanium.UI.iOS.NavigationWindow
summary: |
    A `NavigationWindow` implements a specialized view that manages the navigation of hierarchical
    content.
description: |
    You create a `NavigationWindow` with the <Titanium.UI.iOS.createNavigationWindow> factory method, or
    a `<NavigationWindow>` Alloy element.

    All `NavigationWindow` objects must have at least one root window that cannot be removed. When
    creating a `NavigationWindow` with the factory method, you must set its `window` property to the
    root level window. Equivalently, in an Alloy application, insert a `<Window>` element as a child of the
    `<NavigationWindow>` element. See examples below.

    This object is not meant to be added to other windows. However, it can be used within a <Titanium.UI.iOS.SplitWindow>.
extends: Titanium.UI.Window
platforms: [iphone, ipad, macos]
since: {iphone: "3.1.3", ipad: "3.1.3", macos: "9.2.0"}
deprecated:
    since: "8.0.0"
    notes: Use [Titanium.UI.NavigationWindow](Titanium.UI.NavigationWindow) instead.
    removed: "10.0.0"
excludes:
    methods: [removeAllChildren, setToolbar, hideTabBar]
    properties: [navBarHidden, tabBarHidden, navTintColor, translucent, toolbar,
                barColor, barImage, leftNavButton, rightNavButton, title, titleControl,
                titlePrompt, titleImage, titleid, titlepromptid, url, backButtonTitle,
                backButtonTitleImage, shadowImage, hideShadow, transitionAnimation,
                swipeToClose]

properties:
  - name: window
    summary: Window to add to this navigation window.
    type: Titanium.UI.Window
    availability: creation
    optional: false

methods:
  - name: closeWindow
    summary: Closes a window and removes it from the navigation window.
    parameters:
      - name: window
        summary: Window to close.
        type: Titanium.UI.Window

      - name: options
        summary: |
            Options supporting a single `animated` boolean property to determine whether the window
            will be animated (default) while being closed (default: true).
        type: Dictionary

  - name: openWindow
    summary: Opens a window within the navigation window.
    parameters:
      - name: window
        summary: Window to open.
        type: Titanium.UI.Window

      - name: options
        summary: |
            Options supporting a single `animated` boolean property to determine whether the window
            will be animated (default) while being opened (default: true).
        type: Dictionary

  - name: popToRootWindow
    summary: Closes all windows that are currently opened inside the navigation window.
    description: Note that only the `close` event of the most recently opened window is fired.
    parameters:
      - name: options
        summary: |
            Options supporting a single `animated` boolean property to determine whether the windows
            will be animated while being closed (default: false).
        type: Dictionary
    since: "6.0.0"

examples:
  - title: Simple Navigation Window
    example: |
        Creates a navigation window with the first window colored red.
        Press the button to open the blue window.
        Use the back button to return to the red root window.

        ``` js
        var win2 = Ti.UI.createWindow({
            backgroundColor: 'red',
            title: 'Red Window'
        });

        var win1 = Ti.UI.iOS.createNavigationWindow({
            window: win2
        });

        var win3 = Ti.UI.createWindow({
            backgroundColor: 'blue',
            title: 'Blue Window'
        });

        var button = Ti.UI.createButton({
            title: 'Open Blue Window'
        });
        button.addEventListener('click', function(){
            win1.openWindow(win3, {animated:true});
        });

        win2.add(button);
        var button2 = Titanium.UI.createButton({
            title: 'Close Blue Window'
        });
        button2.addEventListener('click', function(){
            win1.closeWindow(win3, {animated:false}); //win3.close() will also work!!
        });

        win3.add(button2);
        win1.open();
        ```

  - title: Alloy XML Markup
    example: |
        Previous example as two Alloy view-controllers.  Requires Alloy 1.2.2 and later.

        app/views/index.xml:
        ``` xml
        <Alloy>
            <NavigationWindow id="win1" platform="ios">
                <Window id="win2" title="Red Window" backgroundColor="red">
                    <Button id="button" onClick="openBlueWindow">Open Blue Window</Button>
                </Window>
            </NavigationWindow>
        </Alloy>
        ```

        app/controllers/index.js:
        ``` js
        function openBlueWindow(e) {
            var win3 = Alloy.createController('bluewin').getView();
            $.win1.openWindow(win3);
        }

        $.win1.open();
        ```

        app/views/bluewin.xml:
        ``` xml
        <Alloy>
            <Window id="win3" title="Blue Window" backgroundColor="blue">
                <Button onClick="closeWindow">Close Window</Button>
            </Window>
        </Alloy>
        ```

        app/controllers/bluewin.js:
        ``` js
        function closeWindow(){
            $.win3.close();
        }
        ```
