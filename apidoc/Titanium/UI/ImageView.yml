---
name: Titanium.UI.ImageView
summary: |
    A view to display a single image or series of animated images.
description: |

    Use the <Titanium.UI.createImageView> method or **`<ImageView>`** Alloy element to create an `ImageView`.

    Specifying either a `width` or `height` property for this view will scale its image(s) with
    the aspect ratio maintained, up to a maximum size that does not exceed its parent view.
    
    #### Remote Images
    
    You can display both local and remote images in an ImageView. When loading remote images, you should 
    set the defaultImage property to a local image, which will be displayed while the remote image is being 
    downloaded. Remote images are cached automatically on the iOS-, Android- and Windows platform.
    
    Android Note: Android 6 and later uses runtime permissions to secure the user's privacy. 
    Therefore, you should call <Titanium.Filesystem.requestStoragePermissions> before attempting to load remote images.
    
    Read more about remote images and general best practices in the [Image Best Practices Guide](https://wiki.appcelerator.org/display/guides2/Image+Best+Practices#ImageBestPractices-Cachingremoteimages).

    #### Android 9-Patch Scaled Images

    A nine-patch (9-patch) image is simply a standard `png` image with a transparent border of a
    single pixel, containing "guides" defined by solid black (`#000`) color fills. Guides added to the
    top and left edges determine that the image may be stretched in horizontal and vertical planes
    respectively. Optionally, the content area may be defined by guides added to the bottom and
    right edges.

    Although any image editor may be used to create the guides, certain settings can cause the edges
    of the graphic to "bleed" into the transparent border, consequently making it non-transparent.
    Thus, the `draw9patch` utility provided in the Android SDK tools directory is recommended for
    this purpose.

    For further information about nine-patch images and the Android utility, see the
    [Nine-patch](https://developer.android.com/guide/topics/graphics/drawables#nine-patch)
    and [Draw 9-patch](https://developer.android.com/studio/write/draw9patch) sections
    of the Android Developer website.

    The nine-patch technique may be used with any of Titanium's static image properties. See the
    "Button with Nine-patch Background Image" example for a demonstration.
extends: Titanium.UI.View
since: "0.9"
excludes:
    properties: [children]
    methods: [add, remove, removeAllChildren, replaceAt]
methods:
  - name: pause
    summary: Pauses a running animation. Use `resume` method to continue.
    description:  This method only works if multiple images are specified.
    platforms: [android, iphone, ipad, macos]

  - name: resume
    summary: Resumes an animation from a `pause` state.
    description:  This method only works if multiple images are specified.
    platforms: [android, iphone, ipad, macos]

  - name: start
    summary: |
        Starts the image animation. On Android, also resets `index` to the first image.
    description:  This method only works if multiple images are specified.

  - name: stop
    summary: Stops a running animation. On iOS, also resets `index` to the first image.
    description:  This method only works if multiple images are specified.

  - name: toBlob
    summary: Returns the image as a Blob object.
    platforms: [android, iphone, ipad, macos]
    returns:
        type: Titanium.Blob

events:
  - name: change
    summary: Fired for each frame change during an animation.
    properties:
      - name: index
        summary: Index of the image frame being displayed.
        type: Number

  - name: load
    summary: |
        Fired when either the initial image and/or all of the images in an animation are loaded.
    properties:
      - name: state
        summary: |
            Set to `image` when the image defined in the [image](Titanium.UI.ImageView.image)
            property is loaded. Set to `images`, when the series of images defined in the
            [images](Titanium.UI.ImageView.images) property are loaded.
        type: String

  - name: start
    summary: Fired when the animation starts.

  - name: stop
    summary: Fired when the animation stops.

  - name: error
    summary: Fired when an image fails to load.

    properties:
      - name: success
        summary: Indicates a successful operation. Returns `false`.
        type: Boolean

      - name: error
        summary: Error message, if any returned. May be undefined.
        type: String

      - name: code
        summary: |
            Error code.
            If the error was generated by the operating system, that system's error value
            is used. Otherwise, this value will be -1.
        type: Number

      - name: image
        summary: URL of the image that failed to load.
        type: String

  - name: pause
    summary: Fired when the animation pauses.
    platforms: [android, iphone, ipad, macos]
    since: { android: "2.1.1" }

properties:
  - name: animating
    summary: |
        Indicates whether animation is running.
    type: Boolean
    default: false on creation, true on load (Android), false (iPhone, iPad)
    permission: read-only

  - name: autorotate
    summary: |
        Indicates whether the image should be rotated based on exif orientation data.
        By default, this is false on android and true on iOS.
    type: Boolean
    default: false on android, true on iOS.
    availability: creation
    since: 3.0.0
    platforms: [android, iphone, ipad, macos]

  - name: decodeRetries
    summary: |
        Number of times to retry decoding the bitmap at a URL.
    type: Number
    default: 5
    platforms: [android]
    since: "1.7.0"

  - name: defaultImage
    summary: Local path to the default image to display while loading a remote image.
    type: String
    platforms: [android, iphone, ipad, macos]

  - name: duration
    summary: Amount of time in milliseconds to animate one cycle.
    description: |
        Starting with release 2.1.1, the minimum duration is 30 ms and the default duration is 200 ms.

        On Android, prior to release 2.1.1, if any images are assigned to the `images` property when the animation is
        started, duration will be set to the number of images multiplied by 33 ms. If no images
        are assigned, duration will be set to 100 ms.

        On iOS, prior to release 2.1.1, the default is 30 ms.

        On Android, if the value of duration is changed, [stop](Titanium.UI.ImageView.stop)
        and [start](Titanium.UI.ImageView.start) need to be called for the new value to take effect.
    type: Number
    default: 200 ms in Release 2.1.1 and later. Platform-specific default in earlier releases.

  - name: enableZoomControls
    summary: Show zoom controls when the user touches the image view.
    type: Boolean
    default: false
    platforms: [android]
    since: "1.3.0"

  - name: hires
    summary: |
        Set to `true` to prevent scaling of 2x/3x-resolution remote images for retina
        displays.
    description: |
        Causes images to display at 50%, where one pixel of the graphic maps to one physical pixel
        on-screen. This functionality is automatically determined for local images via their
        filenames, and thus this property is only applicable to remote images.
    type: Boolean
    default: false
    platforms: [iphone, ipad, macos]

  - name: image
    summary: Image to display.
    description: |
        Image to display, defined using a local filesystem path, a `File` object, a remote URL,
        or a `Blob` object containing image data.

        For Android, if there is a redirect and change in protocol, it will not follow. For example,
        from http to https and vice versa. See [Java Bug Database](http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4620571)
        for more information.
    type: [ String, Titanium.Blob, Titanium.Filesystem.File ]

  - name: imageTouchFeedback
    summary: Enables a ripple effect when the foreground image is touched.
    description: |
        Note that the [touchFeedback](Titanium.UI.View.touchFeedback) property applies a ripple effect to the
        view's background. If the image is opaque and completely covers the view (such as a photo),
        then the background's ripple won't be visible. In this case, you should use this `imageTouchFeedback`
        property to apply a ripple effect to the foreground image assigned via the `image` property.
    type: Boolean
    default: false
    platforms: [android]
    since: "10.1.0"

  - name: imageTouchFeedbackColor
    summary: Optional touch feedback ripple color. This has no effect unless `imageTouchFeedback` is true.
    description: Defaults to provided theme color.
    type: String
    platforms: [android]
    since: "10.1.0"

  - name: images
    summary: |
        Array of images to animate, defined using local filesystem paths, `File` objects,
        remote URLs (Android only), or `Blob` objects containing image data.

        When using this property, an initial `start()` needs to be called upon the ImageView before any image will show in this imageview.

        Related properties/methods to look at: `start`, `stop`, `pause`, `reverse`, `resume` and `repeatCount`
    type: [ Array<String>, Array<Titanium.Blob>, Array<Titanium.Filesystem.File> ]

  - name: paused
    summary: Indicates whether the animation is paused.
    type: Boolean
    default: false
    permission: read-only

  - name: preventDefaultImage
    summary: |
        Prevent the default image from being displayed while loading a remote image. This property
        is ignored when the `defaultImage` property is set.
    type: Boolean
    default: false
    platforms: [iphone, ipad, macos]

  - name: repeatCount
    summary: Number of times to repeat the image animation.
    type: Number
    default: 0 (infinite)

  - name: reverse
    summary: Run the animation in reverse.
    type: Boolean
    default: false

  - name: tintColor
    summary: The view's tintColor. Android does not support setting instances of <Titanium.UI.Color>
    type: [String, Titanium.UI.Color]
    default: null
    platforms: [android, iphone, ipad, macos]
    since: { android: "5.4.0", iphone: "5.4.0", ipad: "5.4.0"}

examples:
  - title: Basic Image View
    example: |
        In this example, we create a simple image view:

        ``` js
        Ti.UI.backgroundColor = 'white';
        var win = Ti.UI.createWindow();
        var image = Ti.UI.createImageView({
          image:'/images/myimage.png'
        });
        win.add(image);
        win.open();
        ```

  - title: Button with Nine-patch Background Image
    example: |
        Create a button with a nine-patch image background, that swaps with another image when
        selected, and generates a message in the console when clicked.

        Note that images are referenced in the code without the `.9` part of the filename, and that
        the project should be cleaned to ensure that the files are correctly copied to the project.

        ``` js
        var win = Ti.UI.createWindow({
            backgroundColor: 'white',
            exitOnClose: true,
            fullscreen: false,
            title: 'Click button to test'
        });

        var button = Ti.UI.createButton({
            backgroundImage: '/images/custom-slider-right.png',
            backgroundSelectedImage:'/images/custom-slider-left.png',
            title: 'Click me!',
            top: 10,
            width: 300,
            height: 200
        });
        button.addEventListener('click',function(e){
            Ti.API.info("You clicked the button");
        });
        win.add(button);
        win.open();
        ```

  - title: Alloy XML Markup
    example: |
        Previous basic image view example as an Alloy view.

        ``` xml
        <Alloy>
            <Window id="win" backgroundColor="white">
                <ImageView id="image" image="/images/myimage.png" />
            </Window>
        </Alloy>
        ```
