---
name: Titanium.UI.Toolbar
summary: A Toolbar can contain buttons, as well as certain other widgets, including text fields and
    labels.
description: |
    A `Toolbar` is created by the <Titanium.UI.createToolbar> factory method or **`<Toolbar>`** Alloy element.

    To provide spacing between items in the toolbar, on iOS you can use the special system button types,
    [FIXED_SPACE](Titanium.UI.iOS.SystemButton.FIXED_SPACE) and
    [FLEXIBLE_SPACE](Titanium.UI.iOS.SystemButton.FLEXIBLE_SPACE).

    Note that toolbars are positioned like other views (using the `top` and `bottom` properties,
    for example), but the [iOS Human Interface Guidelines](https://developer.apple.com/ios/human-interface-guidelines/overview/themes/#//apple_ref/doc/uid/TP40006556-CH12-SW4)
    have specific requirements for placing toolbars, specifically:

    * On the iPhone and Android, a toolbar should be at the bottom of the window.
    * On the iPad, a toolbar should appear at the top or bottom of a window.

    Due to an iOS limitation, the buttons in the toolbar only support the `click` event.
    The native object underlying a toolbar button does not generate standard view events,
    such as `touchstart` and `touchend`.

    On Android a toolbar can also be used as an ActionBar for [activities](Titanium.Android.Activity). This allows a toolbar to
    inherit [ActionBar's](Titanium.Android.ActionBar) methods, properties and events as well as provide a better customization of this
    design element. For example you can provide your own images to be used as navigation button icon, overflow menu icon and logo.
    In order to do that, an application must use a theme without a title bar. For Titanium 9.3.0 and higher,
    set the theme to `Theme.Titanium.NoTitleBar`. For older Titanium versions, set the theme to `Theme.AppCompat.NoTitleBar`.

    See also:

    *  [Toolbar in the iOS Human Interface Guidelines.](https://developer.apple.com/ios/human-interface-guidelines/bars/toolbars/)

extends: Titanium.UI.View
excludes:
    properties: [backgroundColor, backgroundDisabledColor, backgroundDisabledImage,
                backgroundFocusedColor, backgroundFocusedImage,
                backgroundLeftCap, backgroundTopCap, backgroundRepeat,
                backgroundSelectedColor, backgroundSelectedImage, layout,
                softKeyboardOnFocus, children]
    events: [longclick, twofingertap]
    methods: [add, remove, removeAllChildren, replaceAt]
since: "6.2.0"
platforms: [iphone, ipad, android, macos]

properties:
  - name: barColor
    summary: Background color for the toolbar, as a color name or hex triplet.
    description: |
        To use a background image on the toolbar, either `barColor` must be a fully or
        partially transparent color,
        or the [translucent](Titanium.UI.Toolbar.translucent) property must be `true`.

        To use a background gradient on a toolbar, `barColor` must be `'transparent'`
        *and* the the [translucent](Titanium.UI.Toolbar.translucent) property must be `true`.

        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]
    platforms: [iphone, ipad, android, macos]

  - name: items
    summary: An array of buttons (or other widgets) contained in the toolbar.
    type: Array<Titanium.UI.View>
    platforms: [iphone, ipad, android, macos]

  - name: extendBackground
    summary: If `true`, the background of the toolbar extends upwards.
    description: |
        This property allows the user to specify that the toolbar's background show through the status bar.
        and is only intended to be used with toolbars hosted in windows with **no navigation controllers**.
        The toolbar must be placed at the top of the screen just below the status bar and used as an ActionBar on Android for this
        property to work as expected.
        This **must** be specified at creation.
    type: Boolean
    default: Undefined. Behaves as if set to false.
    platforms: [iphone, ipad, android, macos]
    availability: creation
    accessors: false

  - name: translucent
    summary: If `true`, a translucent background color is used for the toolbar.
    description: |
        Note that if `translucent` is `false`, views under the toolbar are hidden, even
        if [barColor](Titanium.UI.Toolbar.barColor) is set to a semi-transparent or
        transparent color.
    type: Boolean
    default: true
    platforms: [iphone, ipad, macos]

  - name: contentInsetEndWithActions
    summary: Returns the margin after the toolbar's content when there are action buttons.
    type: Number
    platforms: [android]

  - name: contentInsetStartWithNavigation
    summary: Returns the margin at the toolbar's content start when there is a navigation button.
    type: Number
    platforms: [android]

  - name: logo
    summary: Image to be used as a logo in the Toolbar.
    description: |
        This property is used only when the Toolbar is used as an ActionBar.
    type: [String, Titanium.Blob, Titanium.Filesystem.File]
    platforms: [android]

  - name: navigationIcon
    summary: Image to be used for a navigation icon.
    description: |
        This property is used only when the Toolbar is used as an ActionBar.
    type: [String, Titanium.Blob, Titanium.Filesystem.File]
    platforms: [android]

  - name: overflowIcon
    summary: Image to be used for the overflow menu.
    description: |
        This property is used only when the Toolbar is used as an ActionBar.
    type: [String, Titanium.Blob, Titanium.Filesystem.File]
    platforms: [android]

  - name: subtitle
    summary: Text of the subtitle.
    type: String
    platforms: [android]

  - name: subtitleTextColor
    summary: Color for toolbar's subtitle
    type: String
    platforms: [android]

  - name: title
    summary: Text of the title.
    type: String
    platforms: [android]

  - name: titleTextColor
    summary: Color string with any Titanium supported format
    type: String
    platforms: [android]

methods:
  - name: collapseActionViews
    summary: Collapses expanded ActionViews if there is any
    platforms: [android]

  - name: dismissPopupMenus
    summary: Collapses expandend ActionViews and hides overflow menu
    platforms: [android]

  - name: getContentInsetEnd
    summary: Returns the margin at the toolbar's content end.
    returns:
        type: Number
    platforms: [android]

  - name: getContentInsetLeft
    summary: Returns the margin on the left of the toolbar's content.
    returns:
        type: Number
    platforms: [android]

  - name: getContentInsetRight
    summary: Returns the margin on the right of the toolbar's content.
    returns:
        type: Number
    platforms: [android]

  - name: getContentInsetStart
    summary: Returns the margin at the toolbar's content start.
    returns:
        type: Number
    platforms: [android]

  - name: getCurrentContentInsetEnd
    summary: Returns the margin at the toolbar's content end that will be used with the current configuration of the toolbar.
    returns:
        type: Number
    platforms: [android]

  - name: getCurrentContentInsetLeft
    summary: Returns the margin on the left of the toolbar's content that will be used with the current configuration of the toolbar.
    returns:
        type: Number
    platforms: [android]

  - name: getCurrentContentInsetRight
    summary: Returns the margin on the right of the toolbar's content that will be used with the current configuration of the toolbar.
    returns:
        type: Number
    platforms: [android]

  - name: getCurrentContentInsetStart
    summary: Returns the margin at the toolbar's content start that will be used with the current configuration of the toolbar.
    returns:
        type: Number
    platforms: [android]

  - name: hasExpandedActionView
    summary: Checks if the toolbar is currently hosting an expanded action view.
    returns:
        type: Boolean
    platforms: [android]

  - name: hideOverflowMenu
    summary: Hides the overflow menu if there is one.
    platforms: [android]

  - name: isOverflowMenuShowing
    summary: Checks if the toolbar is currently hosting an expanded action view.
    returns:
        type: Boolean
    platforms: [android]

  - name: setContentInsetsAbsolute
    summary: Sets the content margins of the toolbar
    parameters:
      - name: insetLeft
        summary: Offset at the left side of the content
        type: Number
      - name: insetRight
        summary: Offset at the right side of the content
        type: Number
    platforms: [android]

  - name: setContentInsetsRelative
    summary: Sets the content margins relative to the layout direction
    parameters:
      - name: insetStart
        summary: Offset before the start of the content
        type: Number
      - name: insetEnd
        summary: Offset after the end of the content
        type: Number
    platforms: [android]

  - name: showOverflowMenu
    summary: Shows the overflow menu if there is one
    platforms: [android]

examples:
  - title: Simple Toolbar
    example: |
        The following code excerpt creates a simple toolbar, placed at the bottom of the window.

        ``` js
        var win = Ti.UI.createWindow({
            backgroundColor: 'white'
        });

        var send = Ti.UI.createButton({
            title: 'Send'
        });

        var camera = Ti.UI.createButton({
            title: 'Camera'
        });

        var cancel = Ti.UI.createButton({
            title: 'Cancel'
        });

        var toolbar = Ti.UI.createToolbar({
            items: [send, camera, cancel],
            bottom: 0
        });

        win.add(toolbar);
        win.open();
        ```

  - title: Toolbar (iOS) with extended background
    example: |
        The following code excerpt creates a simple toolbar, placed at the top of the window which extends its background under the status bar. 

        ``` js
        var win = Ti.UI.createWindow({
            backgroundColor: 'white'
        });

        var send = Ti.UI.createButton({
            title: 'Send',
            style: Ti.UI.iOS.SystemButtonStyle.DONE,
        });

        var camera = Ti.UI.createButton({
            systemButton: Ti.UI.iOS.SystemButton.CAMERA,
        });

        var cancel = Ti.UI.createButton({
            systemButton: Ti.UI.iOS.SystemButton.CANCEL
        });

        flexSpace = Ti.UI.createButton({
            systemButton: Ti.UI.iOS.SystemButton.FLEXIBLE_SPACE
        });

        var toolbar = Ti.UI.createToolbar({
            items: [send, flexSpace, camera, flexSpace, cancel],
            top: 20,
            extendBackground: true
        });

        win.add(toolbar);
        win.open();
        ```

        Note the use of the flexible space for positioning the toolbar buttons -- the
        `FLEXIBLE_SPACE` button doesn't appear as a button, but a variable space between the
        controls on either side of it. Available space in the toolbar is divided between all of the
        flexible space buttons in the toolbar. Without the flexible spaces in this example,
        the toolbar buttons would be grouped tightly together on the left side of the toolbar.

  - title: Alloy Example (simple Toolbar)
    example: |
        Simple Toolbar example as an Alloy view.

        ``` xml
        <Alloy>
            <Window>
                <Toolbar bottom="0">

                    <!-- The Items tag sets the Toolbar.items property. -->
                    <Items>
                        <Button id="send" title="Send" />
                        <Button id="camera" title="Camera" />
                        <Button id="cancel" title="Cancel" />
                    </Items>

                </Toolbar>
            </Window>
        </Alloy>
        ```

  - title: Alloy Example (Toolbar as ActionBar)
    example: |
        Example how to set up Toolbar as an ActionBar

        ``` xml
        <Alloy>
            <Window title="My Test App" backgroundColor="gray" customToolbar="toolbar">
                <Toolbar
                    title="MyMenu"
                    subtitle="Subtitle"
                    width="Ti.UI.FILL"
                    top="0"
                    barColor="#639851"
                    displayHomeAsUp="true"
                    homeButtonEnabled="true"
                    overflowIcon="logo.png">

                    <!-- The Items tag sets the Toolbar.items property. -->
                    <Items>
                        <Button id="ok" title="OK"/>
                        <Button id="cancel" title="Cancel"/>
                    </Items>
                </Toolbar>

                <!-- The MenuItem's to be mapped to the toolbar -->
                <Menu>
                    <MenuItem id="item1" title="Settings" showAsAction="Ti.Android.SHOW_AS_ACTION_NEVER"/>
                    <MenuItem id="item2" title="Search" showAsAction="Ti.Android.SHOW_AS_ACTION_NEVER"/>
                </Menu>
            </Window>
        </Alloy>
        ```
