---
name: Titanium.UI.RefreshControl
summary: |
    The RefreshControl is a representation of the native iOS 
    [UIRefreshControl](https://developer.apple.com/documentation/uikit/uirefreshcontrol) 
    and Android [SwipeRefreshLayout](https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.html).
description: |

    You use a `RefreshControl` with a <Titanium.UI.TableView>, <Titanium.UI.ListView> or <Titanium.UI.ScrollView> object. 
    It provides an alternate method to implement **pull to refresh** functionality provided by 
    <Titanium.UI.TableView.headerPullView> and <Titanium.UI.ListView.pullView> properties.
    
    Use the <Titanium.UI.createRefreshControl> method to create a RefreshControl.
    
    **Important iOS 10+ Note**: If you use the RefreshControl inside a <Titanium.UI.Window> that has the `largeTitleEnabled` property
    set to `true`, you also need to set the `extendEdges` property to either `[Ti.UI.EXTEND_EDGE_TOP]` or `[Ti.UI.EXTEND_EDGE_ALL]`
    in order to prevent a flickering of the refresh spinner. In Titanium SDK 8+, the `extendEdges` property will be set to `[Ti.UI.EXTEND_EDGE_ALL]`
    by default to match the native behavior.

extends: Titanium.Proxy
since: { android: "6.2.0", iphone: "3.2.0", ipad: "3.2.0" }
platforms: [android, iphone, ipad, macos]
methods:
  - name: beginRefreshing
    summary: Tells the control that a refresh operation was started programmatically.
    description: |
        Call this method when an external event source triggers a programmatic refresh of your table. 
        This method updates the state of the refresh control to reflect the in-progress refresh operation. 
        When the refresh operation ends, be sure to call the [endRefreshing](Titanium.UI.RefreshControl.endRefreshing) 
        method to return the control to its default state.
        Note: When triggering the refreshing programmatically, the styling is not applied and the refresh control is tinted 
        in the native gray.
  - name: endRefreshing
    summary: Tells the control that a refresh operation has ended.
    description: |
        Call this method at the end of any refresh operation (whether it was initiated programmatically or by the user) 
        to return the refresh control to its default state. 
properties:
  - name: title
    summary: The attributed title of the control. 
    description: |
        Title text is only supported on iOS. Android will ignore this property. 
    type: Titanium.UI.AttributedString
    platforms: [iphone, ipad, macos]
    since: { iphone: "3.2.0", ipad: "3.2.0" }

  - name: tintColor
    summary: The tint color for the refresh control, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>. 
    type: [String, Titanium.UI.Color]
    platforms: [android, iphone, ipad, macos]
    since: { android: "6.2.0", iphone: "3.2.0", ipad: "3.2.0" }

events:
  - name: refreshstart
    summary: | 
        Fired in response to a user initiated an action to refresh the contents of the 
        table view, list view or scroll view.
    platforms: [android, iphone, ipad, macos]
    since: { android: "6.2.0", iphone: "3.2.0", ipad: "3.2.0" }
    properties:
      - name: bubbles
        summary: This is false. This event does not bubble
        type: Boolean
  - name: refreshend
    summary: | 
        Fired in response to a user finished action to refresh the contents of the 
        table view, list view or scroll view.
    platforms: [android, iphone, ipad, macos]
    since: { android: "6.2.0", iphone: "6.0.0", ipad: "6.0.0" }
    properties:
      - name: bubbles
        summary: This is false. This event does not bubble
        type: Boolean
examples:
  - title: Basic Pull To Refresh
    example: |
        A basic sample showing the usage of refreshstart event with endRefreshing functionality.

        ``` js
        const win = Ti.UI.createWindow();
        let counter = 0;
        function genData() {
            const data = [];
            for (let i = 1; i <= 3; i++) {
                data.push({ properties:{ title: `ROW ${counter + i}` } });
            }
            counter += 3;
            return data;
        }
        const section = Ti.UI.createListSection();
        section.items = genData();
        const control = Ti.UI.createRefreshControl({
            tintColor: 'red'
        });
        const listView = Ti.UI.createListView({
            sections: [section],
            refreshControl: control
        });
        control.addEventListener('refreshstart', () => {
            Ti.API.info('refreshstart');
            setTimeout(() => {
                Ti.API.debug('Timeout');
                section.appendItems(genData());
                control.endRefreshing();
            }, 2000);
        });
        win.add(listView);
        win.open();
        ```
