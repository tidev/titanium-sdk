---
name: Titanium.UI.Switch
summary: An on/off switch control.
description: |
    | Android | iOS | Windows |
    | ------- | --- | ------- |
    | ![Android](./switch_android.png) | ![iOS](./switch_ios.png) | ![Windows](./switch_wp.png) |

    The appearance of a `Switch` control varies by platform:

    * On Android, a Switch object can be styled either as a switch, checkbox or
    toggle button based on the <Titanium.UI.Switch.style> property. The checkbox style can
    optionally display a label next to the control.

    * On iOS, a Switch appears as an iOS on/off switch and doesn't have any text associated with it.

    Use the <Titanium.UI.createSwitch> method or **`<Switch>`** Alloy element to create a switch.

extends: Titanium.UI.View
since: "0.8"
excludes:
    properties: [children]
    methods: [add, remove, removeAllChildren, replaceAt]

properties:
  - name: animated
    summary: Determines if there is animation when the switch value changes.
    description: Set to `true` if animation is desired or `false` for no animation.
    type: Boolean
    default: undefined (equivalent to true)
    platforms: [iphone, ipad, macos]
    since: 5.1.1

  - name: color
    summary: Color to use for switch text, as a color name or hex triplet.
    description: For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]
    default: "black"
    platforms: [android]

  - name: enabled
    summary: Determines whether the switch is enabled.
    description: |
         Be careful not to confused this with the [value](Titanium.UI.Switch.value) property, which
         is used to turn the switch on and off.

         Set to `true` to enable or `false` to disable the switch.
    type: Boolean
    default: undefined (equivalent to enabled)

  - name: font
    summary: Font to use for the switch text.
    type: Font
    platforms: [android]

  - name: style
    summary: Style of the switch.
    description: |
        For Titanium versions older than 10.0.0, this is an Android only property and must be assigned
        a `SWITCH_STYLE_*` constant from the <Titanium.UI> module.
    type: Number
    constants: Titanium.UI.SWITCH_STYLE_*
    platforms: [android, iphone, ipad, macos]
    since: {android: 0.8.0, iphone: 10.0.0, ipad: 10.0.0, macos: 10.0.0}
    default: <Titanium.UI.SWITCH_STYLE_SLIDER>

  - name: textAlign
    summary: |
        Horizontal text alignment of the switch title.
    description: |
        This property is only applicable when the switch [style](Titanium.UI.Switch.style) is set to
        [SWITCH_STYLE_CHECKBOX](Titanium.UI.SWITCH_STYLE_CHECKBOX),
        [SWITCH_STYLE_SLIDER](Titanium.UI.SWITCH_STYLE_SLIDER), or
        [SWITCH_STYLE_TOGGLE_BUTTON](Titanium.UI.SWITCH_STYLE_TOGGLE_BUTTON),

        This property is only effective if the [width](Titanium.UI.Switch.width) property is set to a
        value greater than the width of the [title](Titanium.UI.Switch.title) contents.
    type: [String, Number]
    constants: Titanium.UI.TEXT_ALIGNMENT_*
    default: |
        <Titanium.UI.TEXT_ALIGNMENT_CENTER> (toggle button, Android),
        <Titanium.UI.TEXT_ALIGNMENT_LEFT> (slider, Android),
        <Titanium.UI.TEXT_ALIGNMENT_LEFT> (checkbox, Android)
    platforms: [android]

  - name: title
    summary: Text to display next to the switch, when the checkbox or slider style is in use.
    description: |
        This property is only effective when the [style](Titanium.UI.Switch.style) property is set to
        [SWITCH_STYLE_CHECKBOX](Titanium.UI.SWITCH_STYLE_CHECKBOX) or
        [SWITCH_STYLE_SLIDER](Titanium.UI.SWITCH_STYLE_SLIDER).

        Use the [textAlign](Titanium.UI.Switch.textAlign) property to align this text within the switch.
    type: String
    platforms: [android]

  - name: titleOff
    summary: Text to display on the switch in its "off" state, when the toggle button style is in use.
    description: |
        Set to an empty string to remove title text.

        It is typically useful to set the `width` and/or `height` properties, to prevent the switch
        changing size between its on/off state.
    type: String
    default: Off
    platforms: [android]

  - name: titleOn
    summary: Text to display on the switch in its "on" state, when the toggle button style is in use.
    description: |
        Set to an empty string to remove title text.

        It is typically useful to set the `width` and/or `height` properties, to prevent the switch
        changing size between its on/off state.
    type: String
    default: On
    platforms: [android]

  - name: tintColor
    summary: The color used to tint the outline of the switch when it is turned off.
    type: [String, Titanium.UI.Color]
    default: undefined
    platforms: [iphone, ipad, macos]
    since: "3.3.0"

  - name: onTintColor
    summary: The color used to tint the appearance of the switch when it is turned on.
    type: [String, Titanium.UI.Color]
    default: undefined
    platforms: [iphone, ipad, macos]
    since: "3.3.0"

  - name: thumbTintColor
    summary: The color used to tint the appearance of the thumb.
    type: [String, Titanium.UI.Color]
    default: undefined
    platforms: [iphone, ipad, macos]
    since: "3.3.0"

  - name: value
    summary: |
        Indicates whether the switch has been turned on or off by the user. May also be set
        programmatically.
    description: |
        Set to `true` to turn on and `false` to turn off the switch.

        On Android, if this property is not defined, the rendered state of the switch is off.

        On iOS, be aware that this property must be set when the switch is rendered, otherwise it
        will not be visible. This is a known issue.
    type: Boolean
    default: undefined (visual state off, Android)

  - name: verticalAlign
    summary: Vertical alignment for the text field.
    type: [Number,String]
    constants: Titanium.UI.TEXT_VERTICAL_ALIGNMENT_*
    default: Titanium.UI.TEXT_VERTICAL_ALIGNMENT_CENTER
    platforms: [android]

events:
  - name: change
    summary: Fired when the switch value changes.
    properties:
      - name: value
        summary: New value of the switch.
        type: Boolean

  - name: click
    summary: Fired when the device detects a click against the view.
    platforms: [android]
    description: |
        There is a subtle difference between singletap and click events.

        A singletap event is generated when the user taps the screen briefly
        without moving their finger. This gesture will also generate a click event.

        However, a click event can also be generated when the user touches,
        moves their finger, and then removes it from the screen.

        The click event can also be generated by a trackball click.

        If you want to receive and trigger the value of switch, please use the `change`
        event instead.
    properties:
      - name: x
        type: Number
        summary: X coordinate of the event from the `source` view's coordinate system.

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

examples:
  - title: Simple Switch Example
    example: |
        Create a standard switch, using default values, and output value property on each `change`
        event.

        ``` js
        var win = Ti.UI.createWindow({
          backgroundColor: 'white'
        });

        var basicSwitch = Ti.UI.createSwitch({
          value:true // mandatory property for iOS
        });
        win.add(basicSwitch);

        basicSwitch.addEventListener('change',function(e){
          Ti.API.info('Switch value: ' + basicSwitch.value);
        });

        win.open();

        // print initial value
        Ti.API.info('Switch value: ' + basicSwitch.value);
        ```

  - title: Toggle Button Switch Example (Android)
    example: |
        Create a standard (toggle button) switch with a customized title for each on/off state, and
        output value property on each `change` event.

        ``` js
        var win = Ti.UI.createWindow({
          backgroundColor: 'white'
        });

        var basicSwitch = Ti.UI.createSwitch({
          style: Ti.UI.SWITCH_STYLE_TOGGLE_BUTTON,
          titleOn:'Notifications Enabled',
          titleOff:'Notifications Disabled',
          value:true,
          width: 200, height:120
        });
        win.add(basicSwitch);

        basicSwitch.addEventListener('change',function(e){
          Ti.API.info('Switch value: ' + basicSwitch.value);
        });

        win.open();
        ```

  - title: Checkbox Switch Example (Android)
    example: |
        Create a checkbox switch, and output value property on each `change` event.

        ``` js
        var win = Ti.UI.createWindow({
          backgroundColor: 'white'
        });

        var basicSwitch = Ti.UI.createSwitch({
          style: Ti.UI.SWITCH_STYLE_CHECKBOX,
          textAlign:Ti.UI.TEXT_ALIGNMENT_CENTER,
          title:'Notifications',
          value:true,
          width: 300 // necessary for textAlign to be effective
        });
        win.add(basicSwitch);

        basicSwitch.addEventListener('change',function(e){
          Ti.API.info('Switch value: ' + basicSwitch.value);
        });

        win.open();
        ```

  - title: Alloy XML Markup
    example: |
        Previous simple switch example as an Alloy view.

        switchexample.xml:

        ``` xml
        <Alloy>
            <Window id="win" backgroundColor="white">
                <Switch id="basicSwitch" value="true" onChange="outputState"/>
            </Window>
        </Alloy>
        ```

        switchexample.js:

        ``` js
        function outputState(){
            Ti.API.info('Switch value: ' + $.basicSwitch.value);
        }
        ```
