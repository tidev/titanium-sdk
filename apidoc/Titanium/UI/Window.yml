---
name: Titanium.UI.Window
summary: The Window is an empty drawing surface or container.
description: |
    To create a window, use the <Titanium.UI.createWindow> method or a **`<Window>`** Alloy element.

    A window is a top-level container which can contain other views. Windows can
    be *opened* and *closed*.  Opening a window causes the window and its child
    views to be added to the application's render stack, on top of any previously opened
    windows. Closing a window removes the window and its children from the render stack.

    Windows *contain* other views, but in general they are not *contained* inside
    other views. There are a few specialized views that manage windows:

    * [NavigationWindow](Titanium.UI.NavigationWindow)
    * [SplitWindow](Titanium.UI.iOS.SplitWindow)
    * [TabGroup](Titanium.UI.TabGroup)
    * [Tab](Titanium.UI.Tab)

    By default, windows occupy the entire screen except for the navigation bar,
    status bar, and in the case of windows contained in tab groups, the tab bar.
    To take up the entire screen, covering any other UI, specify `fullscreen:true`
    when creating the window.

    ### Pass Context Between Windows

    To pass data between windows, use a
    [CommonJS module](https://docs.appcelerator.com/platform/latest/#!/guide/CommonJS_Modules_in_Titanium)
    to save information from one window then retrieve it in another.  In the example below, the foo
    module exposes two methods to store and retrieve an object.  The first window of the project
    loads the foo module and uses the set method to store some data before opening the second window.
    The second window loads the same module and is able to retrieve the content saved by the first
    window with the get method.

    Note that for Alloy projects, you can simply pass the context as the second argument of the
    Alloy.createController method, then retrieve the data with the special variable `$.args`
    in the controller code.

    `app/lib/foo.js`:
    ``` js
    // For a classic Titanium project, save the file to 'Resources/foo.js'
    var data = {};
    function setData (obj){
        data = obj;
    }
    function getData () {
        return data;
    }

    // The special variable 'exports' exposes the functions as public
    exports.setData = setData;
    exports.getData = getData;
    ```

    `app/views/index.xml`:
    ``` xml
    <Alloy>
        <Window backgroundColor="blue">
            <Label onClick="openWindow">Open the Red Window!</Label>
        </Window>
    </Alloy>
    ```

    `app/controllers/index.js`:
    ``` js
    var foo = require('foo');
    foo.setData({foobar: 42});

    function openWindow () {
        var win2 = Alloy.createController('win2').getView();
        // For Alloy projects, you can pass context
        // to the controller in the Alloy.createController method.
        // var win2 = Alloy.createController('win2', {foobar: 42}).getView();
        win2.open();
    }

    $.index.open();
    ```

    `app/views/win2.xml`:
    ``` xml
    <Alloy>
        <Window backgroundColor="red">
            <Label id="label">I am a red window.</Label>
        </Window>
    </Alloy>
    ```

    `app/controllers/win2.js`:
    ``` js
    var foo = require('foo');
    $.label.text = foo.getData().foobar;

    // For Alloy projects, you can also pass in context
    // with the Alloy.createController method and retrieve
    // it in the controller code.
    // $.label.text = $.args.foobar;
    ```

    ### Modal Windows

    In the user interface, a modal window is a window that blocks the main application UI until the
    modal window is dismissed.  A modal window requires the user to interact with it to resume the
    normal flow of the application.  For example, if an action requires the user to login, the
    application can present a login window, then after the user is authenticated, the normal flow
    of the application can be resumed.

    To create a modal window, set the `modal` property to `true` in the dictionary passed to
    either the `Titanium.UI.createWindow()` method or the Window object's `open()` method.

    #### Android Behavior

    The Android platform does not has the concept of a modal window but instead uses modal
    dialogs. You are probably looking for a <Titanium.UI.AlertDialog> or <Titanium.UI.OptionDialog> and
    the `androidView` property rather than a modal window.

    However, if you know what you are doing and use `modal`, Titanium creates a window with
    a translucent background (if the background properties are not set).

    The combination of `fullscreen:true` and `modal:true` will not work as expected.
    If the background window displays the status bar or action bar, it will be visible behind the modal
    window.

    Note that Titanium will allow a non-modal window to open on top of a modal window on
    Android.

    #### iOS Behavior

    By default, if you do not set a `backgroundColor`, the modal's background color will be the
    value set to `Titanium.UI.backgroundColor`.

    The modal window will not show the background window stack even if you make the modal translucent.
    For fullscreen modals, when the modal appears, the background window stack is removed. For
    non-fullscreen modals on the iPad, the background will be opaque gray if a background color
    is not specified.

    By default, modal windows appear from the bottom of the screen and slide up. To change the default
    transition, set the `modalTransitionStyle` property to a
    `Titanium.UI.iOS.MODAL_TRANSITION_STYLE_*` constant in the dictionary passed to the Window
    object's `open()` method.

    Modal windows should not support orientation modes that the window they are opened over do not
    support. Doing otherwise *may* cause bad visual/redraw behavior after the modal is dismissed,
    due to how iOS manages modal transitions.

    Starting with Release 3.1.3, if the `orientationModes` property of a modal window is undefined,
    then the orientations supported by this window would be the orientation modes specified by
    the `tiapp.xml` with the `UISupportedInterfaceOrientations` key.

    iOS does not allow opening non-modal windows on top of a modal window.

    ##### iPad Features

    In addition to full-screen modal windows, iPad supports "Page sheet"
    and "Form sheet" style windows:

    * **Page sheet** style windows have a fixed width, equal to the width of the screen
      in portait mode, and a height equal to the *current* height of the screen. This means
      that in portrait mode, the window covers the entire screen. In landscape mode,
      the window is centered on the screen horizontally.

    * **Form sheet** style windows are smaller than the screen size, and centered on the screen.

    The example below is a modal window using the Form sheet style:

    <img src="./window-modal.png" width="400" />

    You can create this type of modal window on iPad with the following code snippet:

    ``` js
    var win = Ti.UI.createNavigationWindow({
        window: Ti.UI.createWindow({
            title: "Modal Window"
        })
    });

    win.open({
        modal: true,
        modalTransitionStyle: Ti.UI.iOS.MODAL_TRANSITION_STYLE_FLIP_HORIZONTAL,
        modalStyle: Ti.UI.iOS.MODAL_PRESENTATION_FORMSHEET
    });
    ```

    ### Animations

    Windows can be animated like a [View](Titanium.UI.View), such as using an animation
    to open or close a window.  The example below creates a window
    that opens from small to large with a bounce effect.  This is done by applying a
    transformation at initialization time that scales the original size of the window to 0.
    When the window is opened, a new 2D transformation is applied that will scale the window
    size from 0 to 110% of it's original size, then, after 1/20th of a second, it is scaled
    back to it's original size at 100%. This gives the bounce effect during animation.

    `app/views/index.xml`:
    ``` xml
    <Alloy>
        <Window backgroundColor="blue" onPostlayout="animateOpen" >
            <Label color="orange">Animated Window</Label>
        </Window>
    </Alloy>
    ```

    `app/controllers/index.js`:
    ``` js
    $.index.transform = Titanium.UI.createMatrix2D().scale(0);
    $.index.open();

    var a = Ti.UI.createAnimation({
        transform : Ti.UI.createMatrix2D().scale(1.1),
        duration : 2000,
    });
    a.addEventListener('complete', function() {
        $.index.animate({
            transform: Ti.UI.createMatrix2D(),
            duration: 200
        });
    });

    function animateOpen() {
        $.index.animate(a);
    }
    ```

    Note that to animate an Android window while you open it, you need to follow a specific
    procedure which is explained below in "Window Transitions in Android".

    ### iOS Platform Notes

    #### iOS Transition Animations

    iOS contains built-in transition animations when switching between non-modal windows. In the Window's
    `open` method, set the `transition` property to a `Titanium.UI.iOS.AnimationStyle` constant to use an animation.
    For example, to flip right-to-left between two windows:

    `app/views/index.xml`:
    ``` xml
    <Alloy>
        <Window backgroundColor="blue" onOpen="animateOpen">
            <Label id="label">I am a blue window!</Label>
        </Window>
    </Alloy>
    ```

    `app/controllers/index.js`
    ``` js
    function animateOpen() {
        Alloy.createController('win2').getView().open({
            transition: Ti.UI.iOS.AnimationStyle.FLIP_FROM_LEFT
        });
    }
    $.index.open();
    ```

    `app/views/win2.xml`:
    ``` xml
    <Alloy>
        <Window backgroundColor="red">
            <Label id="label">I am a red window!</Label>
        </Window>
    </Alloy>
    ```

    In the above example, the red window will be animated from the right-to-left over the blue window.

    You can create transition animations when opening and closing windows in
    either a <Titanium.UI.iOS.NavigationWindow> or <Titanium.UI.Tab>.

    Use the <Titanium.UI.iOS.createTransitionAnimation> method to specify an animation objects to hide and
    show the window, then set the newly created TransitionAnimation object to the window's
    <Titanium.UI.Window.transitionAnimation> property.

    In the example below, the windows are closed by rotating them upside down while simulatenously
    making them transparent:

    `app/views/index.xml`:
    ``` xml
    <Alloy>
        <NavigationWindow platform="ios">
            <Window id="redwin" title="Red Window" backgroundColor="red">
                <Button id="button" onClick="openBlueWindow">Open Blue Window</Button>
            </Window>
        </NavigationWindow>
    </Alloy>
    ```

    `app/controllers/index.js`:
    ``` js
    function openBlueWindow(e) {
        var bluewin = Alloy.createController('bluewin').getView();
        $.index.openWindow(bluewin);
    }

    $.redwin.transitionAnimation = Ti.UI.iOS.createTransitionAnimation({
        duration: 300,
        // The show transition makes the window opaque and rotates it correctly
        transitionTo: {
            opacity: 1,
            duration: 300,
            transform: Ti.UI.createMatrix2D()
        },
        // The hide transition makes the window transparent and rotates it upside down
        transitionFrom: {
            opacity: 0,
            duration: 300 / 2,
            transform: Ti.UI.createMatrix2D().rotate(180),
        }
    });

    $.index.open();
    ```

    `app/views/bluewin.xml`:
    ``` xml
    <Alloy>
        <Window title="Blue Window" backgroundColor="blue" opacity="0">
            <Button onClick="closeWindow">Close Window</Button>
        </Window>
    </Alloy>
    ```

    `app/controllers/bluewin.js`:
    ``` js
    function closeWindow(){
        $.bluewin.close();
    }

    $.bluewin.transitionAnimation = Ti.UI.iOS.createTransitionAnimation({
        duration: 300,
        // The show transition makes the window opaque and rotates it correctly
        transitionTo: {
            opacity: 1,
            duration: 300,
            transform: Ti.UI.createMatrix2D()
        },
        // The hide transition makes the window transparent and rotates it upside down
        transitionFrom: {
            opacity: 0,
            duration: 300 / 2,
            transform: Ti.UI.createMatrix2D().rotate(180),
        }
    });

    $.bluewin.transform = Ti.UI.createMatrix2D().rotate(180);
    ```

    ### Android Platform Notes

    #### Window Transitions in Android

    A window is associated with a new Android [Activity](Titanium.Android.Activity). The only way
    to animate the opening or closing of an Activity in Android is to apply an animation _resource_
    to it. Passing a <Titanium.UI.Animation> object as a parameter to <Titanium.UI.Window.open>
    or <Titanium.UI.Window.close> will have no effect.

    Instead, in the parameter dictionary you pass to <Titanium.UI.Window.open> or <Titanium.UI.Window.close>,
    you should set the `activityEnterAnimation` and `activityExitAnimation` keys to
    animation resources. `activityEnterAnimation` should be set to the animation you want to run
    on the incoming activity, while `activityExitAnimation` should be set to the animation you
    want to run on the outgoing activity that you are leaving.

    Animation resources are available through the `R` object. Use either <Titanium.Android.R> for
    built-in resources or <Titanium.App.Android.R> for resources that you package in your application.

    As an example, you may wish for the window that you are opening to fade in while the window
    you are leaving should fade out:

    ``` js
    var win2 = Ti.UI.createWindow();
    win2.open({
        activityEnterAnimation: Ti.Android.R.anim.fade_in,
        activityExitAnimation: Ti.Android.R.anim.fade_out
    });
    ```

    See the official Android [R.anim](https://developer.android.com/reference/android/R.anim.html) documentation
    for information about built-in animations.

    For information on creating your own animation resource XML files, see
    "[View Animation](https://developer.android.com/guide/topics/resources/animation-resource.html#View)"
    in Android's Resources documentation. After creating an animation resource file, you can place it under
    `platform/android/res/anim` in your Titanium project folder and it will be packaged in your app's APK
    and then available via <Titanium.App.Android.R>.

    #### Material design transitions in Android

    You can provide transition between common elements among participating activities. For example in a master-detail pattern,
    clicking on a row item animates the common elements of image, title smoothly into details activity as if they are part of
    the same scene. This seamless animation is called shared element transition and can be achieved by the following steps.

    Say window A is opening window B.
    Firstly, specify a unique `transitionName` to the common UI elements between the two windows.
    Next use `addSharedElement` method on window B passing the window A common UI element and the transition name. This tells the system
    which views are shared between windows and performs the transition between them. Note that we specify the UI elements of window A
    since the system needs the source element and connects the destination element from the shared transition name once window B is created
    and shown.

    For example to transition a title label in window A to a title label in window B.

    ``` js
    // Create label in window A with a unique transitionName.
    var titleInWinA = new Ti.UI.createLabel({
        text:'Top 10 pics from Mars!',
        left:70, top: 6,
        width:200, height: 30,
        transitionName: 'title'
    });
    windowA.add(titleInWinA);

    // Creating label in window B, note that the same transitionName is used.
    var titleInWinB = new Ti.UI.createLabel({
        text:'Top 10 pics from Mars!',
        left:50, top: 10,
        width:200, height: 30,
        transitionName: 'title'
    });

    // Before opening window B specify the common UI elements.
    windowB.addSharedElement(titleInWinA, "title");
    windowB.open();
    ```

    Further you can use `activityEnterTransition`, `activityExitTransition`, `activityReenterTransition`
    and `activityReturnTransition` to customize the way activities transition into the scene. These are intended
    to be used with views set up as "shared elements" via the `addSharedElement()` method where these views
    will be moved from window to the other. As of Titanium 8.0.1, you don't have to add views as shared elements
    to use these transition animations, while in older version of Titanium that was required.

    See the official Android [Activity Transitions](https://developer.android.com/training/material/animations.html#Transitions)
    documentation for more information and supported transitons.

    #### Android "root" Windows

    In Android, you may wish to specify that a window which you create (such as the first
    window) should be considered the root window and that the application should exit when
    the back button is pressed from that window.  This is particularly useful if your application
    is not using a Tab Group and therefore the splash screen window is appearing whenever you
    press the back button from your lowest window on the stack.

    To indicate that a particular window should cause an application to exit when the back
    button is pressed, pass `exitOnClose: true` as one of the creation arguments, as shown here:

    ``` js
    var win = Titanium.UI.createWindow({
      title: 'My Root Window',
      exitOnClose: true
    });
    ```

    Starting with Release 3.2.0, the root window's `exitOnClose` property is set to `true` by
    default.  Prior to Release 3.2.0, the default value of the property was `false` for all windows.
extends: Titanium.UI.View
since: "0.9"
excludes:
    methods: [removeAllChildren]

methods:
  - name: addSharedElement
    summary: Adds a common UI element to participate in window transition animation.
    description: |
        Available from Android 5.0. Use the current window's UI element that is contextually shared with the other window.
    parameters:
      - name: view
        summary: The shared view from the current window.
        type: Titanium.UI.View
      - name: transitionName
        summary: The assigned common transition name of UI elements in both windows.
        type: String
    since: "5.2.0"
    platforms: [android]
    osver: {android: {min: 5.0}}

  - name: close
    summary: Closes the window.
    description: |
        Android only supports the argument type [closeWindowParams](closeWindowParams).
    parameters:
      - name: params
        summary: Animation or display properties to use when closing the window.
        type: [Titanium.UI.Animation, Dictionary<Titanium.UI.Animation>, closeWindowParams]
        optional: true
    returns:
      type: Promise<any>
      summary: |
          Starting in SDK 10.0.0, this method returns a `Promise` that will be resolved once the window is closed,
          akin to adding a one-time listener for the `close` event. If the window fails to close (for example, because
          it was not yet open) the `Promise` will be rejected.

  - name: hideNavBar
    summary: Hides the navigation bar.
    description: |
        If the window is not displayed in a <Titanium.UI.NavigationWindow>, this method has no effect.
    parameters:
      - name: options
        summary: |
            Options dictionary supporting a single `animated` boolean property to determine whether
            the navigation bar will be animated (default) while being hidden. Note that the default here is equivalent to `{ animated: true }`
        type: AnimatedOptions
        optional: true
        default: "{ animated: true }"
    platforms: [iphone, ipad, macos]

  - name: hideTabBar
    summary: Hides the tab bar. Must be called before opening the window.
    description: |
        To hide the tab bar when opening a window as a child of a tab, call
        `hideTabBar` or set `tabBarHidden` to `true` **before** opening the window.

        If the window is not a child of a tab, this method has no effect.
    platforms: [iphone, ipad, macos]

  - name: open
    summary: Opens the window.
    parameters:
      - name: params
        summary: Animation or display properties to use when opening the window.
        type: openWindowParams
        optional: true
    returns:
      type: Promise<any>
      summary: |
          Starting in SDK 10.0.0, this method returns a `Promise` that will be resolved once the window is opened,
          akin to adding a one-time listener for the `open` event. If the window fails to open (for example, because
          it is already opened or opening) the `Promise` will be rejected.

  - name: removeAllSharedElements
    summary: Clears all added shared elements.
    description: |
        Available from Android 5.0. Use this method to clear all shared elements. This will not remove the views from view hierarchy.
    since: "5.2.0"
    platforms: [android]
    osver: {android: {min: 5.0}}

  - name: setToolbar
    summary: Sets the array of items to show in the window's toolbar.
    parameters:
      - name: items
        summary: Array of button objects to show in the window's toolbar.
        type: Array<Object>
      - name: params
        summary: Parameters to control the toolbar appearance.
        type: windowToolbarParam
        optional: true
    platforms: [iphone, ipad, macos]

  - name: showNavBar
    summary: Makes the navigation bar visible.
    description: |
        If the window is not displayed in a <Titanium.UI.NavigationWindow>, this method has no effect.
    parameters:
      - name: options
        summary: |
            Options dictionary supporting a single `animated` boolean property to determine whether
            the navigation bar will be animated (default) while being shown. Note that the default here is equivalent to `{ animated: true }`
        type: AnimatedOptions
        optional: true
        default: "{ animated: true }"
    platforms: [iphone, ipad, macos]

  - name: showToolbar
    summary: Makes the bottom toolbar visible.
    description: |
        If the window is not displayed in a <Titanium.UI.NavigationWindow>, this method has no effect.
        Note: This method is only intended to work with toolbars that are created using [setToolbar](Titanium.UI.Window.setToolbar).
        It will not have any effect on toolbars added manually to the window.
    parameters:
      - name: options
        summary: |
            Options dictionary supporting a single `animated` boolean property to determine whether
            the toolbar will be animated (default) while being shown. Note that the default here is equivalent to `{ animated: true }`
        type: AnimatedOptions
        optional: true
        default: "{ animated: true }"
    platforms: [iphone, ipad, macos]
    since: {iphone: "5.4.0", ipad: "5.4.0", macos: "9.2.0"}

  - name: hideToolbar
    summary: Makes the bottom toolbar invisible.
    description: |
        If the window is not displayed in a <Titanium.UI.NavigationWindow>, this method has no effect.
        Note: This method is only intended to work with toolbars that are created using [setToolbar](Titanium.UI.Window.setToolbar).
        It will not have any effect on toolbars added manually to the window.
    parameters:
      - name: options
        summary: |
            Options dictionary supporting a single `animated` boolean property to determine whether
            the toolbar will be animated (default) while being hidden. Note that the default here is equivalent to `{ animated: true }`
        type: AnimatedOptions
        optional: true
        default: "{ animated: true }"
    platforms: [iphone, ipad, macos]
    since: {iphone: "5.4.0", ipad: "5.4.0", macos: "9.2.0"}

events:
  - name: android:back
    deprecated:
        since: "3.0.0"
        removed: "9.0.0"
        notes: Use the [Titanium.UI.Window.androidback](Titanium.UI.Window.androidback) event instead.
    platforms: [android]
    summary: Fired when the Back button is released.
    description: |
        Setting a listener disables the default key handling for the Back button.
        To restore default behavior, remove the listener. It is recommended that you only
        have one handler per window.

  - name: android:camera
    deprecated:
        since: "3.0.0"
        removed: "9.0.0"
        notes: Use the [Titanium.UI.Window.androidcamera](Titanium.UI.Window.androidcamera) event instead.
    summary: Fired when the Camera button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per window.
    platforms: [android]

  - name: android:focus
    deprecated:
        since: "3.0.0"
        removed: "9.0.0"
        notes: Use the [Titanium.UI.Window.androidfocus](Titanium.UI.Window.androidfocus) event instead.
    summary: Fired when the Camera button is half-pressed then released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per window.
    platforms: [android]

  - name: android:search
    deprecated:
        since: "3.0.0"
        removed: "9.0.0"
        notes: Use the [Titanium.UI.Window.androidsearch](Titanium.UI.Window.androidsearch) event instead.
    summary: Fired when the Search button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have
        one handler per window.
    platforms: [android]

  - name: android:voldown
    deprecated:
        since: "3.0.0"
        removed: "9.0.0"
        notes: Use the [Titanium.UI.Window.androidvoldown](Titanium.UI.Window.androidvoldown) event instead.
    summary: Fired when the volume down button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per window.
    platforms: [android]

  - name: android:volup
    deprecated:
        since: "3.0.0"
        removed: "9.0.0"
        notes: Use the [Titanium.UI.Window.androidvolup](Titanium.UI.Window.androidvolup) event instead.
    summary: Fired when the volume up button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per window.
    platforms: [android]

  - name: androidback
    platforms: [android]
    summary: Fired when the back button is pressed by the user.
    description: |
        This event is fired when the current window's activity detects
        a back button press by the user to navigate back.

        By default this event would trigger the current activity to be finished
        and removed from the task stack. Subscribing to this event with a listener
        will prevent the default behavior. To finish the activity from your listener
        just call the *close* method of the window.

        This event replaces the android:back event. Some behavior
        changes may exist such as the event no longer firing when the
        user dismisses the keyboard with the back button or when the
        user closes a full-screen video which is embedded in a web view
        with the back button.

        As of 5.0.0, you can create an event that can prevent accidental closure of the
        app due to hitting the back button to many times.

        ``` js
        var win = Ti.UI.createWindow(
            { // some code... }
        );
        // more code
        win.addEventListener("windows:back", function()
            { alert("Back pressed"); }
        );
        ```
    since: '3.0.0'

  - name: androidcamera
    summary: Fired when the Camera button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per window.
    platforms: [android]
    since: '3.0.0'

  - name: androidfocus
    summary: Fired when the Camera button is half-pressed then released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per window.
    platforms: [android]
    since: '3.0.0'

  - name: androidsearch
    summary: Fired when the Search button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have
        one handler per window.
    platforms: [android]
    since: '3.0.0'

  - name: androidvoldown
    summary: Fired when the volume down button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per window.
    platforms: [android]
    since: '3.0.0'

  - name: androidvolup
    summary: Fired when the volume up button is released.
    description: |
        Setting a listener disables the default key handling for this button. To restore
        default behavior, remove the listener. It is recommended that you only have one
        handler per window.
    platforms: [android]
    since: '3.0.0'

  - name: blur
    summary: Fired when the window loses focus.
    description: |
        On Android, this event also fires before putting the activity in the background
        (before the activity enters the pause state).

        On iOS, this event does not fire before putting the application in the background.
        The application needs to monitor the <Titanium.App.pause> event.
        See <Titanium.App> for more information on the iOS application lifecycle.

  - name: close
    summary: Fired when the window is closed.

  - name: focus
    summary: Fired when the window gains focus.
    description: |
        The listener for this event must be defined before this window
        is opened.

        On Android, this event also fires when the activity enters the foreground
        (after the activity enters the resume state).

        On iOS, this event does not fire after the application returns to the foreground
        if it was previously backgrounded.
        The application needs to monitor the <Titanium.App.resumed> event.
        See <Titanium.App> for more information on the iOS application lifecycle.
    platforms: [android,  iphone, ipad, macos]

  - name: open
    summary: Fired when the window is opened.
    description: |
        The listener for this event must be defined before this window
        is opened.

properties:
  - name: activity
    summary: |
        Contains a reference to the Android Activity object associated with this window.
    description: |
        An Activity object is not created until the window is opened.
        Before the window is opened, `activity` refers to an empty JavaScript object.
        You can be set properties on this object, but cannot invoke any Activity methods on it.
        Once the window is opened, the actual Activity object is created,
        using any properties set on the JavaScript object. At this point, you can call methods
        on the activity and access any properties that are set when the activity is created,
        for example, [actionBar](Titanium.Android.Activity.actionBar).
    platforms: [android]
    type: Titanium.Android.Activity
    permission: read-only

  - name: backButtonTitle
    summary: Title for the back button. This is only valid when the window is a child of a tab.
    platforms: [iphone, ipad, macos]
    type: String

  - name: backButtonTitleImage
    summary: The image to show as the back button.
        This is only valid when the window is a child of a tab.
    platforms: [iphone, ipad, macos]
    type: [String, Titanium.Blob]

  - name: backgroundColor
    summary: Background color of the window, as a color name or hex triplet.
    description: |
        On Android, to specify a semi-transparent background, set the alpha value using the
        [opacity](Titanium.UI.Window.opacity) property before opening the window.

        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]
    default: Transparent

  - name: barColor
    summary: |
        Background color for the nav bar, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    platforms: [android, iphone, ipad, macos]
    since: {android: "8.0.1", iphone: "0.9", ipad: "0.9"}
    type: [String, Titanium.UI.Color]

  - name: barImage
    summary: Background image for the nav bar, specified as a URL to a local image.
    description: |
        The behavior of this API on iOS has changed from version 3.2.0. Previous versions
        of the SDK created a custom image view and inserted it as a child of the navigation bar.
        The titanium sdk now uses the native call to set the background image of the navigation bar.
        You can set it to a 1px transparent png to use a combination of `barColor` and `hideShadow:true`.
    platforms: [iphone, ipad, macos]
    type: String

  - name: bottom
    summary: Window's bottom position, in platform-specific units.
    description: |
        On Android, this property has no effect.
    type: [Number,String]
    default: 0

  - name: closed
    summary: Determines whether this Window is closed.
    type: Boolean
    default: true
    permission: read-only
    since: "9.1.0"

  - name: exitOnClose
    summary: |
        Boolean value indicating if the application should exit when the Android
        Back button is pressed while the window is being shown or when the window
        is closed programmatically.
    description:  |
        Starting in 3.4.2 you can set this property at any time. In earlier releases you can only set this as a createWindow({...}) option.
    platforms: [android]
    default: |
        true if this is the first window launched else false; prior to Release 3.3.0, the
        default was always false.
    type: Boolean

  - name: extendEdges
    summary: |
        An array of supported values specified using the EXTEND_EDGE constants in <Titanium.UI>.
    description:  |
        This is only valid for windows hosted by navigation controllers or tab bar controllers. This property is used to
        determine the layout of the window within its parent view controller. For example if the window is specified to extend its top edge
        and it is hosted in a navigation controller, then the top edge of the window is extended underneath the navigation bar so that part
        of the window is obscured. If the navigation bar is opaque (translucent property on window is false), then the top edge of the window
        will only extend if <Titanium.UI.Window.includeOpaqueBars> is set to true.

        The default behavior is to assume that no edges are to be extended. Must be specified before **opening** the window.
    type: Array<Number>
    constants: Titanium.UI.EXTEND_EDGE_*
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.1.3", ipad: "3.1.3", macos: "9.2.0"}
    osver: {ios: {min: "7.0"}}

  - name: flagSecure
    summary: |
        Treat the content of the window as secure, preventing it from appearing in screenshots or from being viewed on non-secure displays.
    description: |
        When the value is true, preventing it from appearing in screenshots or from being viewed on non-secure displays.
    platforms: [android]
    type: Boolean
    since: "3.3.0"
    default: false
    availability: creation

  - name: focused
    summary: Determines whether this TextArea has focus.
    type: Boolean
    default: false
    permission: read-only
    since: "9.1.0"

  - name: includeOpaqueBars
    summary: |
        Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar).
    description:  |
        By default edges are only extended to include translucent bars. However if this is set to true, then edges are extended beyond
        opaque bars as well.

        The default behavior assumes that this is false. Must be specified before **opening** the window.
    type: Boolean
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.1.3", ipad: "3.1.3", macos: "9.2.0"}
    osver: {ios: {min: "7.0"}}

  - name: autoAdjustScrollViewInsets
    summary: |
        Specifies whether or not the view controller should automatically adjust its scroll view insets.
    description:  |
        When the value is true, it allows the view controller to adjust its scroll view insets in response
        to the screen areas consumed by the status bar, navigation bar, toolbar and tab bar.

        The default behavior assumes that this is false. Must be specified before **opening** the window.
    type: Boolean
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.1.3", ipad: "3.1.3", macos: "9.2.0"}
    osver: {ios: {min: "7.0"}}

  - name: extendSafeArea
    summary: |
        Specifies whether the screen insets/notches are allowed to overlap the window's content or not.
    description:  |
        If set `true`, then the contents of the window will be extended to fill the whole screen and allow the
        system's UI elements (such as a translucent status-bar) and physical obstructions (such as the iPhone X
        rounded corners and top sensor housing) to overlap the window's content. In this case, it is the app
        developer's responsibility to position views so that they're unobstructed. On Android, you can use the
        [Window.safeAreaPadding](Titanium.UI.Window.safeAreaPadding) property after the window has been opened to
        layout your content within the insets.

        If set `false`, then the window's content will be laid out within the safe-area and its child views will be
        unobstructed. For example, you will not need to position a view below the top status-bar.

        Read more about the safe-area layout-guide in the [Human Interface Guidelines](https://developer.apple.com/ios/human-interface-guidelines/overview/iphone-x/).
    platforms: [android, iphone, ipad, macos]
    type: Boolean
    default: '`false` on Android, `true` on iOS.'
    since: {android: "7.5.0", iphone: "6.3.0", ipad: "6.3.0", macos: "9.2.0"}
    availability: creation
    osver: {android: {min: "4.4"}}

  - name: fullscreen
    summary: Boolean value indicating if the window is fullscreen.
    description: |
        A fullscreen window occupies all of the screen space, hiding the status bar. Must be specified
        at creation time or in the `options` dictionary passed to the [Window.open](Titanium.UI.Window.open) method.

        On iOS the behavior of this property has changed. Starting from 3.1.3, if this property is undefined
        then the property is set to the value for UIStatusBarHidden defined in tiapp.xml.
        If that is not defined it is treated as **explicit false**. On earlier versions, opening a window with this property
        undefined would not effect the status bar appearance.
    platforms: [android, iphone, ipad, macos]
    type: Boolean
    default: false

  - name: homeIndicatorAutoHidden
    summary: Boolean value indicating whether the system is allowed to hide the visual indicator for returning to the Home screen.
    description: |
        Set this value true, if you want the system to determine when to hide the indicator. Set this value false,
        if you want the indicator shown at all times. The system takes your preference into account, but setting
        true is no guarantee that the indicator will be hidden.
    type: Boolean
    default: false
    platforms: [iphone, ipad, macos]
    since: {iphone: "7.3.0", ipad: "7.3.0", macos: "9.2.0"}
    osver: {ios: {min: "11.0"}}

  - name: hideShadow
    summary: Set this to true to hide the shadow image of the navigation bar.
    description: |
        This property is only honored if a valid value is specified for the [barImage](Titanium.UI.Window.barImage) property.
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0"}
    type: Boolean
    default: false

  - name: hidesBarsOnSwipe
    summary: Set this to true to hide the navigation bar on swipe.
    description: |
        When this property is set to true, an upward swipe hides the navigation bar and toolbar.
        A downward swipe shows both bars again.  If the toolbar does not have any items, it remains
        visible even after a swipe.
    type: Boolean
    default: false
    platforms: [iphone, ipad, macos]
    since: {iphone: "6.0.0", ipad: "6.0.0", macos: "9.2.0"}
    osver: {ios: {min: "8.0"}}
    availability: creation

  - name: hidesBarsOnTap
    summary: Set this to true to hide the navigation bar on tap.
    description: |
        When the value of this property is true, the navigation controller toggles the hiding and
        showing of its navigation bar and toolbar in response to an otherwise unhandled tap
        in the content area.
    type: Boolean
    default: false
    platforms: [iphone, ipad, macos]
    since: {iphone: "6.0.0", ipad: "6.0.0", macos: "9.2.0"}
    osver: {ios: {min: "8.0"}}
    availability: creation

  - name: hidesBarsWhenKeyboardAppears
    summary: Set this to true to hide the navigation bar when the keyboard appears.
    description: |
        When this property is set to true, the appearance of the keyboard causes the
        navigation controller to hide its navigation bar and toolbar.
    type: Boolean
    default: false
    platforms: [iphone, ipad, macos]
    since: {iphone: "6.0.0", ipad: "6.0.0", macos: "9.2.0"}
    osver: {ios: {min: "8.0"}}
    availability: creation

  - name: hidesBackButton
    summary: Set this to true to hide the back button of navigation bar.
    description: |
        When this property is set to `true`, the navigation window hides its back button.
    platforms: [android, iphone, ipad, macos]
    type: Boolean
    default: false
    since: {android: "8.0.0", iphone: "7.5.0", ipad: "7.5.0", macos: "9.2.0"}

  - name: largeTitleEnabled
    summary: A Boolean value indicating whether the title should be displayed in a large format.
    description: |
        When set to `true`, the navigation bar will use a larger out-of-line
        title view when requested by the current navigation item. To specify when
        the large out-of-line title view appears, see <Titanium.UI.Window.largeTitleDisplayMode>.
    default: false
    type: Boolean
    platforms: [iphone, ipad, macos]
    since: {iphone: "6.3.0", ipad: "6.3.0", macos: "9.2.0"}
    osver: {ios: {min: "11.0"}}

  - name: hidesSearchBarWhenScrolling
    summary: A Boolean value indicating whether the integrated search bar is hidden when scrolling any underlying content.
    description: |
        When the value of this property is true, the search bar is visible only when the scroll position
        equals the top of your content view. When the user scrolls down, the search bar collapses into
        the navigation bar. Scrolling back to the top reveals the search bar again. When the value of
        this property is false, the search bar remains regardless of the current scroll position.
        You must set <Titanium.UI.ListView.showSearchBarInNavBar> or <Titanium.UI.TableView.showSearchBarInNavBar>
        property for this property to have any effect.
    default: true
    type: Boolean
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.1.0", ipad: "8.1.0", macos: "9.2.0"}
    osver: {ios: {min: "11.0"}}

  - name: largeTitleDisplayMode
    summary: The mode to use when displaying the title of the navigation bar.
    description: |
        Automatically use the large out-of-line title based on the state of the
        previous item in the navigation bar. An item with
        `largeTitleDisplayMode = Ti.UI.iOS.LARGE_TITLE_DISPLAY_MODE_AUTOMATIC`
        will show or hide the large title based on the request of the previous
        navigation item. If the first item pushed is set to Automatic, then it
        will show the large title if the navigation bar has `largeTitleEnabled = true`.
    type: Number
    constants: [Titanium.UI.iOS.LARGE_TITLE_DISPLAY_MODE_*]
    default: Titanium.UI.iOS.LARGE_TITLE_DISPLAY_MODE_AUTOMATIC
    platforms: [iphone, ipad, macos]
    since: {iphone: "6.3.0", ipad: "6.3.0", macos: "9.2.0"}
    osver: {ios: {min: "11.0"}}

  - name: left
    summary: Window's left position, in platform-specific units.
    description: |
        On Android, this property has no effect.
    type: [Number,String]
    default: 0

  - name: leftNavButton
    summary: View to show in the left nav bar area.
    description: |
        In an Alloy application you can specify this property with a `<LeftNavButton>` element inside the
        `<Window>` element, for example:
        ``` xml
        <Alloy>
            <TabGroup>
                <Tab>
                    <Window class="container">
                        <LeftNavButton platform=ios>
                            <Button title="Back" onClick="closeWindow" />
                        </LeftNavButton>
                    </Window>
                </Tab>
            </TabGroup>
        </Alloy>
        ```
    platforms: [iphone, ipad, macos]
    type: Titanium.UI.View

  - name: leftNavButtons
    summary: An Array of views to show in the left nav bar area.
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.3.0", ipad: "3.3.0", macos: "9.2.0"}
    type: Array<Titanium.UI.View>

  - name: modal
    summary: Indicates to open a modal window or not.
    description: |
        Set to `true` to create a modal window.

        Must be specified at creation time or in the dictionary passed to the
        [Window.open](Titanium.UI.Window.open) method.

        In the user interface, a modal window is a window that blocks the main application UI until
        the modal window is dismissed.  A modal window requires the user to interact with it to
        resume the normal flow of the application.

        See the "Modal Windows" section for platform-specific information.
    type: Boolean
    default: false

  - name: navBarHidden
    summary: Hides the navigation bar (`true`) or shows the navigation bar (`false`).
    description: |
        #### iOS Platform Notes

        Since Titanium SDK 6.0.0, you can use this property to hide and show the property as well.

        Using this property, the navigation bar will be hidden or shown animated by default. Please note that
        this property will only take effect if the window is used inside a <Titanium.UI.NavigationWindow>
        and will be ignored otherwise. If you want to hide or show the navigation without an animation, use t
        he methods <Titanium.UI.Window.showNavBar> and <Titanium.UI.Window.hideNavBar> with the second parameter
        to specify the animation:

        ``` js
        // "myWindow" is a Ti.UI.Window inside a Ti.UI.NavigationWindow
        myWindow.hideNavBar(true, {animated: false});
        ```

        #### Android Platform Notes

        Since Release 3.3.0, due to changes to support the appcompat library, this property has no
        effect. By default, the action bar is always displayed.  To hide the action bar, see the
        [Android Action Bar guide](https://docs.appcelerator.com/platform/latest/#!/guide/Android_Action_Bar).
    platforms: [android, iphone, ipad, macos]
    default: false
    type: Boolean

  - name: navTintColor
    summary: The tintColor to apply to the navigation bar.
    description: |
        This property is a direct correspondant of the tintColor property of NavigationBar on iOS.
    type: [String, Titanium.UI.Color]
    default: null
    osver: {ios: {min: "7.0"}}
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.1.3", ipad: "3.1.3", macos: "9.2.0"}

  - name: navigationWindow
    summary: The <Titanium.UI.NavigationWindow> instance hosting this window.
    description: |
        Returns the navigation window that hosts this window. Returns `null` if the window is not
        hosted by a navigation window.
    type: Titanium.UI.NavigationWindow
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: {iphone: "7.3.0", ipad: "7.3.0", macos: "9.2.0"}

  - name: opacity
    summary: The opacity from 0.0-1.0.
    description: |
        iOS notes: For modal windows that cover the previous window, the previous window is
        removed from the render stack after the modal window finishes opening. If the
        modal window is semi-transparent, the underlying window will be visible during the
        transition animation, but disappear as soon as the animation is completed. (In general
        all modal windows cover the previous window, except for iPad modal windows using the
        Page sheet or Form sheet style.)

        Android notes: If you set any of `windowSoftInputMode`, `fullscreen`, or `navBarHidden`,
        *and* you wish to use the `opacity` property at any time during the window's lifetime,
        be sure to set an `opacity` value **before** opening the window.  You can later change that
        value -- and you can set it to 1 for full opacity if you wish -- but the important thing
        is that you set it to a value before opening the window if you will want to set it at
        any time during the window's lifetime.

        The technical reason for this is that if the opacity property is present (i.e., has
        been set to something) and a new Android Activity is created for the window,
        then a translucent theme will be used for the Activity.  Window transparency (opacity
        values below 1) will only work in Android if the Activity's theme is translucent, and
        Titanium only uses a translucent theme for an Activity if you set an opacity property
        before opening the window.  Additionally, do not use `opacity` and `fullscreen: true`
        together, because translucent themes in Android cannot hide the status bar.  Finally,
        if you do set the `opacity` property, be sure to also set a `backgroundImage` or
        `backgroundColor` property as well, unless you want the window to be completely
        transparent.
    type: Number

  - name: onBack
    summary: |
        Callback function that overrides the default behavior when the user presses the **Back**
        button.
    description: |
        This was separated from the <Titanium.UI.Window.androidback> event. You need to define this
        callback if you explicitly want to override the back button behavior.
    type: Callback<void>
    platforms: [android]

  - name: orientationModes
    summary: |
        Array of supported orientation modes, specified using the orientation
        constants defined in <Titanium.UI>.
    description: |
        **Note:** Using the `orientationModes` property to force the orientation of non-modal
        windows is considered a bad practice and will not be supported, including forcing the
        orientation of windows inside a NavigationWindow or TabGroup.

        To restrict this window to a certain set of orientations, specify one or more
        of the orientation constants [LANDSCAPE_LEFT](Titanium.UI.LANDSCAPE_LEFT),
        [LANDSCAPE_RIGHT](Titanium.UI.LANDSCAPE_RIGHT), [PORTRAIT](Titanium.UI.PORTRAIT),
        [UPSIDE_PORTRAIT](Titanium.UI.UPSIDE_PORTRAIT).

        `orientationModes` must be set **before** opening the window.

        To determine the current orientation of the *window*, see
        [Window.orientation](Titanium.UI.Window.orientation).
        To determine the current orientation of the *device*, see
        [Gesture.orientation](Titanium.Gesture.orientation).
        To be notified when the device's current orientation changes, add a listener for the
        <Titanium.Gesture.orientationchange> event.

        #### Android Orientation Modes

        On Android, orientation behavior is dependent on the Android SDK level
        of the device itself. Devices running Android 2.3 and above support "sensor portait
        mode" and "sensor landscape mode," in these modes, the device is locked into
        either a portrait or landscape orientation, but can switch between the normal and reverse
        orientations (for example, between PORTRAIT and UPSIDE_PORTRAIT).

        In addition, the definition of portrait or
        landscape mode can vary based on the physical design of the device. For example,
        on some devices <Titanium.UI.LANDSCAPE_LEFT> represents the top of the device being at
        the 270 degree position but other devices may (based on camera position for example)
        treat this position as <Titanium.UI.LANDSCAPE_RIGHT>. In general, applications for
        Android that need to be aware of orientation should try and limit their orientation
        logic to handling either portrait or landscape rather than worrying about the reverse
        modes. This approach will allow the orientation modes to adopt a more natural feel for
        the specific device.

        The following list breaks down the orientation behavior on Android based on the contents
        of the `orientationModes` array:

        1.  Empty array. Enables orientation to be fully controlled by the device sensor.

        2.  Array includes one or both portrait modes **and** one or both landscape modes.
            Enables full sensor control (identical to an empty array).

        3.  Array contains PORTRAIT **and** UPSIDE_PORTRAIT. On Android 2.3 and above,
            enables sensor portrait mode. This means the screen will shift between
            both portrait modes according to the sensor inside the device.

            On Android versions below 2.3, locks screen orientation in normal portrait mode.

        4.  Array contains LANDSCAPE_LEFT **and** LANDSCAPE_RIGHT. On Android 2.3 and above,
            enables sensor landscape mode. This means the screen will shift between both
            landscape modes according to the sensor inside the device.

            On Android versions below 2.3, locks screen orientation in normal landscape mode.

        5.  Array contains **only** [PORTRAIT](Titanium.UI.PORTRAIT). Locks screen orientation
            to normal portrait mode.

        6.  Array contains **only** [LANDSCAPE_LEFT](Titanium.UI.LANDSCAPE_LEFT). Locks screen
            orientation to normal landscape mode.

        7.  Array contains **only** [UPSIDE_PORTRAIT](Titanium.UI.UPSIDE_PORTRAIT). On
            Android 2.3 and above, locks screen in reverse portrait mode.

            On Android versions below 2.3, results are undefined.

        8.  Array contains **only**  [LANDSCAPE_RIGHT](Titanium.UI.LANDSCAPE_RIGHT). On
            Android 2.3 and above, locks screen in reverse landscape mode.

            On Android versions below 2.3, results are undefined.
    platforms: [android, iphone, ipad, macos]
    type: Array<Number>
    constants: [ Titanium.UI.LANDSCAPE_*, Titanium.UI.PORTRAIT, Titanium.UI.UPSIDE_PORTRAIT]
    default: empty array

  - name: orientation
    summary: Current orientation of the window.
    description: |
        To determine the current orientation of the *device*, see
        [Gesture.orientation](Titanium.Gesture.orientation), instead.

        See
        the discussion of the [orientationModes](Titanium.UI.Window.orientationModes)
        property for more information on how the screen orientation is determined.
    platforms: [android, iphone, ipad, macos]
    since: {iphone: "3.0.0", ipad: "3.0.0", macos: "9.2.0"}
    type: Number
    constants: [ Titanium.UI.LANDSCAPE_*, Titanium.UI.PORTRAIT, Titanium.UI.UPSIDE_PORTRAIT]
    permission: read-only

  - name: right
    summary: Window's right position, in platform-specific units.
    description: |
        On Android, this property has no effect.
    type: [Number,String]
    default: 0

  - name: rightNavButton
    summary: View to show in the right nav bar area.
    description: |
        In an Alloy application you can specify this property with a `<RightNavButton>` element in the
        `<Window>` element, for example:

        ``` xml
        <Alloy>
            <TabGroup>
                <Tab>
                    <Window class="container">
                        <RightNavButton platform=ios>
                            <Button title="Back" onClick="closeWindow" />
                        </RightNavButton>
                    </Window>
                </Tab>
            </TabGroup>
        </Alloy>
        ```
    platforms: [iphone, ipad, macos]
    type: Titanium.UI.View

  - name: rightNavButtons
    summary: An Array of views to show in the right nav bar area.
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.3.0", ipad: "3.3.0", macos: "9.2.0"}
    type: Array<Titanium.UI.View>

  - name: safeAreaPadding
    platforms: [android, iphone, ipad, macos]
    summary: The padding needed to safely display content without it being overlapped by the screen insets and notches.
    description: |
        When setting [Window.extendSafeArea](Titanium.UI.Window.extendSafeArea) to `true`, the system's insets
        such as a translucent status bar, translucent navigation bar, and/or camera notches will be allowed to
        overlay on top of the window's content. In this case, it is the app developer's responsibility to
        prevent these insets from overlapping key content such as buttons. This property provides the amount of
        space needed to be added to the left, top, right, and bottom edges of the window root view to do this.

        This property won't return values greater than zero until the window has been opened. It is recommended
        that you read this property via a <Titanium.UI.View.postlayout> event listener since the padding values can
        change when when the app's orientation changes or when showing/hiding the action bar.

        If the [Window.extendSafeArea](Titanium.UI.Window.extendSafeArea) property is set `false`, then the
        returned padding will be all zeros since the root content will be positioned between all insets.

        Below is an example on how to set up a safe-area view container using this property.

        ``` js
        // Set up a window with a translucent top status bar and translucent nav bar.
        // This will only work on Android 4.4 and newer OS versions.
        var win = Ti.UI.createWindow({
            extendSafeArea: true,
            theme: 'Theme.Titanium.NoTitleBar',
            windowFlags: Ti.UI.Android.FLAG_TRANSLUCENT_NAVIGATION | Ti.UI.Android.FLAG_TRANSLUCENT_STATUS
        });

        // Set up a safe-area view to be layed out between the system insets.
        // You should use this as a container for child views.
        var safeAreaView = Ti.UI.createView({
            backgroundColor: 'green'
        });
        win.add(safeAreaView);
        win.addEventListener('postlayout', function() {
            // Update the safe-area view's dimensions after every 'postlayout' event.
            safeAreaView.applyProperties(win.safeAreaPadding);
        });

        // Open the window.
        win.open();
        ```
    type: Padding
    permission: read-only
    since: {android: "7.5.0", iphone: "8.0.0", ipad: "8.0.0", macos: "9.2.0"}

  - name: shadowImage
    summary: Shadow image for the navigation bar, specified as a URL to a local image..
    description: |
        This property is only honored if a valid value is specified for the [barImage](Titanium.UI.Window.barImage) property.
    type: String
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0"}

  - name: splitActionBar
    summary: Boolean value to enable split action bar.
    description: |
        `splitActionBar` must be set **before** opening the window.
        This property indicates if the window should use a [split action bar](https://developer.android.com/guide/topics/ui/actionbar.html#SplitBar)
    platforms: [android]
    type: Boolean
    since: "3.6.0"
    availability: creation
    deprecated:
        since: "6.2.0"
        notes: Deprecated in AppCompat theme. The same behaviour can be achived by using Toolbar.

  - name: statusBarStyle
    summary: The status bar style associated with this window.
    description: |
        Sets the status bar style when this window has focus. This is now the recommended way to control the
        status bar style on the application.

        If this value is undefined, the value is set to UIStatusBarStyle defined in tiapp.xml.
        If that is not defined it defaults to <Titanium.UI.iOS.StatusBar.DEFAULT>.
    type: [Number]
    constants: [ Titanium.UI.iOS.StatusBar.DEFAULT, Titanium.UI.iOS.StatusBar.GRAY,
                 Titanium.UI.iOS.StatusBar.GREY, Titanium.UI.iOS.StatusBar.LIGHT_CONTENT]
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.1.3", ipad: "3.1.3", macos: "9.2.0"}

  - name: sustainedPerformanceMode
    summary: Maintain a sustainable level of performance.
    description: |
        Performance can fluctuate dramatically for long-running apps, because the system throttles
        system-on-chip engines as device components reach their temperature limits. This fluctuation
        presents a moving target for app developers creating high-performance, long-running apps.

        Setting this feature to true will set sustained performance mode for the corresponding window.
        If property is undefined then it defaults to false.

        Note: This feature is only available on supported devices. The functionality is experimental and
        subject to change in future releases. See [Android docs](https://source.android.com/devices/tech/power/performance) for further info.
    type: Boolean
    since: "7.0.0"
    platforms: [android]
    osver: {android: {min: "7.0"}}

  - name: swipeToClose
    summary: Boolean value indicating if the user should be able to close a window using a swipe gesture.
    description: |
        If `false` the user will not be able to swipe from the left edge of the window to close it.
        Note: This property is only used for a window being embedded in a [Ti.UI.Tab](Titanium.UI.Tab) or
        [Ti.UI.NavigationWindow](Titanium.UI.NavigationWindow). It is enabled by default.
    type: Boolean
    platforms: [iphone, ipad, macos]
    since: {iphone: "5.2.0", ipad: "5.2.0", macos: "9.2.0"}
    default: true

  - name: tabBarHidden
    summary: |
        Boolean value indicating if the tab bar should be hidden.
    description: |
        `tabBarHidden` must be set **before** opening the window.

        This property is only valid when the window is the child of a tab.
    platforms: [iphone, ipad, macos]
    type: Boolean

  - name: theme
    summary: Name of the theme to apply to the window.
    description: |
        Set the theme of the window. It can be either a [built-in theme](https://docs.appcelerator.com/platform/latest/#!/guide/Android_Themes-section-34636181_AndroidThemes-Built-inThemes)
        or a [custom theme](https://docs.appcelerator.com/platform/latest/#!/guide/Android_Themes-section-34636181_AndroidThemes-CustomThemes).
    platforms: [android]
    type: String
    since: "3.4.0"
    availability: creation

  - name: title
    summary: Title of the window.
    type: String

  - name: titleAttributes
    summary: Title text attributes of the window.
    description: |
        Use this property to specify the color, font and shadow attributes of the title.
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0"}
    type: titleAttributesParams

  - name: titleControl
    summary: View to show in the title area of the nav bar.
    description: |
        In an Alloy application you can specify this property using a `<TitleControl>` element inside
        `<Window>`, for example:

        ``` xml
        <Alloy>
            <Window>
                <RightNavButton>
                    <Button title="Back" />
                </RightNavButton>
                <LeftNavButton>
                    <Button title="Back" />
                </LeftNavButton>
                <TitleControl>
                    <View backgroundColor="blue" height="100%" width="100%"></View>
                </TitleControl>
            </Window>
        </Alloy>
        ```
    platforms: [iphone, ipad, macos]
    type: Titanium.UI.View

  - name: titleImage
    summary: Image to show in the title area of the nav bar, specified as a local file path or URL.
    platforms: [iphone, ipad, macos]
    type: String

  - name: titlePrompt
    summary: Title prompt for the window.
    platforms: [iphone, ipad, macos]
    type: String

  - name: titleid
    summary: Key identifying a string from the locale file to use for the window title.
    description: Only one of `title` or `titleid` should be specified.
    type: String


  - name: titlepromptid
    summary: Key identifying a string from the locale file to use for the window title prompt.
    description: Only one of `titlePrompt` or `titlepromptid` should be specified.
    platforms: [iphone, ipad, macos]
    type: String

  - name: toolbar
    summary: |
        Array of button objects to show in the window's toolbar.
    description: |
        The toolbar is only shown when the window is inside a <Titanium.UI.NavigationWindow>.
        To display a toolbar when a window is not inside a NavigationWindow, add an instance of a
        <Titanium.UI.iOS.Toolbar> to the window.

        To customize the toolbar, use the [setToolbar()](Titanium.UI.Window.setToolbar) method.

        Since Alloy 1.6.0, you can specify this property using the `<WindowToolbar>` element as a
        child of a `<Window>` element, for example:

        ``` xml
        <Alloy>
            <NavigationWindow>
                <Window>
                    <WindowToolbar>
                        <Button id="send" title="Send" style="Ti.UI.iOS.SystemButtonStyle.DONE" />
                        <FlexSpace/>
                        <Button id="camera" systemButton="Ti.UI.iOS.SystemButton.CAMERA" />
                        <FlexSpace/>
                        <Button id="cancel" systemButton="Ti.UI.iOS.SystemButton.CANCEL" />
                    </WindowToolbar>
                </Window>
            </NavigationWindow>
        </Alloy>
        ```
    platforms: [iphone, ipad, macos]
    type: Array<Titanium.UI.View>

  - name: top
    summary: Window's top position, in platform-specific units.
    description: |
        On Android, this property has no effect.
    type: [Number,String]
    default: 0

  - name: transitionAnimation
    summary: |
        Use a transition animation when opening or closing windows in a
        <Titanium.UI.NavigationWindow> or <Titanium.UI.Tab>.
    description: |
        Create the transition animation using the <Titanium.UI.iOS.createTransitionAnimation>
        method.
    type: Titanium.Proxy
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0"}
    osver: {ios: {min: "7.0"}}

  - name: translucent
    summary: Boolean value indicating if the nav bar is translucent.
    platforms: [iphone, ipad, macos]
    default: true on iOS7 and above, false otherwise.
    type: Boolean

  - name: windowFlags
    summary: Additional flags to set on the Activity Window.
    description: |
        Sets flags such as <Titanium.UI.Android.FLAG_TRANSLUCENT_NAVIGATION> and
        <Titanium.UI.Android.FLAG_TRANSLUCENT_STATUS>. When using multiple flags, you must bitwise-or them together.

        See [WindowManager.LayoutParams](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html) for
        list of additional flags that you can assign to this property. You can assign these Java flags to this property
        by using their numeric constant.

        Setting <Titanium.UI.Window.fullscreen> to `true` automatically sets the [WindowManager.LayoutParams.FLAG_FULLSCREEN](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_FULLSCREEN)
        flag. Setting <Titanium.UI.Window.flagSecure> to true automatically sets the [WindowManager.LayoutParams.FLAG_SECURE](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SECURE) flag.
    platforms: [android]
    type: Number
    since: "3.3.0"
    availability: creation

  - name: windowSoftInputMode
    summary: |
        Determines whether a window's soft input area (ie software keyboard) is visible
        as it receives focus and how the window behaves in order to accomodate it while keeping its
        contents in view.
    description: |
        In order for this property to take effect on an emulator, its Android Virtual Device (AVD)
        must be configured with the `Keyboard Support` setting set to `No`. Note that it is always
        recommended to test an application on a physical device to understand its true behavior.

        This property is capable of representing two settings from the soft input *visibility*
        constatns and soft input *adjustment* constants
        using the [bitwise OR](http://en.wikipedia.org/wiki/Bitwise_operation#OR) operation.

        Note that in JavaScript, bitwise OR is achieved using the single pipe operand. See the
        example for a demonstration.

        For more information, see the official Android Developers website API Reference for
        [Window.setSoftInputMode](https://developer.android.com/reference/android/view/Window.html#setSoftInputMode(int)).
    platforms: [android]
    type: Number
    constants: [Titanium.UI.Android.SOFT_INPUT_STATE_*, Titanium.UI.Android.SOFT_INPUT_ADJUST_*]
    availability: creation
    examples:
      - title: Soft Input Visibility and Adjustment
        example: |
            Create a white window and respond to a click of it to open a red window containing a
            text area. Show the software keyboard automatically as the red window opens.

            ``` js
            var win1 = Ti.UI.createWindow({
              backgroundColor: 'white',
              exitOnClose: true,
              fullscreen: false,
              title: 'Click window to test'
            });

            // use bitwise OR to combine two settings for the windowSoftInputMode property
            var softInput = Ti.UI.Android.SOFT_INPUT_STATE_ALWAYS_VISIBLE | Ti.UI.Android.SOFT_INPUT_ADJUST_PAN;

            win1.addEventListener('click', function(){
            var win2 = Ti.UI.createWindow({
              backgroundColor: 'red',
              fullscreen: false,
              windowSoftInputMode: softInput
            });

            var textArea = Ti.UI.createTextArea({
              value : 'I am a textarea',
              height : 200,
              width : 300,
              top : 200
            });
            win2.add(textArea);
            win2.open();
            });

            win1.open();
            ```
  - name: windowPixelFormat
    summary: Set the pixel format for the Activity's Window.
    description: |
        For more information on pixel formats, see
        [Android SDK Window.setFormat](https://developer.android.com/reference/android/view/Window.html#setFormat(int))
    platforms: [android]
    type: Number
    constants: Titanium.UI.Android.PIXEL_FORMAT_*
    since: "1.8.0"

  - name: activityExitTransition
    summary: The type of transition used when activity is exiting.
    description: |
        Activity A's exit transition determines how views in A are animated when A starts B.
        Applicable for Android 5.0 and above. This transition property will be ignored if `animated` is set to false.
        Will also be ignored unless at least 1 view has been assigned to the `addSharedElement()` method,
        except on Titanium 8.0.1 and higher where shared elements are no longer required to do transitions.

        See "Material design activity transitions in Android" in the main description of Titanium.UI.Window
        for more information.
    type: Number
    constants: [ Titanium.UI.Android.TRANSITION_EXPLODE, Titanium.UI.Android.TRANSITION_FADE_*,
                 Titanium.UI.Android.TRANSITION_SLIDE_*, Titanium.UI.Android.TRANSITION_NONE ]
    default: If not specified uses platform theme transition.
    since: "5.2.0"
    availability: creation
    platforms: [android]
    osver: {android: {min: 5.0}}

  - name: activityEnterTransition
    summary: The type of transition used when activity is entering.
    description: |
        Activity B's enter transition determines how views in B are animated when A starts B.
        Applicable for Android 5.0 and above. This transition property will be ignored if `animated` is set to false.
        Will also be ignored unless at least 1 view has been assigned to the `addSharedElement()` method,
        except on Titanium 8.0.1 and higher where shared elements are no longer required to do transitions.

        See "Material design activity transitions in Android" in the main description of Titanium.UI.Window
        for more information.
    type: Number
    constants: [ Titanium.UI.Android.TRANSITION_EXPLODE, Titanium.UI.Android.TRANSITION_FADE_*,
                 Titanium.UI.Android.TRANSITION_SLIDE_*, Titanium.UI.Android.TRANSITION_NONE ]
    default: If not specified uses platform theme transition.
    since: "5.2.0"
    availability: creation
    platforms: [android]
    osver: {android: {min: 5.0}}

  - name: activityReturnTransition
    summary: The type of transition used when returning from a previously started activity.
    description: |
        Activity B's return transition determines how views in B are animated when B returns to A.
        Applicable for Android 5.0 and above. This transition property will be ignored if `animated` is set to false.
        Will also be ignored unless at least 1 view has been assigned to the `addSharedElement()` method,
        except on Titanium 8.0.1 and higher where shared elements are no longer required to do transitions.

        See "Material design activity transitions in Android" in the main description of Titanium.UI.Window
        for more information.
    type: Number
    constants: [ Titanium.UI.Android.TRANSITION_EXPLODE, Titanium.UI.Android.TRANSITION_FADE_*,
                 Titanium.UI.Android.TRANSITION_SLIDE_*, Titanium.UI.Android.TRANSITION_NONE ]
    default: If not specified uses `activityEnterTransition`.
    since: "5.2.0"
    availability: creation
    platforms: [android]
    osver: {android: {min: 5.0}}

  - name: activityReenterTransition
    summary: The type of transition used when reentering to a previously started activity.
    description: |
        Activity A's reenter transition determines how views in A are animated when B returns to A.
        Applicable for Android 5.0 and above. This transition property will be ignored if `animated` is set to false.
        Will also be ignored unless at least 1 view has been assigned to the `addSharedElement()` method,
        except on Titanium 8.0.1 and higher where shared elements are no longer required to do transitions.

        See "Material design activity transitions in Android" in the main description of Titanium.UI.Window
        for more information.
    type: Number
    constants: [ Titanium.UI.Android.TRANSITION_EXPLODE, Titanium.UI.Android.TRANSITION_FADE_*,
                 Titanium.UI.Android.TRANSITION_SLIDE_*, Titanium.UI.Android.TRANSITION_NONE ]
    default: If not specified uses `activityExitTransition`.
    since: "5.2.0"
    availability: creation
    platforms: [android]
    osver: {android: {min: 5.0}}

  - name: activitySharedElementExitTransition
    summary: The type of exit transition used when animating shared elements between two activities.
    description: |
        Activity A's shared element exit transition animates shared elements before they transition from A to B
        Applicable for Android 5.0 and above. This value will be ignored if `animated` is set to false.
        See "Material design activity transitions in Android" in the main description of Titanium.UI.Window
        for more information.
    type: Number
    constants: [ Titanium.UI.Android.TRANSITION_CHANGE_*, Titanium.UI.Android.TRANSITION_NONE ]
    default: |
        Defaults to android platform's [move](https://github.com/android/platform_frameworks_base/blob/lollipop-release/core/res/res/transition/move.xml) transition.
    since: "5.2.0"
    availability: creation
    platforms: [android]
    osver: {android: {min: 5.0}}

  - name: activitySharedElementEnterTransition
    summary: The type of enter transition used when animating shared elements between two activities.
    description: |
        Activity B's shared element enter transition determines how shared elements animate from A to B.
        Applicable for Android 5.0 and above. This value will be ignored if `animated` is set to false.
        See "Material design activity transitions in Android" in the main description of Titanium.UI.Window
        for more information.
    type: Number
    constants: [ Titanium.UI.Android.TRANSITION_CHANGE_*, Titanium.UI.Android.TRANSITION_NONE ]
    default: |
        Defaults to android platform's [move](https://github.com/android/platform_frameworks_base/blob/lollipop-release/core/res/res/transition/move.xml) transition.
    since: "5.2.0"
    availability: creation
    platforms: [android]
    osver: {android: {min: 5.0}}

  - name: activitySharedElementReturnTransition
    summary: The type of return transition used when animating shared elements between two activities.
    description: |
        Activity B's shared element return transition determines how shared elements animate from B to A.
        Applicable for Android 5.0 and above. This value will be ignored if `animated` is set to false.
        See "Material design activity transitions in Android" in the main description of Titanium.UI.Window
        for more information.
    type: Number
    constants: [ Titanium.UI.Android.TRANSITION_CHANGE_*, Titanium.UI.Android.TRANSITION_NONE ]
    default: |
        Defaults to android platform's [move](https://github.com/android/platform_frameworks_base/blob/lollipop-release/core/res/res/transition/move.xml) transition.
    since: "5.2.0"
    availability: creation
    platforms: [android]
    osver: {android: {min: 5.0}}

  - name: activitySharedElementReenterTransition
    summary: The type of reenter transition used when animating shared elements between two activities.
    description: |
        Activity A's shared element reenter transition animates shared elements after they have transitioned from B to A.
        Applicable for Android 5.0 and above. This value will be ignored if `animated` is set to false.
        See "Material design activity transitions in Android" in the main description of Titanium.UI.Window
        for more information.
    type: Number
    constants: [ Titanium.UI.Android.TRANSITION_CHANGE_*, Titanium.UI.Android.TRANSITION_NONE ]
    default: |
        Defaults to android platform's [move](https://github.com/android/platform_frameworks_base/blob/lollipop-release/core/res/res/transition/move.xml) transition.
    since: "5.2.0"
    availability: creation
    platforms: [android]
    osver: {android: {min: 5.0}}

examples:
  - title: Full Screen Window example
    example: |
        Create a fullscreen window with a red background.

        ``` js
        var window = Titanium.UI.createWindow({
            backgroundColor:'red'
        });
        window.open({fullscreen:true});
        ```
  - title: Alloy XML Markup
    example: |
        Previous example as an Alloy view.

        ``` xml
        <Alloy>
            <Window id="win" backgroundColor="red" fullscreen="true" />
        </Alloy>
        ```

---
name: openWindowParams
summary: Dictionary of options for the <Titanium.UI.Window.open> method.
platforms: [android, iphone, ipad, macos]
since: {android: "2.0.0", iphone: "2.0.0", ipad: "2.0.0", macos: "9.2.0"}
properties:
  - name: animated
    summary: |
        Determines whether to use an animated effect when the window is shown.
    description: |
        On Android, this property supports animated transitions on windows
        except for modal windows (`modal:true`). The transitions are on by default, but
        you can disable this behavior by setting this value to `false`.

        On iOS, only use this property to disable animated transitions on modal windows.
        This property has unintended side effects on non-modal windows if it is defined.
    type: Boolean
    default: true

  - name: bottom
    summary: Window's bottom position, in platform-specific units.
    description: |
        On Android, this property has no effect.
    type: [Number,String]
    default: 0

  - name: fullscreen
    summary: Determines if the window is fullscreen.
    type: Boolean
    default: false

  - name: height
    summary: Window's height, in platform-specific units.
    description: |
        On Windows Phone and Windows 10 Mobile, this property does not take any effect.
        On Windows 10 Store App, resizing Window takes no effect in following cases
        according to [Windows Runtime API document](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.viewmanagement.applicationview.tryresizeview).
        * The requested size is larger than the available work area.
        * The requested size is less than the view's minimum size.
        * The smallest allowed minimum size is 192 x 48 effective pixels.
        * The largest allowed minimum size is 500 x 500 effective pixels.
    type: [Number,String]

  - name: left
    summary: Window's left position, in platform-specific units.
    description: |
        On Android, this property has no effect.
    type: [Number,String]
    default: 0

  - name: modal
    summary: Determines whether to open the window modal in front of other windows.
    type: Boolean
    default: false

  - name: forceModal
    summary: Indicates whether the window enforces modal behaviour.
    description: |
        Set to `true` to prevent interactive dismissal of window while it is onscreen.
    type: Boolean
    default: false
    platforms: [iphone, ipad, macos]
    since: {iphone: "8.2.0", ipad: "8.2.0", macos: "9.2.0"}
    osver: {ios: {min: "13.0"}}

  - name: modalStyle
    summary: Presentation style of this modal window.
    platforms: [iphone, ipad, macos]
    constants: Titanium.UI.iOS.MODAL_PRESENTATION_*
    type: Number
    default: <Titanium.UI.iOS.MODAL_PRESENTATION_FULLSCREEN>

  - name: modalTransitionStyle
    summary: Transition style of this modal window.
    platforms: [iphone, ipad, macos]
    type: Number
    constants: Titanium.UI.iOS.MODAL_TRANSITION_STYLE_*
    default: <Titanium.UI.iOS.MODAL_TRANSITION_STYLE_COVER_VERTICAL>

  - name: navBarHidden
    summary: For modal windows, hides the nav bar (`true`) or shows the nav bar (`false`).
    description: |
        On iOS, beginning with **Release 3.1.3**, this is no longer a valid parameter passed to the [Window.open](Titanium.UI.Window.open) method.
    type: Boolean
    default: false

  - name: right
    summary: Window's right position, in platform-specific units.
    description: |
        On Android, this property has no effect.
    type: [Number,String]
    default: 0

  - name: top
    summary: Window's top position, in platform-specific units.
    description: |
        On Android, this property has no effect.
    type: [Number,String]
    default: 0

  - name: transition
    summary: Transition style of this non-modal window.
    platforms: [iphone, ipad, macos]
    type: Number
    constants: Titanium.UI.iOS.AnimationStyle.*
    default: <Titanium.UI.iOS.AnimationStyle.NONE>

  - name: width
    summary: Window's width, in platform-specific units.
    description: |
        On Windows Phone and Windows 10 Mobile, this property does not take any effect.
        On Windows 10 Store App, resizing Window takes no effect in following cases
        according to [Windows Runtime API document](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.viewmanagement.applicationview.tryresizeview).
        * The requested size is larger than the available work area.
        * The requested size is less than the view's minimum size.
        * The smallest allowed minimum size is 192 x 48 effective pixels.
        * The largest allowed minimum size is 500 x 500 effective pixels.
        * This method is called while in while the app is running in Tablet Mode.
    type: [Number,String]

  - name: activityEnterAnimation
    summary: Animation resource to run on the activity being opened.
    description: |
      This value will be ignored if `animated` is set to false.
      See "Window Transitions in Android" in the main description of Titanium.UI.Window
      for more information.
    type: Number
    platforms: [android]
    since: "3.1.0"
    examples:
      - title: Sliding in a new Window
        example: |
            ``` js
            var win2 = Ti.UI.createWindow({fullscreen:false});
            win2.open({
                activityEnterAnimation: Ti.Android.R.anim.slide_in_left,
                activityExitAnimation: Ti.Android.R.anim.slide_out_right
            });
            ```
  - name: activityExitAnimation
    summary: Animation resource to run on the activity that is being put in background
        as a window is being opened above it.
    description: |
      This value will be ignored if `animated` is set to false.
      See "Window Transitions in Android" in the main description of Titanium.UI.Window
      for more information.
    type: Number
    platforms: [android]
    since: "3.1.0"

---
name: windowToolbarParam
summary: Dictionary of options for the <Titanium.UI.Window.setToolbar> method.
platforms: [android, iphone, ipad, macos]
since: {android: "3.1.3", iphone: "3.1.3", ipad: "3.1.3", macos: "9.2.0"}
properties:
  - name: translucent
    summary: Defines if the toolbar is translucent.
    type: Boolean
    default: true

  - name: animated
    summary: Defines if the toolbar appearance is animated.
    type: Boolean
    default: true if the window has toolbar items, false otherwise.

  - name: barColor
    summary: Background color for the toolbar, as a color name or hex triplet.
    type: [String, Titanium.UI.Color]

  - name: tintColor
    summary: The tintColor to apply to the tool bar.
    type: [String, Titanium.UI.Color]

---
name: closeWindowParams
summary: Dictionary of options for the <Titanium.UI.Window.close> method.
platforms: [android, iphone, ipad, macos]
since: {android: "3.2.0", iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0"}
properties:
  - name: animated
    summary: |
        Determines whether to use an animated effect when the window is closed. Defaults to `true` on Android, `false` on iOS.
    description: |
        This property supports animated transitions on windows except for modal windows (`modal:true`).
        The transitions are on by default, but you can disable this behavior by setting this value
        to `false`.
    type: Boolean

  - name: animationDuration
    type: Number
    default: 1000
    summary: duration of the animation in milliseconds
    platforms: [iphone, ipad, macos]

  - name: animationStyle
    summary: Transition type to use during a transition animation.
    type: Number
    constants: Titanium.UI.iOS.AnimationStyle.*
    default: <Titanium.UI.iOS.AnimationStyle.NONE>
    platforms: [iphone, ipad, macos]

  - name: activityEnterAnimation
    summary: Animation resource to use for the incoming activity.
    description: |
      This value will be ignored if `animated` is set to false.
      See "Window Transitions in Android" in the main description of <Titanium.UI.Window>
      for more information.
    type: Number
    platforms: [android]

  - name: activityExitAnimation
    summary: Animation resource to use for the outgoing activity.
    description: |
      This value will be ignored if `animated` is set to false.
      See "Window Transitions in Android" in the main description of <Titanium.UI.Window>
      for more information.
    type: Number
    platforms: [android]
    examples:
      - title: Fading out a Window
        example: |
            ``` js
            win2.close({
                activityEnterAnimation: Ti.Android.R.anim.fade_in,
                activityExitAnimation: Ti.Android.R.anim.fade_out
            });
            ```

---
name: titleAttributesParams
summary: Dictionary of options for the <Titanium.UI.Window.titleAttributes> property.
platforms: [iphone, ipad, macos]
since: {iphone: "3.2.0", ipad: "3.2.0", macos: "9.2.0"}
examples:
  - title: Simple Example
    example: |
        ``` js
        var win = Ti.UI.createWindow({
            title: 'Title',
            barColor: 'yellow',
            titleAttributes:  {
                color:'blue',
                font: {fontFamily:'Snell Roundhand', fontSize:36},
                shadow:{color:'gray', offset:{width:1,height:1}}
            }
        });
        var nav = Ti.UI.createNavigationWindow({window: win});
        nav.open();
        ```
properties:
  - name: color
    summary: Color of the window title, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]

  - name: font
    summary: Font to use for the window title.
    type: Font

  - name: shadow
    summary: Shadow color and offset for the window title.
    type: shadowDict

---
name: shadowDict
summary: Dictionary describing the shadow effect for text.
properties:
  - name: blurRadius
    summary: Specifies the blur radius of the shadow.
    description: |
        A value of `0` means no blur is applied.
    type: Number

  - name: color
    summary: Color name or hex triplet specifying the color of the shadow.
    type: [String, Titanium.UI.Color]

  - name: offset
    summary: |
        <Size> with the properties `width` and `height` used as the horizontal
        and vertical offset of the shadow, respectively.
    type: Size
