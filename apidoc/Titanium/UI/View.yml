---
name: Titanium.UI.View
summary: An empty drawing surface or container
description: |
    The `View` is the base type for all UI widgets in Titanium.

    You use the <Titanium.UI.createView> method or **`<View>`** Alloy element to create a View.

    #### Units and Coordinates

    Sizes and coordinates can be specified using a variety of units. If a value is
    specified as a number, it is interpreted as a value in the default unit for the
    current system and/or the current project.

    When a value is specified as string, the value can consist of:

    *  A number.
    *  A percentage, such as "10%", interpreted as a percentage of the parent's total size
       in that dimension.
    *  A number plus a unit specifier, such as "10px" or "1in".

    The following units are supported:

    <table class="doc-table" width="60%">
      <thead>
        <tr>
          <th>Unit</th>
          <th>Specifier</th>
          <th>Note</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>pixels</td>
          <td>px</td>
          <td></td>
        </tr>
        <tr>
          <td>density-independent pixels</td>
          <td>dip</td>
          <td>Equivalent to Apple "points."</td>
        </tr>
        <tr>
          <td>inches</td>
          <td>in</td>
          <td></td>
        </tr>
        <tr>
          <td>millimeters</td>
          <td>mm</td>
          <td>Android, iOS only</td>
        </tr>
        <tr>
          <td>centimeters</td>
          <td>cm</td>
          <td>Android, iOS only</td>
        </tr>
        <tr>
          <td>points</td>
          <td>pt</td>
          <td>Typographical points of 1/72 of an inch. On Android, you can specify sizes and coordinates in typographical points. On other platforms, this unit is only used to specify font sizes. Not to be confused with Apple "points."</td>
        </tr>
      </tbody>
    </table>

    The interpretation of the density-independent pixel (DIP) varies by platform:

    *   On Android, one DIP corresponds to one pixel on a 160DPI
        display.

    *   On iOS, one DIP corresponds to one pixel on a non-Retina display, which
        is 163DPI for iPhone/iPod touch and 132DPI for the iPad. A DIP
        corresponds to 2 pixels of width or height on a Retina display.

    The absolute measures, such as inches, are dependent on the device correctly reporting
    its density.

    If no units are specified, a system-default unit is assumed. The system default unit is:

    *    Pixels on Android.
    *    DIPs on iOS.

    On Android and iOS, the default unit can be overriden on a per-application level by setting the
    `ti.ui.defaultunit` property in `tiapp.xml`. For example, to use DIPs as the
    default on all platforms, set `defaultunit` to `dip`:

    ``` xml
    <property name="ti.ui.defaultunit" type="string">dip</property>
    ```

    The value for `ti.ui.defaultunit` can be any of the unit specifiers defined above, or
    `system` to specify that the platform's default unit should be used.

    On IOS if you set the `ti.ui.defaultunit` property to anything other than `system` or `dip`, your
    application should detect and handle Retina displays manually.

    Font sizes on iOS are treated differently than other sizes: font sizes are always
    specified in typographical points.

    For more details see:

    * [UI Composite Layout Spec](https://docs.appcelerator.com/platform/latest/#!/guide/UI_Composite_Layout_Behavior_Spec)

    #### Size and Position

    Titanium views are positioned using the `left`, `right`, `top,` `bottom` and `center`
    properties, and sized using the `width` and `height` properties. These are
    input properties, set by the user to specify layout, and not modified by the
    system to indicate actual calculated positions and sizes.

    The [height](Titanium.UI.View.height) and [width](Titanium.UI.View.width) properties
    accept several special values:

    *   <Titanium.UI.FILL> specifies that the view should fill the parent in this
        dimension.
    *   <Titanium.UI.SIZE> specifies that the view should adjust this size to fit its
        contents, such as a label's text or a view's children.
    *   'auto' specifies that the view should choose either `FILL` or `SIZE` behavior.
        The use of `auto` is deprecated, and should be replaced with the SIZE or FILL constants if it is necessary to set the view's behavior explicitly.

    Sizes and positions can also be specified as a percentage of the parent's size, for
    example, `50%`.

    How these properties are interpreted depends on the value of the view's `layout`
    property. See the description of the [layout](Titanium.UI.View.layout) property
    for details.

    The [rect](Titanium.UI.View.rect) property is a read-only dictionary
    with the properties `x`, `y`, `width` and `height`. It provides the *rendered*
    size and position of the  view, and is only available once both it and its ancestors have been
    fully drawn.

    The [size](Titanium.UI.View.size) property is a read-only dictionary
    with the properties `x`, `y`, `width` and `height`. It provides the *rendered* size
     of the  view, and is only available once both it and its ancestors have been
    fully drawn.

    To determine whether the `size` and `rect` values are available, add an event listener
    for the [postlayout](Titanium.UI.View.postlayout) event, which is fired at the end of
    a layout cycle.

    #### Accessibility

    Four accessibility-related view properties are available in Titanium Mobile for iOS
    and Android:

    * <Titanium.UI.View.accessibilityLabel>
    * <Titanium.UI.View.accessibilityValue>
    * <Titanium.UI.View.accessibilityHint>
    * <Titanium.UI.View.accessibilityHidden>

    The first three, `accessibilityLabel`, `accessibilityValue` and `accessibilityHint`, are for setting text
    that will be relayed to the user by the assistive service (such as TalkBack on Android or VoiceOver
    on iOS). On iOS, Titanium will then take these values and set the native properties
    of the same name which are defined in the [UIAccessibilityProtocol](https://developer.apple.com/documentation/uikit/accessibility/uiaccessibility).
    On Android, Titanium takes the three values and concatenates them in the order `accessibilityLabel`,
    `accessibilityValue`, and `accessibilityHint`, and then uses the result to set the native view's
    [`contentDescription`](https://developer.android.com/reference/android/view/View.html#setContentDescription%28java.lang.CharSequence%29)
    property.

    You are not required to set all three properties: feel free to set just one or two as needed and
    experiment with the results by turning on VoiceOver (iOS) or TalkBack (Android) on your test device.

    The fourth property, `accessibilityHidden`, when set to `true`, indicates that the view can be ignored
    by the assistive service. In iOS this sets the similarly-named
    [accessibilityElementsHidden](https://developer.apple.com/documentation/objectivec/nsobject/1615080-accessibilityelementshidden)
    native property.

    In Android `accessibilityHidden` calls the native [View.setImportantForAccessibility(boolean)](https://developer.android.com/reference/android/view/View.html#setImportantForAccessibility%28int%29) method, passing `false` when
    this property is set to `true` (i.e., "hidden" means it's not important). However, the
    native `setImportantForAccessibility` method is available only on devices running
    Android 4.1 (API level 16/Jelly Bean) or later. On earlier versions of Android, this
    property is ignored.

    No error will occur on older devices if you set `accessibilityHidden`; the value will simply be ignored.

    #### iOS: backgroundLeftCap and backgroundTopCap properties

    The [backgroundLeftCap](Titanium.UI.View.backgroundLeftCap) and [backgroundTopCap](Titanium.UI.View.backgroundTopCap) properties are
    used to specify the portions of the [backgroundImage](Titanium.UI.View.backgroundImage) that must not be resized when the image is streched or shrunk.

    Given an image of width `w` and height `h`, the stretchable portion on the image is defined as a rectangle with the `top-left` point set to
    `(backgroundLeftCap , backgroundTopCap)` and the `bottom-right` point set to `(w - backgroundLeftCap , h - backgroundTopCap)`. The portions not covered by
    the stretchable portion keep their original size and appearance.

    For best results on ImageView set up the `backgroundLeftCap` and `backgroundTopCap` properties such that the stretchable portion is always a 1x1 box.

    #### iOS Clipping Behavior

    Four view related properties are available in Titanium Mobile for iOS.

    * <Titanium.UI.View.viewShadowRadius>
    * <Titanium.UI.View.viewShadowColor>
    * <Titanium.UI.View.viewShadowOffset>
    * <Titanium.UI.View.clipMode>

    The first three, `viewShadowColor`, `viewShadowRadius` and `viewShadowOffset` control the shadow associated with the view.
    The shadow of the view is drawn using a rounded rectangle with the arc radius set to the `borderRadius` property.

    The `clipMode` property lets the user control the clipping behavior of the View.
    Setting this to <Titanium.UI.iOS.CLIP_MODE_ENABLED> enforces all child views to be clipped to this views bounds.
    Setting this to <Titanium.UI.iOS.CLIP_MODE_DISABLED> allows child views to be drawn outside the bounds of this view.
    When set to <Titanium.UI.iOS.CLIP_MODE_DEFAULT> or when this property is not set, clipping behavior is defined by the following rules applied in order.

    * If the `viewShadowColor` is defined to be a color with alpha > 0, clipping is disabled.
    * If the `borderWidth` or `borderRadius` of the view is set to a value > 0, clipping is enabled.
    * If the view has one or more `children` clipping is enabled.
    * If none of the conditions are met, clipping is disabled.

    In earlier versions of Titanium Mobile, views had clipping enabled by default.

    #### iOS Animation on shadow associated with view

    If `borderRadius` property has multiple values, animation on shadow associated with the view will not work.

extends: Titanium.Proxy
since: "0.9"

events:
  - name: click
    summary: Fired when the device detects a click against the view.
    description: |
        There is a subtle difference between singletap and click events.

        A singletap event is generated when the user taps the screen briefly
        without moving their finger. This gesture will also generate a click event.

        However, a click event can also be generated when the user touches,
        moves their finger, and then removes it from the screen.

        On Android, a click event can also be generated by a trackball click.
    properties:
      - name: x
        type: Number
        summary: X coordinate of the event from the `source` view's coordinate system.

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: obscured
        type: Boolean
        summary: |
            Returns `true` if the click passed through an overlapping window belonging to another app.

            This is a security feature to protect an app from "tapjacking", where a malicious app can use a
            system overlay to intercept touch events in your app or to trick the end-user to tap on UI
            in your app intended for the overlay.
        platforms: [android]
        since: "9.3.0"

  - name: dblclick
    summary: Fired when the device detects a double click against the view.
    properties:
      - name: x
        type: Number
        summary: X coordinate of the event from the `source` view's coordinate system.
      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number
      - name: obscured
        type: Boolean
        summary: |
            Returns `true` if the double click passed through an overlapping window belonging to another app.

            This is a security feature to protect an app from "tapjacking", where a malicious app can use a
            system overlay to intercept touch events in your app or to trick the end-user to tap on UI
            in your app intended for the overlay.
        platforms: [android]
        since: "9.3.0"

  - name: doubletap
    summary: Fired when the device detects a double tap against the view.
    platforms: [android, iphone, ipad, macos]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number
      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number
      - name: obscured
        type: Boolean
        summary: |
            Returns `true` if the double tap passed through an overlapping window belonging to another app.

            This is a security feature to protect an app from "tapjacking", where a malicious app can use a
            system overlay to intercept touch events in your app or to trick the end-user to tap on UI
            in your app intended for the overlay.
        platforms: [android]
        since: "9.3.0"

  - name: focus
    summary: Fired when the view element gains focus.
    description: This event only fires when using the trackball to navigate.
    platforms: [android]

  - name: keypressed
    summary: Fired when a hardware key is pressed in the view.
    description: |
        A keypressed event is generated by pressing a hardware key. On Android, this event can only be
        fired when the property [focusable](Titanium.UI.View.focusable) is set to true. On iOS the
        event is generated only when using [Ti.UI.TextArea](Titanium.UI.TextArea), [Ti.UI.TextField](Titanium.UI.TextField)
        and [Ti.UI.SearchBar](Titanium.UI.SearchBar).
    platforms: [android, iphone, ipad, macos]
    since: {android: "3.1.0", iphone: "5.4.0", ipad: "5.4.0", macos: "9.2.0"}
    properties:
      - name: keyCode
        type: Number
        summary: The code for the physical key that was pressed. For more details, see [KeyEvent](https://developer.android.com/reference/android/view/KeyEvent.html). This API is experimental and subject to change.

  - name: longclick
    summary: Fired when the device detects a long click.
    description: |
        A long click is generated by touching and holding on the touchscreen or holding down the
        trackball button.

        The event occurs before the finger/button is lifted.

        A `longpress` and a `longclick` can occur together.

        As the trackball can fire this event, it is not intended to return the `x` and `y`
        coordinates of the touch, even when it is generated by the touchscreen.

        A `longclick` blocks a `click`, meaning that a `click` event will not fire when a
        `longclick` listener exists.
    platforms: [android]

  - name: longpress
    summary: Fired when the device detects a long press.
    description: |
        A long press is generated by touching and holding on the touchscreen. Unlike a `longclick`,
        it does not respond to the trackball button.

        The event occurs before the finger is lifted.

        A `longpress` and a `longclick` can occur together.

        In contrast to a `longclick`, this event returns the `x` and `y` coordinates of the touch.
    platforms: [android, iphone, ipad, macos]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: obscured
        type: Boolean
        summary: |
            Returns `true` if the long press passed through an overlapping window belonging to another app.

            This is a security feature to protect an app from "tapjacking", where a malicious app can use a
            system overlay to intercept touch events in your app or to trick the end-user to tap on UI
            in your app intended for the overlay.
        platforms: [android]
        since: "9.3.0"

  - name: pinch
    summary: Fired when the device detects a pinch gesture.
    description: |
        A pinch is a touch and expand or contract
        with two fingers.  The event occurs continuously until a finger is lifted again.
    platforms: [iphone, ipad, android, macos]
    since: "1.8.0"
    properties:
      - name: scale
        summary: The scale factor relative to the points of the two touches in screen coordinates.
        type: Number

      - name: velocity
        summary: The velocity of the pinch in scale factor per second.
        type: Number

      - name: time
        summary: The event time of the current event being processed.
        type: Number
        since: "7.5.0"
        platforms: [android]

      - name: timeDelta
        summary: |
            The time difference in milliseconds between the previous accepted scaling event and the
            current scaling event.
        type: Number
        since: "7.5.0"
        platforms: [android]

      - name: currentSpan
        summary: |
            The average distance between each of the pointers forming the gesture in progress through
            the focal point.
        type: Number
        since: "7.5.0"
        platforms: [android]

      - name: currentSpanX
        summary: |
            The average X distance between each of the pointers forming the gesture in progress through
            the focal point.
        type: Number
        since: "7.5.0"
        platforms: [android]

      - name: currentSpanY
        summary: |
            The average Y distance between each of the pointers forming the gesture in progress through
            the focal point.
        type: Number
        since: "7.5.0"
        platforms: [android]

      - name: previousSpan
        summary: |
            The previous average distance between each of the pointers forming the gesture in progress through
            the focal point.
        type: Number
        since: "7.5.0"
        platforms: [android]

      - name: previousSpanX
        summary: |
            The previous average X distance between each of the pointers forming the gesture in progress through
            the focal point.
        type: Number
        since: "7.5.0"
        platforms: [android]

      - name: previousSpanY
        summary: |
            The previous average Y distance between each of the pointers forming the gesture in progress through
            the focal point.
        type: Number
        since: "7.5.0"
        platforms: [android]

      - name: focusX
        summary: |
            The X coordinate of the current gesture's focal point.
        type: Number
        since: "7.5.0"
        platforms: [android]

      - name: focusY
        summary: |
            The Y coordinate of the current gesture's focal point.
        type: Number
        since: "7.5.0"
        platforms: [android]

      - name: inProgress
        summary: Returns `true` if a scale gesture is in progress, `false` otherwise.
        type: Boolean
        since: "7.5.0"
        platforms: [android]

  - name: postlayout
    summary: Fired when a layout cycle is finished.
    description: |
        This event is fired when the view and its ancestors have been laid out.
        The [rect](Titanium.UI.View.rect) and [size](Titanium.UI.View.size) values
        should be usable when this event is fired.

        This event is typically triggered by either changing layout
        properties or by changing the orientation of the device. Note that changing the
        layout of child views or ancestors can also trigger a relayout of this view.

        Note that altering any properties that affect layout from the `postlayout` callback
        may result in an endless loop.
    since: "2.0.0"

  - name: singletap
    summary: Fired when the device detects a single tap against the view.
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: obscured
        type: Boolean
        summary: |
            Returns `true` if the single tap passed through an overlapping window belonging to another app.

            This is a security feature to protect an app from "tapjacking", where a malicious app can use a
            system overlay to intercept touch events in your app or to trick the end-user to tap on UI
            in your app intended for the overlay.
        platforms: [android]
        since: "9.3.0"

  - name: swipe
    summary: Fired when the device detects a swipe gesture against the view.
    platforms: [android, iphone, ipad, macos]
    properties:
      - name: direction
        summary: Direction of the swipe--either 'left', 'right', 'up', or 'down'.
        type: String

      - name: x
        summary: X coordinate of the event's endpoint from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event's endpoint from the `source` view's coordinate system.
        type: Number

      - name: obscured
        type: Boolean
        summary: |
            Returns `true` if the swipe passed through an overlapping window belonging to another app.

            This is a security feature to protect an app from "tapjacking", where a malicious app can use a
            system overlay to intercept touch events in your app or to trick the end-user to tap on UI
            in your app intended for the overlay.
        platforms: [android]
        since: "9.3.0"

  - name: touchcancel
    summary: Fired when a touch event is interrupted by the device.
    description: |
        A touchcancel can happen in circumstances such as an incoming call to allow the
        UI to clean up state.
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: force
        summary: |
            The current force value of the touch event.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
        type: Number

      - name: size
        summary: |
            The current size of the touch area. Note: This property is only available on some Android devices.
        type: Number

      - name: maximumPossibleForce
        summary: |
            Maximum possible value of the force property.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: altitudeAngle
        summary: |
            A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
            being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
            Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: timestamp
        summary: |
            The time (in seconds) when the touch was used in correlation with the system start up.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: azimuthUnitVectorInViewX
        summary: |
            The x value of the unit vector that points in the direction of the azimuth of the stylus.
            Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: azimuthUnitVectorInViewY
        summary: |
            The y value of the unit vector that points in the direction of the azimuth of the stylus.
            Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: obscured
        type: Boolean
        summary: |
            Returns `true` if the touch passed through an overlapping window belonging to another app.

            This is a security feature to protect an app from "tapjacking", where a malicious app can use a
            system overlay to intercept touch events in your app or to trick the end-user to tap on UI
            in your app intended for the overlay.
        platforms: [android]
        since: "9.3.0"

  - name: touchend
    summary: Fired when a touch event is completed.
    description: |
        On the Android platform, other gesture events, such as `longpress` or `swipe`, cancel touch
        events, so this event may not be triggered after a `touchstart` event.
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: force
        summary: |
            The current force value of the touch event.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
        type: Number

      - name: size
        summary: |
            The current size of the touch area. Note: This property is only available on some Android devices.
        type: Number

      - name: maximumPossibleForce
        summary: |
            Maximum possible value of the force property.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: altitudeAngle
        summary: |
            A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
            being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
            Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: timestamp
        summary: |
            The time (in seconds) when the touch was used in correlation with the system start up.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: azimuthUnitVectorInViewX
        summary: |
            The x value of the unit vector that points in the direction of the azimuth of the stylus.
            Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: azimuthUnitVectorInViewY
        summary: |
            The y value of the unit vector that points in the direction of the azimuth of the stylus.
            Note: This property is only available for iOS devices that support the Apple Penciland are 9.1 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: obscured
        type: Boolean
        summary: |
            Returns `true` if the touch passed through an overlapping window belonging to another app.

            This is a security feature to protect an app from "tapjacking", where a malicious app can use a
            system overlay to intercept touch events in your app or to trick the end-user to tap on UI
            in your app intended for the overlay.
        platforms: [android]
        since: "9.3.0"

  - name: touchmove
    summary: Fired as soon as the device detects movement of a touch.
    description: |
        Event coordinates are always relative to the view in which the initial touch occurred
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: force
        summary: |
            The current force value of the touch event.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
        type: Number

      - name: size
        summary: |
            The current size of the touch area. Note: This property is only available on some Android devices.
        type: Number

      - name: maximumPossibleForce
        summary: |
            Maximum possible value of the force property.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: altitudeAngle
        summary: |
            A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
            being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
            Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: timestamp
        summary: |
            The time (in seconds) when the touch was used in correlation with the system start up.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: azimuthUnitVectorInViewX
        summary: |
            The x value of the unit vector that points in the direction of the azimuth of the stylus.
            Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: azimuthUnitVectorInViewY
        summary: |
            The y value of the unit vector that points in the direction of the azimuth of the stylus.
            Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: obscured
        type: Boolean
        summary: |
            Returns `true` if the touch passed through an overlapping window belonging to another app.

            This is a security feature to protect an app from "tapjacking", where a malicious app can use a
            system overlay to intercept touch events in your app or to trick the end-user to tap on UI
            in your app intended for the overlay.
        platforms: [android]
        since: "9.3.0"

  - name: touchstart
    summary: Fired as soon as the device detects a touch gesture.
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: force
        summary: |
            The current force value of the touch event.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later and on some Android devices.
        type: Number

      - name: size
        summary: |
            The current size of the touch area. Note: This property is only available on some Android devices.
        type: Number

      - name: maximumPossibleForce
        summary: |
            Maximum possible value of the force property.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: altitudeAngle
        summary: |
            A value which indicates the stylus angle on the screen. If the stylus is perpendicular to the screen or no stylus is
            being used, the value will be Pi/2. If the stylus is parallel to the screen, the value will be 0.
            Note: This property is only available for iOS devices that support 3D-Touch and are 9.1 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: timestamp
        summary: |
            The time (in seconds) when the touch was used in correlation with the system start up.
            Note: This property is only available for iOS devices that support 3D-Touch and run 9.0 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: azimuthUnitVectorInViewX
        summary: |
            The x value of the unit vector that points in the direction of the azimuth of the stylus.
            Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: azimuthUnitVectorInViewY
        summary: |
            The y value of the unit vector that points in the direction of the azimuth of the stylus.
            Note: This property is only available for iOS devices that support the Apple Pencil and are 9.1 or later.
        type: Number
        platforms: [iphone, ipad, macos]

      - name: obscured
        type: Boolean
        summary: |
            Returns `true` if the touch passed through an overlapping window belonging to another app.

            This is a security feature to protect an app from "tapjacking", where a malicious app can use a
            system overlay to intercept touch events in your app or to trick the end-user to tap on UI
            in your app intended for the overlay.
        platforms: [android]
        since: "9.3.0"

  - name: twofingertap
    summary: Fired when the device detects a two-finger tap against the view.
    since: { android: "3.0.0" }
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number

      - name: obscured
        type: Boolean
        summary: |
            Returns `true` if the tap passed through an overlapping window belonging to another app.

            This is a security feature to protect an app from "tapjacking", where a malicious app can use a
            system overlay to intercept touch events in your app or to trick the end-user to tap on UI
            in your app intended for the overlay.
        platforms: [android]
        since: "9.3.0"

methods:
  - name: add
    summary: Adds a child to this view's hierarchy.
    description: |
        The child view is added as the last child in this view's hierarchy.

        Although all views inherit from <Titanium.UI.View>, not all views are capable of
        containing other views. In particular:

        *    Some views are not designed to be containers at all.
        *    Some views are special-purpose containers that can only contain certain other
             views.
        *    Some views are top-level containers that cannot (or should not) be added to other views.

        #### Non-Container Views

        The following views are not intended to act as containers that can hold other
        views:

        *    [ActivityIndicator](Titanium.UI.ActivityIndicator)
        *    [Button](Titanium.UI.Button)
        *    [ImageView](Titanium.UI.ImageView)
        *    [Label](Titanium.UI.Label)
        *    [ProgressBar](Titanium.UI.ProgressBar)
        *    [SearchBar](Titanium.UI.SearchBar)
        *    [Slider](Titanium.UI.Slider)
        *    [Switch](Titanium.UI.Switch)
        *    [TableView](Titanium.UI.TableView)
        *    [TextArea](Titanium.UI.TextArea)
        *    [TextField](Titanium.UI.TextField)
        *    [WebView](Titanium.UI.WebView)

        Adding children to the these views _may_ be supported on some platforms,
        but is not guaranteed to work across platforms. Where it is supported, it may not
        work as expected.

        For maximum portability, these views should be treated as if they do not support children.
        Instead of adding children to these views, applications can positon other views as
        siblings. For example, instead of adding a button as a child of a `WebView`, you can add
        the button to the web view's parent such that it appears on top of the web view.

        #### Special-Purpose  Containers

        A few view objects act as special-purpose containers--that is, they only manage
        certain types of children, and many of them support a special means of adding
        these children, instead of the general `add` method. These containers include:

        *   [ButtonBar](Titanium.UI.ButtonBar) and [TabbedBar](Titanium.UI.iOS.TabbedBar) are designed
            to hold their own internally-created buttons, assigned by adding strings to the "labels" array.
            Views added using the `add` method are displayed on top of these buttons.

        *   [Picker](Titanium.UI.Picker). Can only hold `PickerRows` and `PickerColumns`, which
            are added using the `add` method. Adding other types of views to a `Picker` is not
            supported.

        *   [TableView](Titanium.UI.TableView) is a specialized container for
            `TableViewSection` and `TableViewRow` objects. These objects must be
            added using the properties and methods that `TableView` provides
            for adding and removing sectons and rows.

            On some platforms, it is possible to add arbitrary child views to a table view
            using the `add` method. However, this is not guaranteed to work on all platforms,
            and in general, should be avoided.

        *   [TableViewSection](Titanium.UI.TableViewSection) is a specialized container
            for `TableViewRow` objects, which _are_ added using the `add` method. The `add` method
            on `TableViewSection` can only be used to add `TableViewRow` objects.

        *   [Toolbar](Titanium.UI.iOS.Toolbar) is designed to hold buttons and certain
            other controls, added to its `items` array. Views added using the `add` method are
            displayed on top of the controls in the `items` array.

        *   The `Tab`, `TabGroup`, `NavigationWindow` and `SplitWindow` objects are
            special containers that manage windows. These are discussed in the
            "Top-Level Containers" section.


        #### Top-Level Containers

        There are certain top-level containers that are not intended to be added
        as the children of other views. These top-level containers include
        <Titanium.UI.Window>, <Titanium.UI.iOS.SplitWindow>, <Titanium.UI.NavigationWindow>,
        and <Titanium.UI.TabGroup>.  Other types of views must be added
        to a top-level container in order to be displayed on screen.

        The special containers <Titanium.UI.NavigationWindow>,
        <Titanium.UI.iOS.SplitWindow>, <Titanium.UI.Tab>, and
        <Titanium.UI.TabGroup> manage windows.
        These managed windows may be referred to as *children* of the
        container, but they are not added using the `add` method.

        `Tab` is another kind of special container: it is not itself a top-level container,
        but can only be used within a `TabGroup`. You cannot `add` a `Tab` to an arbitrary
        container.
    parameters:
      - name: view
        summary: |
            View to add to this view's hierarchy.

            You may pass an array of views, e.g. `view.add([subview1, subview2]`.
        type: [Titanium.UI.View, Array<Titanium.UI.View>]

  - name: animate
    summary: Animates this view.
    description: |
        The [Animation](Titanium.UI.Animation) object or dictionary passed to this method defines
        the end state for the animation, the duration of the animation, and other properties.

        Note that on SDKs older than 9.1.0 - if you use `animate` to move a view, the view's actual *position* is changed, but
        its layout properties, such as `top`, `left`, `center` and so on are not changed--these
        reflect the original values set by the user, not the actual position of the view.

        As of SDK 9.1.0, the final values of the animation will be set on the view just before the `complete` event and/or the callback is fired.

        The [rect](Titanium.UI.View.rect) property can be used to determine the actual size and
        position of the view.
    parameters:
      - name: animation
        summary: |
            Either a dictionary of animation properties or an
            [Animation](Titanium.UI.Animation) object.
        type: [Titanium.UI.Animation, Dictionary<Titanium.UI.Animation>]

      - name: callback
        summary: Function to be invoked upon completion of the animation.
        type: Callback<Object> # FIXME: iOS appears to fire with the Ti.UI.Animation object, while Android fires with an empty object
        optional: true

  - name: clearMotionEffects
    summary: Removes all previously added motion effects.
    description: Use this method together with <Titanium.UI.horizontalMotionEffect> and <Titanium.UI.verticalMotionEffect>.
    since: "8.2.0"
    platforms: [iphone, ipad, macos]

  - name: finishLayout
    since: "2.0.0"
    exclude-platforms: [macos]
    deprecated:
        since: "3.0.0"
        removed: "9.0.0"
        notes: Use the [applyProperties](Titanium.Proxy.applyProperties) method to batch-update layout properties.
    summary: |
        Finishes a batch update of the View's layout properties and schedules a layout pass of the
        view tree.
    description: |
        Since the layout pass scheduled is asynchronous, the [rect](Titanium.UI.View.rect)
        and [size](Titanium.UI.View.size) values may not be available immediately after
        `finishLayout` is called.

        To be notified when the layout pass completes, add a listener for the
        [postlayout](Titanium.UI.View.postlayout) event.

  - name: hide
    summary: Hides this view.
    parameters:
      - name: options
        summary: |
            Animation options for Android only. **Since SDK 5.1.0 and used only on Android 5.0+**

            Determines whether to enable a circular reveal animation.
            Note that the default here is equivalent to passing in `{ animated: false }`
        type: AnimatedOptions
        optional: true
        default: "{ animated: false }"
        # FIXME: Allow setting platforms/osver on parameters. Sucks we have to stick this in summary!

  - name: insertAt
    summary: Inserts a view at the specified position in the [children](Titanium.UI.View.children) array.
    description: |
        Useful if the `layout` property is set to `horizontal` or `vertical`.
    parameters:
      - name: params
        summary: |
            Pass an object that specifies the view to insert and optionally at which position (defaults to end)
        type: ViewPositionOptions
    since: "3.3.0"
    platforms: [android, iphone, ipad, macos]

  - name: remove
    summary: Removes a child view from this view's hierarchy.
    parameters:
      - name: view
        summary: View to remove from this view's hierarchy.
        type: Titanium.UI.View

  - name: removeAllChildren
    summary: Removes all child views from this view's hierarchy.
    since: {android: "3.1.0",  iphone: "3.1.0", ipad: "3.1.0"}

  - name: replaceAt
    summary: Replaces a view at the specified position in the [children](Titanium.UI.View.children) array.
    description: |
        Useful if the `layout` property is set to `horizontal` or `vertical`.
    parameters:
      - name: params
        summary: |
            Pass an object with the view to insert and the position of the view to replace. In this case the `position` property is required.
        type: ViewPositionOptions
    since: "3.3.0"
    platforms: [android, iphone, ipad, macos]

  - name: show
    summary: Makes this view visible.
    parameters:
      - name: options
        summary: |
            Animation options for Android only. **Since SDK 5.1.0 and only used on Android 5.0+**

            Determines whether to enable a circular reveal animation.
            Note that the default here is equivalent to passing in `{ animated: false }`
        type: AnimatedOptions
        optional: true
        default: "{ animated: false }"
        # FIXME: Support platfroms/osver/since on parameters!

  - name: startLayout
    summary: Starts a batch update of this view's layout properties.
    description: |
        To prevent a layout pass each time a property is modified, call `startLayout` before
        changing any properties that may change this view's layout. This initiates a batch update
        mode where layout changes are deferred.

        Call [finishLayout](Titanium.UI.View.finishLayout) to end batch update mode and trigger a
        layout pass. For example:

        ``` js
        view.startLayout();
        view.top = 50;
        view.left = 50;
        view.finishLayout();
        ```

        Note that _any_ property changes made during the batch update _may_ be deferred until
        `finishLayout` is called. This may vary somewhat by platform. For example, changing the
        text of a label may trigger a layout pass. In iOS, updating the label text is
        deferred.

        See also: [updateLayout](Titanium.UI.View.updateLayout),
        [finishLayout](Titanium.UI.View.finishLayout),
        [postlayout](Titanium.UI.View.postlayout) event.
    since: "2.0.0"
    exclude-platforms: [macos]
    deprecated:
        since: "3.0.0"
        removed: "9.0.0"
        notes: Use the [Titanium.Proxy.applyProperties](Titanium.Proxy.applyProperties) method to batch-update layout properties.

  - name: toImage
    summary: Returns an image of the rendered view, as a Blob.
    description: |
        The `honorScaleFactor` argument is only supported on iOS.
    returns:
        type: Titanium.Blob
    platforms: [android, iphone, ipad, macos]
    parameters:
      - name: callback
        summary: |
            Function to be invoked upon completion. If non-null, this method will be performed
            asynchronously. If null, it will be performed immediately.
        type: Callback<Titanium.Blob>
        optional: true

      - name: honorScaleFactor
        summary: |
            Determines whether the image is scaled based on scale factor of main screen. (iOS only)

            When set to true, image is scale factor is honored. When set to false, the image in the
            blob has the same dimensions for retina and non-retina devices.
        type: Boolean
        default: false
        optional: true

  - name: updateLayout
    summary: |
        Performs a batch update of all supplied layout properties and schedules a layout pass after
        they have been updated.
    description: |
        This is another way to perform a batch update.  The `updateLayout` method is called with a
        dictionary of layout properties to perform the batch update. For example:

        ``` js
        view.updateLayout({top:50, left:50});
        ```

        This is equivalent to the following:

        ``` js
        view.startLayout();
        view.top = 50;
        view.left = 50;
        view.finishLayout();
        ```

        See also: [startLayout](Titanium.UI.View.startLayout),
        [finishLayout](Titanium.UI.View.finishLayout),
        [postlayout](Titanium.UI.View.postlayout) event.
    since: "2.0.0"
    exclude-platforms: [macos]
    deprecated:
        since: "3.0.0"
        removed: "9.0.0"
        notes: Use the [Titanium.Proxy.applyProperties](Titanium.Proxy.applyProperties) method to batch-update layout properties.
    parameters:
      - name: params
        summary: Layout properties to be updated.
        type: Dictionary

  - name: convertPointToView
    summary: |
        Translates a point from this view's coordinate system to another view's coordinate system.
    description: |
        Returns `null` if either view is not in the view hierarchy.

        Keep in mind that views may be removed from the view hierarchy if their window is blurred
        or if the view is offscreen (such as in some situations with <Titanium.UI.ScrollableView>).

        If this view is a <Titanium.UI.ScrollView>, the view's x and y offsets are subtracted from
        the return value.
    returns:
        type: Point
    platforms: [android, iphone, ipad, macos]
    since: { android: "1.8", iphone: "1.8", ipad: "1.8", macos: "9.2.0" }
    parameters:
      - name: point
        summary: |
            A point in this view's coordinate system.

            If this argument is missing an `x` or `y` property, or the properties can not be
            converted into numbers, an exception will be raised.
        type: Point

      - name: destinationView
        summary: |
            View that specifies the destination coordinate system to convert to. If this argument
            is not a view, an exception will be raised.
        type: Titanium.UI.View

  - name: getViewById
    summary: Returns the matching view of a given view ID.
    returns:
        type: Titanium.UI.View
    parameters:
      - name: id
        summary: |
            The ID of the view that should be returned. Use the `id` property in your views to
            enable it for indexing in this method.
        type: String
        optional: false
    since: 6.1.0
    platforms: [iphone, ipad, android, macos]

properties:
  - name: accessibilityHidden
    summary: Whether the view should be "hidden" from (i.e., ignored by) the accessibility service.
    description: |
        On iOS this is a direct analog of the `accessibilityElementsHidden` property defined in the
        [UIAccessibility
        Protocol](https://developer.apple.com/documentation/uikit/accessibility/uiaccessibility).

        On Android, setting `accessibilityHidden` calls the native
        [View.setImportantForAccessibility](https://developer.android.com/reference/android/view/View.html#setImportantForAccessibility%28int%29)
        method. The native method is only available in Android 4.1 (API level 16/Jelly Bean) and
        later; if this property is specified on earlier versions of Android, it is ignored.
    since: "3.0.0"
    platforms: [android, iphone, ipad, macos]
    type: Boolean
    default: false
    osver:
        android:
            min: "4.0"
        ios:
            min: "5.0"

  - name: accessibilityHint
    summary: Briefly describes what performing an action (such as a click) on the view will do.
    description: |
        On iOS this is a direct analog of the `accessibilityHint` property defined in the
        [UIAccessibility Protocol](https://developer.apple.com/documentation/uikit/accessibility/uiaccessibility).
        On Android, it is concatenated together with
        <Titanium.UI.View.accessibilityLabel> and <Titanium.UI.View.accessibilityValue> in the order: `accessibilityLabel`,
        `accessibilityValue`, `accessibilityHint`. The concatenated value is then passed as the
        argument to the native [View.setContentDescription](https://developer.android.com/reference/android/view/View.html#setContentDescription%28java.lang.CharSequence%29) method.
    type: String
    since: "3.0.0"
    platforms: [android, iphone, ipad, macos]
    default: null

  - name: accessibilityLabel
    summary: A succint label identifying the view for the device's accessibility service.
    description: |
        On iOS this is a direct analog of the `accessibilityLabel` property defined in the
        [UIAccessibility Protocol](https://developer.apple.com/documentation/uikit/accessibility/uiaccessibility).
        On Android, it is concatenated together with
        <Titanium.UI.View.accessibilityValue> and <Titanium.UI.View.accessibilityHint> in the order: `accessibilityLabel`,
        `accessibilityValue`, `accessibilityHint`. The concatenated value is then passed as the
        argument to the native [View.setContentDescription](https://developer.android.com/reference/android/view/View.html#setContentDescription%28java.lang.CharSequence%29) method.
        Defaults to Title or label of the control.
    since: "3.0.0"
    platforms: [android, iphone, ipad, macos]
    type: String

  - name: accessibilityValue
    summary: A string describing the value (if any) of the view for the device's accessibility service.
    description: |
        On iOS this is a direct analog of the `accessibilityValue` property defined in the
        [UIAccessibility Protocol](https://developer.apple.com/documentation/uikit/accessibility/uiaccessibility).
        On Android, it is concatenated together with
        <Titanium.UI.View.accessibilityLabel> and <Titanium.UI.View.accessibilityHint> in the order: `accessibilityLabel`,
        `accessibilityValue`, `accessibilityHint`. The concatenated value is then passed as the
        argument to the native [View.setContentDescription](https://developer.android.com/reference/android/view/View.html#setContentDescription%28java.lang.CharSequence%29) method.
        Defaults to State or value of the control.
    since: "3.0.0"
    platforms: [android, iphone, ipad, macos]
    type: String

  - name: anchorPoint
    summary: Coordinate of the view about which to pivot an animation.
    description: |
        Used on iOS only. For Android, use <Titanium.UI.Animation.anchorPoint>.

        Anchor point is specified as a fraction of the view's size.  For example, `{0, 0}` is at
        the view's top-left corner, `{0.5, 0.5}` at its center and `{1, 1}` at its bottom-right
        corner.

        See the "Using an anchorPoint" example in <Titanium.UI.Animation> for a demonstration.
        The default is center of this view.
    type: Point
    since: {android: "7.5.0", iphone: "2.1.0", ipad: "2.1.0"}
    platforms: [android, iphone, ipad, macos]

  - name: animatedCenter
    summary: Current position of the view during an animation.
    type: Point
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: backgroundColor
    summary: Background color of the view, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>. Defaults to `Transparent`.
    type: [ String, Titanium.UI.Color ]

  - name: backgroundDisabledColor
    summary: Disabled background color of the view, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
        Defaults to the normal background color of this view.
    type: String
    platforms: [android]

  - name: backgroundDisabledImage
    summary: Disabled background image for the view, specified as a local file path or URL.
    description: |
        If `backgroundDisabledImage` is undefined, and the normal background image`backgroundImage`
        is set, the normal image is used when this view is disabled.
    type: String
    platforms: [android]

  - name: backgroundFocusedColor
    summary: Focused background color of the view, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.

        For normal views, the focused color is only used if `focusable` is `true`.
        Defaults to the normal background color of this view.
    type: String
    platforms: [android]

  - name: backgroundFocusedImage
    summary: Focused background image for the view, specified as a local file path or URL.
    description: |
      For normal views, the focused background is only used if `focusable` is `true`.
      If `backgroundFocusedImage` is undefined, and the normal background image `backgroundImage`
      is set, the normal image is used when this view is focused.
    type: String
    platforms: [android]

  - name: backgroundGradient
    summary: A background gradient for the view.
    type: Gradient
    platforms: [iphone,ipad,android,macos]
    description: |
        A gradient can be defined as either linear or radial. A linear gradient varies continuously
        along a line between the `startPoint` and `endPoint`.

        A radial gradient is interpolated between two circles, defined by `startPoint` and
        `startRadius` and `endPoint` and `endRadius` respectively.

        The start points, end points and radius values can be defined in device units, in the view's
        coordinates, or as percentages of the view's size. Thus, if a view is 60 x 60, the center
        point of the view can be specified as:

        ``` js
        { x: 30, y: 30 }
        ```

        Or:
        ``` js
        { x: '50%', y: '50%' }
        ```

        When specifying multiple colors, you can specify an *offset* value for each color, defining
        how far into the gradient it takes effect. For example, the following color array specifies
        a gradient that goes from red to blue back to red:

        ``` js
        colors: [ { color: 'red', offset: 0.0}, { color: 'blue', offset: 0.25 }, { color: 'red', offset: 1.0 } ]
        ```

        Android's linear gradients ignores `backfillStart` and `backfillEnd`, treating them as if
        they are true. Android's radial gradients ignore the `endPoint` property.
        Defaults to no gradient.
    examples:
      - title: Linear and Radial Gradients
        example: |
            The following code excerpt creates two views, one with a linear gradient and one with
            a radial gradient.

            ``` js
            var win1 = Titanium.UI.createWindow({
                title:'Tab 1',
                backgroundColor:'#fff',
                layout: 'vertical'
            });

            var radialGradient = Ti.UI.createView({
                top: 10,
                width: 100,
                height: 100,
                backgroundGradient: {
                    type: 'radial',
                    startPoint: { x: 50, y: 50 },
                    endPoint: { x: 50, y: 50 },
                    colors: [ 'red', 'blue'],
                    startRadius: 50,
                    endRadius: 0,
                    backfillStart: true
                }
            });
            var linearGradient = Ti.UI.createView({
                top: 10,
                width: 100,
                height: 100,
                backgroundGradient: {
                    type: 'linear',
                    startPoint: { x: '0%', y: '50%' },
                    endPoint: { x: '100%', y: '50%' },
                    colors: [ { color: 'red', offset: 0.0}, { color: 'blue', offset: 0.25 }, { color: 'red', offset: 1.0 } ],
                }
            });
            win1.add(radialGradient);
            win1.add(linearGradient);
            win1.open();
            ```

  - name: backgroundImage
    summary: Background image for the view, specified as a local file path or URL.
    description: |
        Default behavior when `backgroundImage` is unspecified depends on the type of view and the platform.
        For generic views, no image is used. For most controls (buttons, textfields, and so on), platform-specific default images are used.
    type: String

  - name: backgroundRepeat
    summary: Determines whether to tile a background across a view.
    description: |
        Setting this to `true` makes the set `backgroundImage` repeat across the view as a series
        of tiles. The tiling begins in the upper-left corner, where the upper-left corner of the
        background image is rendered. The image is then tiled to fill the available space of the
        view.

        Note that setting this to `true` may incur performance penalties for large views or
        background images, as the tiling must be redone whenever a view is resized.

        On iOS, the following views do not currently support tiled backgrounds:

        * <Titanium.UI.Button>
        * <Titanium.UI.TextField>
        * <Titanium.UI.Label>
    type: Boolean
    default: false
    platforms: [android, iphone, ipad, macos]

  - name: backgroundLeftCap
    summary: Size of the left end cap.
    description: |
        See the section on backgroundLeftCap and backgroundTopCap behavior on iOS in <Titanium.UI.View>.
    type: Number
    platforms: [iphone, ipad, macos]
    default: "0"

  - name: backgroundSelectedColor
    summary: Selected background color of the view, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.

        `focusable` must be true for normal views.

        Defaults to background color of this view.
    type: [String, Titanium.UI.Color]
    platforms: [android]

  - name: backgroundSelectedImage
    summary: Selected background image url for the view, specified as a local file path or URL.
    description: |
      For normal views, the selected background is only used if `focusable` is `true`.

      If `backgroundSelectedImage` is undefined, and the normal background image `backgroundImage` is set
      the normal image is used when this view is selected.
    type: String
    platforms: [android]

  - name: backgroundTopCap
    summary: Size of the top end cap.
    description: |
        See the section on backgroundLeftCap and backgroundTopCap behavior on iOS in <Titanium.UI.View>.
    type: Number
    platforms: [iphone, ipad, macos]
    default: "0"

  - name: borderColor
    summary: Border color of the view, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.

        Defaults to the normal background color of this view (Android), black (iOS).
    type: [String, Titanium.UI.Color]

  - name: borderRadius
    summary: Radius for the rounded corners of the view's border.
    description: Each corner is rounded using an arc of a circle.
        Values for each corner can be specified. For example, '20px 20px' will set both left and right corners to `20px`.
        Specifying '20px 20px 20px 20px' will set top-left, top-right, bottom-right and bottom-left corners in that order.
    type: [Number, String, Array<Number>, Array<String>]
    default: 0
    osver: {android: {min: "5.0"}}

  - name: borderWidth
    summary: Border width of the view.
    description: |
        If [borderColor](Titanium.UI.View.borderColor) is set without [borderWidth](Titanium.UI.View.borderWidth), this value
        will be changed to 1 of the unit declared as 'ti.ui.defaultunit' in tiapp.xml descriptor.
    type: Number
    default: 0

  - name: bottom
    summary: View's bottom position, in platform-specific units.
    description: |
        This position is relative to the view's parent. Exact interpretation depends on the parent
        view's [layout](Titanium.UI.View.layout) property. Can be either a float value or a
        dimension string (for example, '50%' or '10px').

        This is an input property for specifying where the view should be positioned, and does not
        represent the view's calculated position.

        Defaults to `undefined`.
    type: [Number,String]

  - name: center
    summary: View's center position, in the parent view's coordinates.
    description: |
        This is an input property for specifying where the view should be positioned, and does not
        represent the view's calculated position.

        Defaults to `undefined`.
    type: Point

  - name: children
    summary: Array of this view's child views.
    type: Array<Titanium.UI.View>
    permission: read-only

  - name: clipMode
    summary: View's clipping behavior.
    description: |
        Setting this to <Titanium.UI.iOS.CLIP_MODE_ENABLED> enforces all child views to be clipped to this views bounds.
        Setting this to <Titanium.UI.iOS.CLIP_MODE_DISABLED> allows child views to be drawn outside the bounds of this view.
        When set to <Titanium.UI.iOS.CLIP_MODE_DEFAULT> or when this property is not set, clipping behavior is inferred.
        See section on iOS Clipping Behavior in <Titanium.UI.View>.

        Defaults to `undefined`. Behaves as if set to <Titanium.UI.iOS.CLIP_MODE_DEFAULT>.
    type: Number
    platforms: [iphone, ipad, macos]
    since: "3.3.0"

  - name: elevation
    summary: Base elevation of the view relative to its parent in pixels.
    description: |
        The elevation of a view determines the appearance of its shadow.
        Higher elevations produce larger and softer shadows.

        **Note:** The `elevation` property only works on `Titanium.UI.View` objects.
        Many Android components have a default elevation that cannot be modified.
        For more information, see
        [Google design guidelines: Elevation and shadows](https://developer.android.com/training/material/shadows-clipping#Elevation).
    type: Number
    platforms: [android]
    since: 5.0.0
    osver: {android: {min: 5.0}}

  - name: filterTouchesWhenObscured
    summary: Discards touch related events if another app's system overlay covers the view.
    description: |
        This is a security feature to protect an app from "tapjacking", where a malicious app can use a
        system overlay to intercept touch events in your app or to trick the end-user to tap on UI
        in your app intended for the overlay.

        Setting this property to `true` causes touch related events (including "click") to not be fired
        if a system overlay overlaps the view.
    type: Boolean
    default: false
    platforms: [android]
    since: "9.3.0"

  - name: focusable
    summary: Whether view should be focusable while navigating with the trackball.
    type: Boolean
    default: false
    platforms: [android]

  - name: height
    summary: View height, in platform-specific units.
    description: |
        Defaults to: If undefined, defaults to either <Titanium.UI.FILL> or <Titanium.UI.SIZE>
        depending on the view. See "View Types and Default Layout Behavior" in
        [Transitioning to the New UI Layout System](https://docs.appcelerator.com/platform/latest/#!/guide/Transitioning_to_the_New_UI_Layout_System).

        Can be either a float value or a dimension string (for example, '50%' or '40dp').
        Can also be one of the following special values:

        *    <Titanium.UI.SIZE>. The view should size itself to fit its contents.
        *    <Titanium.UI.FILL>. The view should size itself to fill its parent.
        *    'auto'.  Represents the default sizing behavior for a given type of
             view. The use of 'auto' is deprecated, and should be replaced with the `SIZE` or
             `FILL` constants if it is necessary to set the view's behavior explicitly.

        This is an input property for specifying the view's height dimension. To determine the
        view's size once rendered, use the [rect](Titanium.UI.View.rect) or
        [size](Titanium.UI.View.size) properties.
    constants: [Titanium.UI.FILL, Titanium.UI.SIZE]
    type: [Number,String]

  - name: hiddenBehavior
    summary: Sets the behavior when hiding an object to release or keep the free space
    description: |
        If setting `hiddenBehavior` to <Titanium.UI.HIDDEN_BEHAVIOR_GONE> it will automatically release the space the view occupied.
        For example: in a vertical layout the views below the object will move up when you hide
        an object with `hiddenBehavior:Titanium.UI.HIDDEN_BEHAVIOR_GONE`.

        * <Titanium.UI.HIDDEN_BEHAVIOR_INVISIBLE>. Keeps the space and just hides the object (default).
        * <Titanium.UI.HIDDEN_BEHAVIOR_GONE>. Releases the space and hides the object.

        Defaults to Titanium.UI.HIDDEN_BEHAVIOR_INVISIBLE.
    type: Number
    constants: [Titanium.UI.HIDDEN_BEHAVIOR_INVISIBLE, Titanium.UI.HIDDEN_BEHAVIOR_GONE]
    platforms: [android]
    since: "6.1.0"

  - name: horizontalMotionEffect
    summary: Adds a horizontal parallax effect to the view
    description: |
        Note that the parallax effect only happens by tilting the device so results can not be seen on Simulator.
        To clear all motion effects, use the <Titanium.UI.clearMotionEffects> method.
    type: MinMaxOptions
    platforms: [iphone, ipad, macos]
    since: "7.3.0"

  - name: id
    summary: View's identifier.
    description: |
        The `id` property of the Ti.UI.View represents the view's identifier. The identifier string does
        not have to be unique. You can use this property with <Titanium.UI.View.getViewById> method.
    type: String
    accessors: false
    optional: true

  - name: left
    summary: View's left position, in platform-specific units.
    description: |
        This position is relative to the view's parent. Exact interpretation depends on the
        parent view's [layout](Titanium.UI.View.layout) property. Can be either a float value or
        a dimension string (for example, '50%' or '10px').

        This is an input property for specifying where the view should be positioned, and does not
        represent the view's calculated position.

        Defaults to `undefined`.
    type: [Number,String]

  - name: layout
    type: String
    summary: |
        Specifies how the view positions its children.
        One of: 'composite', 'vertical', or 'horizontal'.
    description: |
        There are three layout options:

        *   `composite` (or `absolute`). Default layout. A child view is positioned based on its
            positioning properties or "pins"  (`top`, `bottom`, `left`, `right` and `center`).
            If no positioning  properties are specified, the child is centered.

            The child is always sized based on its `width` and `height` properties, if these are
            specified.  If the child's height or width is *not* specified explicitly, it may be
            calculated implicitly from the positioning properties. For example, if both `left` and
            `center.x` are specified, they can be used to calculate the width of the child control.

            Because the size and position properties can conflict, there is a specific precedence
            order for the layout properties.  For vertical positioning, the precedence
            order is: `height`, `top`, `center.y`, `bottom`.

            The following table summarizes the various combinations of properties that can
            be used for vertical positioning, in order from highest precedence to lowest.
            (For example, if `height`, `center.y` and `bottom` are all specified, the
            `height` and `center.y` values take precedence.)

            <table class="doc-table">
              <thead>
                <tr>
                  <th>Scenario</th>
                  <th>Behavior</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td><code>height</code> & <code>top</code> specified</td>
                  <td>
                    Child positioned <code>top</code> unit from parent's top, using specified <code>height</code>;
                    any <code>center.y</code> and <code>bottom</code> values are ignored.
                  </td>
                </tr>
                <tr>
                  <td><code>height</code> & <code>center.y</code> specified</td>
                  <td>
                    Child positioned with center at <code>center.y</code>, using specified <code>height</code>;
                    any <code>bottom</code> value is ignored.
                  </td>
                </tr>
                <tr>
                  <td><code>height</code> & <code>bottom</code> specified</td>
                  <td>Child positioned <code>bottom</code> units from parent's bottom, using specified <code>height</code>.</td>
                </tr>
                <tr>
                  <td><code>top</code> & <code>center.y</code> specified</td>
                  <td>
                    Child positioned with top edge <code>top</code> units from parent's top and center at
                    <code>center.y</code>. Height is determined implicitly; any <code>bottom</code> value is ignored.
                  </td>
                </tr>
                <tr>
                  <td><code>top</code> & <code>bottom</code> specified</td>
                  <td>
                    Child positioned with top edge <code>top</code> units from parent's top and bottom edge
                    <code>bottom</code> units from parent's bottom. Height is determined implicitly.
                  </td>
                </tr>
                <tr>
                  <td>Only <code>top</code> specified</td>
                  <td>
                    Child positioned <code>top</code> units from parent's top, and uses the default height
                    calculation for the view type.
                  </td>
                </tr>
                <tr>
                  <td><code>center.y</code> and <code>bottom</code> specified</td>
                  <td>
                    Child positioned with center at <code>center.y</code> and bottom edge <code>bottom</code>
                    units from parent's bottom. Height is determined implicitly.
                  </td>
                </tr>
                <tr>
                  <td>Only <code>center.y</code> specified</td>
                  <td>Child positioned with center at <code>center.y</code>, and uses the default height calculation for the view type.</td>
                </tr>
                <tr>
                  <td>Only <code>bottom</code> specified</td>
                  <td>Child positioned with bottom edge <code>bottom</code> units from parent's bottom, and uses the default height calculation for the view type.</td>
                </tr>
                <tr>
                  <td><code>height</code>, <code>top</code>, <code>center.y</code>, and <code>bottom</code> unspecified</td>
                  <td>Child entered vertically in the parent and uses the default height calculation for the child view type.</td>
                </tr>
              </tbody>
            </table>

            Horizontal positioning works like vertical positioning, except that the
            precedence is `width`, `left`, `center.x`, `right`.

            For complete details on composite layout rules, see
            [Transitioning to the New UI Layout System](https://docs.appcelerator.com/platform/latest/#!/guide/Transitioning_to_the_New_UI_Layout_System)
            in the Titanium Mobile Guides.

         *  `vertical`. Children are laid out vertically from top to bottom. The first child
            is laid out `top` units from its parent's bounding box. Each subsequent child is
            laid out below the previous child. The space between children is equal to the
            upper child's `bottom` value plus the lower child's `top` value.

            Each child is positioned horizontally as in the composite layout mode.

         *  `horizontal`. Horizontal layouts have different behavior depending on whether wrapping
            is enabled. Wrapping is enabled by default (the `horizontalWrap` property is `true`).

            With wrapping behavior, the children are laid out horizontally from left to right,
            _in rows_. If a child requires more horizontal space than exists in the current row,
            it is wrapped to a new row. The height of each row is equal to the maximum height of
            the children in that row.

            Wrapping behavior is available on iOS and Android. When the `horizontalWrap` property is
            set to true, the first row is placed at the top of the parent view, and successive rows
            are placed below the first row. Each child is positioned vertically _within its row_ somewhat
            like composite layout mode. In particular:

            *   If neither `top` or `bottom` is specified, the child is centered in the
                row.
            *   If either `top` or `bottom` is specified, the child is aligned to either
                the top or bottom of the row, with the specified amount of padding.
            *   If *both* `top` and `bottom` is specified for a given child, the properties
                are both treated as padding.

            If the `horizontalWrap` property is false, the behavior is more equivalent to a vertical layout.
            Children are laid or horizontally from left to right in a single row. The `left` and
            `right` properties are used as padding between the children, and the `top` and `bottom`
            properties are used to position the children vertically.

            Defaults to Composite layout.

  - name: opacity
    summary: Opacity of this view, from 0.0 (transparent) to 1.0 (opaque). Defaults to 1.0 (opaque).
    type: Number

  - name: overrideCurrentAnimation
    summary: When on, animate call overrides current animation if applicable.
    description: |
        If this property is set to false, the animate call is ignored if the view is currently being animated.

        Defaults to `undefined` but behaves as false
    type: Boolean
    since: "3.3.0"
    availability: creation
    platforms: [android]

  - name: pullBackgroundColor
    summary: |
      Background color of the wrapper view when this view is used as either <Titanium.UI.ListView.pullView> or <Titanium.UI.TableView.headerPullView>.

      Defaults to `undefined`. Results in a light grey background color on the wrapper view.
    type: [String, Titanium.UI.Color]
    since: "3.3.0"
    platforms: [iphone, ipad, macos]

  - name: previewContext
    summary: The preview context used in the 3D-Touch feature "Peek and Pop".
    description: |
        Preview context to present the "Peek and Pop" of a view. Use an configured instance
        of <Titanium.UI.iOS.PreviewContext> here.

        Note: This property can only be used on devices running iOS9 or later and supporting 3D-Touch.
        It is ignored on older devices and can manually be checked using <Titanium.UI.iOS.forceTouchSupported>.
    platforms: [iphone]
    since: "5.1.0"
    type: Titanium.UI.iOS.PreviewContext
    osver: {ios: {min: "9.0"}}

  - name: right
    summary: View's right position, in platform-specific units.
    description: |
        This position is relative to the view's parent. Exact interpretation depends on the
        parent view's [layout](Titanium.UI.View.layout) property. Can be either a float value or
        a dimension string (for example, '50%' or '10px').

        This is an input property for specifying where the view should be positioned, and does not
        represent the view's calculated position.

        Defaults to `undefined`.
    type: [Number, String]

  - name: rect
    summary: |
        The bounding box of the view relative to its parent, in system units.
    description: |
        The view's bounding box is defined by its size and position.

        The view's size is `rect.width` x `rect.height`. The view's top-left position relative to
        its parent is (`rect.x` , `rect.y`).

        On Android it will also return `rect.absoluteX` and 'rect.absoluteY' which are relative to
        the main window.

        The correct values will only be available when layout is complete.
        To determine when layout is complete, add a listener for the
        [postlayout](Titanium.UI.View.postlayout) event.
    type: DimensionWithAbsolutes
    permission: read-only
    since: "2.0.0"

  - name: rotation
    summary: Clockwise 2D rotation of the view in degrees.
    description: Translation values are applied to the static post layout value.
    type: Number
    platforms: [android]
    since: 5.4.0

  - name: rotationX
    summary: Clockwise rotation of the view in degrees (x-axis).
    description: Translation values are applied to the static post layout value.
    type: Number
    platforms: [android]
    since: 5.4.0

  - name: rotationY
    summary: Clockwise rotation of the view in degrees (y-axis).
    description: Translation values are applied to the static post layout value.
    type: Number
    platforms: [android]
    since: 5.4.0

  - name: scaleX
    summary: Scaling of the view in x-axis in pixels.
    description: Translation values are applied to the static post layout value.
    type: Number
    platforms: [android]
    since: 5.4.0

  - name: scaleY
    summary: Scaling of the view in y-axis in pixels.
    description: Translation values are applied to the static post layout value.
    type: Number
    platforms: [android]
    since: 5.4.0

  - name: size
    summary: |
        The size of the view in system units.
    description: |
        Although property returns a <Dimension> dictionary, only the `width` and `height`
        properties are valid. The position properties--`x` and `y`--are always 0.

        To find the position _and_ size of the view, use the [rect](Titanium.UI.View.rect)
        property instead.

        The correct values will only be available when layout is complete.
        To determine when layout is complete, add a listener for the
        [postlayout](Titanium.UI.View.postlayout) event.
    type: Dimension
    permission: read-only

  - name: softKeyboardOnFocus
    summary: Determines keyboard behavior when this view is focused. Defaults to <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>.
    type: Number
    constants: Titanium.UI.Android.SOFT_KEYBOARD_*
    platforms: [android]

  - name: tintColor
    summary: The view's tintColor
    description: |
        This property is a direct correspondant of the tintColor property of UIView on iOS. If no value is specified,
        the tintColor of the View is inherited from its superview.
    type: [String, Titanium.UI.Color]
    since: "3.1.3"
    default: null
    osver: {ios: {min: "7.0"}}
    platforms: [iphone, ipad, macos]

  - name: top
    summary: The view's top position.
    description: |
        This position is relative to the view's parent. Exact interpretation depends on the
        parent view's [layout](Titanium.UI.View.layout) property. Can be either a float value or
        a dimension string (for example, '50%' or '10px').

        This is an input property for specifying where the view should be positioned, and does not
        represent the view's calculated position.
    type: [Number,String]

  - name: touchEnabled
    summary: Determines whether view should receive touch events.
    description: If false, will forward the events to peers.
    type: Boolean
    default: true

  - name: touchFeedback
    summary: A material design visual construct that provides an instantaneous visual confirmation of touch point.
    description: |
        Touch feedback is only applied to a view's background. It is never applied to the view's foreground content
        such as a <Titanium.UI.ImageView>'s image.

        For Titanium versions older than 9.1.0, touch feedback only works if you set the
        <Titanium.UI.View.backgroundColor> property to a non-transparent color.
    type: Boolean
    default: false
    platforms: [android]
    osver: {android: {min: "5.0"}}
    since: "6.1.0"

  - name: touchFeedbackColor
    summary: Optional touch feedback ripple color. This has no effect unless `touchFeedback` is true.
    description: Defaults to provided theme color.
    type: String
    platforms: [android]
    osver: {android: {min: "5.0"}}
    since: "6.1.0"

  - name: transform
    summary: Transformation matrix to apply to the view.
    description: Android only supports Matrix2D transforms.
    type: [ Titanium.UI.Matrix2D, Titanium.UI.Matrix3D ]
    default: Identity matrix

  - name: translationX
    summary: Horizontal location of the view relative to its left position in pixels.
    description: Translation values are applied to the static post layout value.
    type: Number
    platforms: [android]
    since: 5.0.0

  - name: translationY
    summary: Vertical location of the view relative to its top position in pixels.
    description: Translation values are applied to the static post layout value.
    type: Number
    platforms: [android]
    since: 5.0.0

  - name: translationZ
    summary: Depth of the view relative to its elevation in pixels.
    description: Translation values are applied to the static post layout value.
    type: Number
    platforms: [android]
    since: 5.0.0
    osver: {android: {min: 5.0}}

  - name: transitionName
    summary: A name to identify this view in activity transition.
    description: Name should be unique in the View hierarchy.
    type: String
    platforms: [android]
    since: "5.0.2"
    osver: {android: {min: 5.0}}

  - name: verticalMotionEffect
    summary: Adds a vertical parallax effect to the view
    description: |
        Note that the parallax effect only happens by tilting the device so results can not be seen on Simulator.
        To clear all motion effects, use the <Titanium.UI.clearMotionEffects> method.
    type: MinMaxOptions
    platforms: [iphone, ipad, macos]
    since: "7.3.0"

  - name: viewShadowRadius
    summary: Determines the blur radius used to create the shadow.
    description: Defaults to `undefined`. Behaves as if set to 3.
        Accepts density units as of 10.0.1.
    type: [Number,String]
    platforms: [iphone, ipad, macos]
    since: "3.3.0"

  - name: viewShadowColor
    summary: Determines the color of the shadow.
    description: Defaults to `undefined`. Behaves as if transparent.
    type: [String, Titanium.UI.Color]
    platforms: [iphone, ipad, macos]
    since: "3.3.0"

  - name: viewShadowOffset
    summary: Determines the offset for the shadow of the view.
    description: Defaults to `undefined`. Behaves as if set to (0,-3)
    type: Point
    platforms: [iphone, ipad, macos]
    since: "3.3.0"

  - name: visible
    summary: Determines whether the view is visible.
    type: Boolean
    default: true

  - name: width
    summary: View's width, in platform-specific units.
    description: |
        Defaults to: If undefined, defaults to either <Titanium.UI.FILL> or <Titanium.UI.SIZE>
        depending on the view. See "View Types and Default Layout Behavior" in
        [Transitioning to the New UI Layout System](https://docs.appcelerator.com/platform/latest/#!/guide/Transitioning_to_the_New_UI_Layout_System).

        Can be either a float value or a dimension string (for example, '50%' or '40dp').
        Can also be one of the following special values:

        *    <Titanium.UI.SIZE>. The view should size itself to fit its contents.
        *    <Titanium.UI.FILL>. The view should size itself to fill its parent.
        *    'auto'.  Represents the default sizing behavior for a given type of
             view. The use of 'auto' is deprecated, and should be replaced with the `SIZE` or
             `FILL` constants if it is necessary to set the view's behavior explicitly.

        This is an input property for specifying the view's width dimension. To determine
        the view's size once rendered, use the [rect](Titanium.UI.View.rect) or
        [size](Titanium.UI.View.size) properties.
    type: [Number,String]
    constants: [Titanium.UI.FILL, Titanium.UI.SIZE]

  - name: horizontalWrap
    summary: Determines whether the layout has wrapping behavior.
    description: |
        For more information, see the discussion of horizontal layout mode in the description of
        the [layout](Titanium.UI.View.layout) property.
    type: Boolean
    default: true
    since: "2.1.0"

  - name: zIndex
    summary: Z-index stack order position, relative to other sibling views.
    description: |
        A view does not have a default z-index value, meaning that it is undefined by default.
        When this property is explicitly set, regardless of its value, it causes the view to be
        positioned in front of any sibling that has an undefined z-index.

        Defaults to `undefined`.
    type: Number

  - name: keepScreenOn
    summary: Determines whether to keep the device screen on.
    description: |
        When `true` the screen will not power down. Note: enabling this feature will use more
        power, thereby adversely affecting run time when on battery.
    type: Boolean
    default: false
    platforms: [android]

examples:
  - title: Round View Example
    example: |
        Create a rounded view.

        ``` js
        var view = Titanium.UI.createView({
            borderRadius:10,
            backgroundColor:'red',
            width:50,
            height:50
        });
        window.add(view);
        ```

  - title: Alloy XML Markup
    example: |
        Previous example as an Alloy view.

        ``` xml
        <Alloy>
            <View id="view" borderRadius="10" backgroundColor="red" width="50" height="50" />
        </Alloy>
        ```

---
name: Point
summary: A pair of coordinates used to describe the location of a <Titanium.UI.View>.
since: "1.8.0"
platforms: [android, iphone, ipad, macos]
properties:
  - name: x
    type: [Number, String]
    summary: The x-axis coordinate of this point.

  - name: y
    type: [Number, String]
    summary: The y-axis coordinate of this point.
---
name: Gradient
summary: A simple object defining a color gradient.
platforms: [android, iphone, ipad, macos]
since: "1.8.0"
properties:
  - name: type
    summary: Type of gradient, either 'linear' or 'radial'.
    type: String
    default: linear

  - name: startPoint
    summary: Start point for the gradient.
    type: Point
    default: "{x: 0.0, y: 0.0}"

  - name: endPoint
    summary: End point for the gradient.
    type: Point
    default: "{x: 0.0, y: 1.0}"

  - name: startRadius
    summary: For a radial gradient, the radius at the `startPoint`.
    type: Number
    platforms: [android, iphone, ipad, macos]
    since: {android: "7.1.0"}

  - name: endRadius
    summary: For a radial gradient, the radius at the `endPoint`.
    type: Number
    platforms: [android, iphone, ipad, macos]
    since: {android: "7.1.0"}

  - name: colors
    summary: |
        An array of colors, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [ Array<String>, Array<GradientColorRef> ]

  - name: backfillStart
    summary: Set to `true` to continue filling with the starting color beyond the `startPoint`.
    description: On Android, this property is only supported by radial gradients.
    type: Boolean
    default: false
    platforms: [android, iphone, ipad, macos, macos]
    since: {android: "7.1.0"}

  - name: backfillEnd
    summary: Set to `true` to continue filling with the final color beyond the `endPoint`.
    description: On Android, this property is only supported by radial gradients.
    type: Boolean
    default: false
    platforms: [android, iphone, ipad, macos]
    since: {android: "7.1.0"}

---
name: GradientColorRef
summary: A simple object consisting of a color and an offset.
properties:
  - name: color
    summary: |
        Color value at this point in the gradient, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: [String, Titanium.UI.Color]

  - name: offset
    summary: The color's normalized position within the gradient, ranging from 0 (start) to 1 (end).
    description: |
        For a linear gradient, the offset ranges between [startPoint](Gradient.startPoint)
        and [endPoint](Gradient.endPoint).

        For a radial gradient, the offset ranges between [startRadius](Gradient.startRadius)
        and [endRadius](Gradient.endRadius).
    type: Number

---
name: MinMaxOptions
summary: An object for setting `min`/`max` value pairs.
properties:
  - name: min
    type: Number
    summary: Minimum value

  - name: max
    type: Number
    summary: Maximum value

---
name: ViewPositionOptions
summary: |
    Pass an object with the following key-value pairs:

      * `view` (Titanium.UI.View): View to insert
      * `position` (Number): Position in the [children](Titanium.UI.View.children) array of
        the view elment to replace.
properties:
  - name: view
    type: Titanium.UI.View
    summary: View to insert. Required.
    optional: false

  - name: position
    type: Number
    summary: Position in the [children](Titanium.UI.View.children) array of the view element to replace.
    optional: true
