---
name: Titanium.Database
summary: |
  The top-level `Database` module, used for creating and accessing the
  in-application SQLite database.
extends: Titanium.Module
since: "0.1"
platforms: [android, iphone, ipad, macos]
methods:
  - name: install
    summary: Installs an SQLite database to device's internal storage.
    description: |
      Copies an SQLite database file to the device's internal storage (only) and
      creates a persistent name that is available for the lifetime of the app. 
      On Android, if the source file does not exist, an empty database is created.

      Returns a reference to the opened database. If the destination file already
      exists, behaves as <Titanium.Database.open>.

      This method is primarily used for iOS.
      
      With Android, as there is often minimal internal storage available, `install`
      may only be appropriate for small databases or for prototyping. When database
      files are to be stored on external storage (for example, SD Card), a combination of
      <Titanium.Filesystem> and <Titanium.Database.open> is required.

      With Titanium 1.8.0.1 on iOS, the default database location changed in accordance
      with Apple's guidelines. If a database file already exists in the old
      location, `install` will automatically move it to the new location
      rather than copying the file from the path provided in the first
      argument.

      Files stored in the `Private Documents` directory on iOS5 will be
      automatically backed up to iCloud and removed from the device in low
      storage situations. See
      [How do I prevent files from being backed up to iCloud and iTunes?](https://developer.apple.com/library/ios/qa/qa1719/_index.html)
      for details. To prevent this for database files, use the <Titanium.Database.DB.file> 
      object with the <Titanium.Filesystem.File.remoteBackup> property. 

      Always [close](Titanium.Database.DB.close) the database after use.
    returns:
        type: Titanium.Database.DB
    parameters:
      - name: path
        summary: |
          Path and filename of the database file to copy to internal storage.
          File location is relative to the script's context unless an absolute
          path, such as one constructed with a <Titanium.Filesystem> 
          constant, is used.
        type: String
      - name: dbName
        summary: |
          Destination filename or absolute path, which will subsequently be passed to
          <Titanium.Database.open>.
        type: String
    examples:
    - title: Install a Database (iOS)
      example: |
        A database, with a filename of `mydb1` and located in the same directory as the
        the running script, is installed.

        ``` js
        var db1 = Ti.Database.install('mydb1', 'mydb1Installed');
        ```

        The file is copied to the default database location with a file
        extension of `sql`.

        **On simulator**

        * `/Users/user_name/Library/Application Support/iPhone Simulator/ios_version/Applications/apple_app_id/Library/Private Documents/mydb1Installed.sql` (Titanium 1.8.0.1)
        * `/Users/user_name/Library/Application Support/iPhone Simulator/ios_version/Applications/apple_app_id/Library/Application Support/database/mydb1Installed.sql` (earlier versions)

        **On device**

        * `/Applications/apple_app_id/Library/Private Documents/mydb1Installed.sql` (Titanium 1.8.0.1)
        * `/Applications/apple_app_id/Library/Application Support/database/mydb1Installed.sql` (earlier versions)

        To prevent the database file being automatically backed up to iCloud, use [remoteBackup](Titanium.Filesystem.File.remoteBackup).

        ``` js
        db1.file.remoteBackup = false;
        ```

    - title: Install a Database to Internal Storage (Android)
      example: |
        A database, with a filename of `mydb1` and located in the same directory as the
        the running script, is installed.

        ``` js
        var db1 = Ti.Database.install('mydb1', 'mydb1Installed');
        ```

        Unlike on iOS, no file extension is added. The file is opened in the
        following default database location, on both emulator and device.

        * `file:///data/data/appID/databases/mydb1Installed`
    - title: Install a Database to External Storage (Android)
      example: |
        The device is checked for the presence of external storage and a
        database, with a filename of `mydb2` and located in the same directory as the
        the running script, is installed.

        ``` js
        if (Ti.Platform.name === 'android' && Ti.Filesystem.isExternalStoragePresent()) {
          var db2 = Ti.Database.install('mydb2', Ti.Filesystem.externalStorageDirectory + 'path' + Ti.Filesystem.separator + 'to' + Ti.Filesystem.separator + 'mydb2Installed');
        }
        ```

        Unlike on iOS, no file extension is added. The file is copied to the
        absolute path provided.

        * `file:///sdcard/path/to/mydb2Installed`
    platforms: [android, iphone, ipad, macos]
  - name: open
    summary: Opens an SQLite database.
    description: |
      Opens an SQLite database and returns a reference to it. If the database does
      not exist, creates an empty database file and returns a reference to this
      opened database.

      With Titanium 1.8.0.1 on iOS, the default database location changed in accordance
      with Apple's guidelines. If a database file already exists in the old
      location, `open` will automatically move it to the new location.

      Always [close](Titanium.Database.DB.close) the database after use.
    returns:
        type: Titanium.Database.DB
    parameters:
      - name: dbName
        summary: |
          The dbname previously passed to <Titanium.Database.install>. An absolute path 
          to the file, including one that is constructed with a <Titanium.Filesystem> 
          constant or <Titanium.Filesystem.directoryForSuite> method, may be used.
        type: String
    examples:
    - title: Open a Database from Internal Storage (iOS)
      example: |
        A database, with a persistant name of `mydb1Installed` and located in the
        default database location on internal storage, is opened.

        ``` js
        var db = Ti.Database.open('mydb1Installed');
        ```

        A file extension of `sql` is added, and the file is opened from the
        following location.
        
        On simulator

        * `/Users/<user name>/Library/Application Support/iPhone Simulator/<iOS version>/Applications/<apple app id>/Library/Private Documents/mydb1Installed.sql` (Titanium 1.8.0.1)
        * `/Users/<user name>/Library/Application Support/iPhone Simulator/<iOS version>/Applications/<apple app id>/Library/Application Support/database/mydb1Installed.sql` (earlier versions)

        On device

        * `/Applications/<apple app id>/Library/Private Documents/mydb1Installed.sql` (Titanium 1.8.0.1)
        * `/Applications/<apple app id>/Library/Application Support/database/mydb1Installed.sql` (earlier versions)
    - title: Open a Database on Internal Storage (Android)
      example: |
        A database, with a persistant name of `mydb1Installed` and located in the
        default database location on internal storage, is opened.

        ``` js
        var db1 = Ti.Database.open('mydb1Installed');
        ```

        Unlike on iOS, no file extension is added. The file is opened in
        the following location.

        * `file:///data/data/appID/databases/mydb1Installed`
    - title: Open a Database on External Storage (Android)
      example: |
        A database, with a filename of `mydb2Installed` and located at the
        absolute path provided, is opened.

        ``` js
        if (Ti.Platform.name === 'android' && Ti.Filesystem.isExternalStoragePresent()) {
          var db2 = Ti.Database.open(Ti.Filesystem.externalStorageDirectory + 'path' + Ti.Filesystem.separator + 'to' + Ti.Filesystem.separator + 'mydb2Installed');
        }
        ```

        Unlike on iOS, no file extension is added. The file is copied to the
        absolute path, as follows.

        * `file:///sdcard/path/to/mydb2Installed`
    - title: Open a Database in the shared directory of an application group (iOS)
      example: |
        Opens a Database in a shared directory

        ``` js
        var suiteDir = Ti.Filesystem.directoryForSuite('group.appc.Sharing');
        if (!suiteDir) {
            logInApp('Suite Directory not found, check Entitlements.');
            return;
        }
        var path = suiteDir + 'TestDB';
        var db = Ti.Database.open(path);
        db.close();
        ```
properties:
  - name: FIELD_TYPE_DOUBLE
    summary: Constant for requesting a column's value returned in double form.
    type: Number
    permission: read-only

  - name: FIELD_TYPE_FLOAT
    summary: Constant for requesting a column's value returned in float form.
    type: Number
    permission: read-only

  - name: FIELD_TYPE_INT
    summary: Constant for requesting a column's value returned in integer form.
    type: Number
    permission: read-only

  - name: FIELD_TYPE_STRING
    summary: Constant for requesting a column's value returned in string form.
    type: Number
    permission: read-only
