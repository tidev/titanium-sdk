---
name: Titanium.Database.DB
summary: The `Database` instance returned by <Titanium.Database.open> or <Titanium.Database.install>.
extends: Titanium.Proxy
since: "0.1"
createable: false
platforms: [android, iphone, ipad, macos]
methods:
  - name: close
    summary: |
      Closes the database and releases resources from memory. Once closed, this instance is no
      longer valid and should not be used. On iOS, also closes all <Titanium.Database.ResultSet>
      instances that exist.

  - name: execute
    summary: |
      Executes an SQL statement against the database and returns a `ResultSet`.
    returns:
        type: Titanium.Database.ResultSet
    parameters:
      - name: sql
        summary: SQL to execute. May include placeholders for parameter substitution.
        type: String

      - name: vararg
        summary: |
          Either a variable ordered list of zero or more values, or an array of values,
          to be substituted with the respective `?` placeholder of the query.
        type: [String, Array<String>, Object, Array<Object>]
        optional: true
        repeatable: true
    examples:
    - title: Executing a Query
      example: |
        The following code will install a database using
        [Titanium.Database.install](Titanium.Database.install) and execute SQL statements that will
        create a table, insert data and query the table.

        ``` js
        var db = Ti.Database.install('mydb1', 'mydb1Installed');
        db.execute('DELETE FROM people');
        db.execute('CREATE TABLE IF NOT EXISTS people (name TEXT, phone_number TEXT, city TEXT)');

        var thisName = 'Arthur';
        var thisPhoneNo = '1-617-000-0000';
        var thisCity = 'Mountain View';
        db.execute('INSERT INTO people (name, phone_number, city) VALUES (?, ?, ?)', thisName, thisPhoneNo, thisCity);

        var personArray = ['Paul','020 7000 0000', 'London'];
        db.execute('INSERT INTO people (name, phone_number, city) VALUES (?, ?, ?)', personArray);

        var rows = db.execute('SELECT rowid,name,phone_number,city FROM people');
        db.close();

        while (rows.isValidRow()) {
          Ti.API.info('Person ---> ROWID: ' + rows.fieldByName('rowid') + ', name:' + rows.field(1) + ', phone_number: ' + rows.fieldByName('phone_number') + ', city: ' + rows.field(3));
          rows.next();
        }
        rows.close();
        ```

        Note that the above `SELECT` query contains the [rowid](http://www.sqlite.org/lang_createtable.html#rowid)
        column, which is a SQLite-specific column that stores the unique identifier for each row.

  - name: executeAsync
    summary: |
      Asynchronously executes an SQL statement against the database and fires a callback with a possible `Error` argument, and a second argument holding a possible `ResultSet`.
    parameters:
      - name: query
        summary: SQL query to execute. May include placeholders for parameter substitution.
        type: String

      - name: vararg
        summary: |
          Either a variable ordered list of zero or more values, or an array of values,
          to be substituted with the respective `?` placeholder of the query.
        type: [String, Array<String>, Object, Array<Object>]
        optional: true

      - name: callback
        summary: Callback when query execution has completed.
        type: Callback<Object, Titanium.Database.ResultSet>
        optional: true
    returns:
      type: Promise<Titanium.Database.ResultSet>
      summary: On SDK 10+, this method will return a `Promise` whose resolved value is equivalent to that passed to the optional callback argument.
    since: { android: "8.1.0", iphone: "8.1.0", ipad: "8.1.0" }

  - name: executeAll
    summary: |
      Synchronously executes an array of SQL statements against the database and returns an array of `ResultSet`.
      On failure, this will throw an [Error](BatchQueryError) that reports the failed index and partial results
    returns:
        type: Array<Titanium.Database.ResultSet>
    platforms: [android, iphone, ipad, macos]
    parameters:
      - name: queries
        summary: Array of SQL queries to execute.
        type: Array<String>
    since: { android: "8.1.0", iphone: "8.1.0", ipad: "8.1.0" }

  - name: executeAllAsync
    summary: |
      Asynchronously executes an array of SQL statements against the database and fires a callback with a possible Error, and an array of `ResultSet`.
      On failure, this will call the callback with an [Error](PossibleBatchQueryError) that reports the failed `index`, and a second argument with the partial `results`.
    platforms: [android, iphone, ipad, macos]
    parameters:
      - name: queries
        summary: Array of SQL queries to execute.
        type: Array<String>

      - name: callback
        summary: Callback when query execution has completed.
        type: Callback<PossibleBatchQueryError, Array<Titanium.Database.ResultSet>>
        optional: true
    returns:
      type: Promise<Array<Titanium.Database.ResultSet>>
      summary: |
          On SDK 10+, this method will return a `Promise` whose resolved value is equivalent to that passed to the optional callback argument.
          If the `Promise` is rejected, the `Error` will have custom properties indicating the `index` of the failed query, and the partial `results` up to that failure. See <PossibleBatchQueryError>.
    since: { android: "8.1.0", iphone: "8.1.0", ipad: "8.1.0" }

  - name: remove
    summary: |
        Removes the database files for this instance from disk. WARNING: this is a destructive
        operation and cannot be reversed. All data in the database will be lost; use with caution.

properties:
  - name: file
    summary: |
      A `File` object representing the file where this database is stored. Must only be used for
      setting file properties.
    type: Titanium.Filesystem.File
    permission: read-only
    platforms: [android, iphone, ipad, macos]
    since:
        android: 5.4.0
        iphone: 2.0.0
        ipad: 2.0.0

  - name: lastInsertRowId
    summary: The identifier of the last populated row.
    type: Number
    permission: read-only

  - name: name
    summary: The name of the database.
    type: String
    permission: read-only

  - name: rowsAffected
    summary: The number of rows affected by the last query.
    type: Number
    permission: read-only

---
name: BatchQueryError
summary: |
    Simple `Error` instance thrown from the
    [executeAll](Titanium.Database.DB.executeAll) method in case of failure
since: { android: "8.1.0", iphone: "8.1.0", ipad: "8.1.0" }
properties:

  - name: index
    summary: Index of the failed query
    type: Number
    since: { android: "8.1.0", iphone: "8.1.0", ipad: "8.1.0" }

  - name: results
    summary: partial `ResultSet`s of any successful queries before the failure 
    type: Array<Titanium.Database.ResultSet>
    since: { android: "8.1.0", iphone: "8.1.0", ipad: "8.1.0" }

---
name: PossibleBatchQueryError
summary: |
    Simple `Error` argument provided to the callback from the
    [executeAllAsync](Titanium.Database.DB.executeAllAsync) method in case of failure
since: { android: "8.1.0", iphone: "8.1.0", ipad: "8.1.0" }
properties:

  - name: index
    summary: Index of the failed query
    type: Number
    since: { android: "8.1.0", iphone: "8.1.0", ipad: "8.1.0" }
