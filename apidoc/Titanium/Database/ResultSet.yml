---
name: Titanium.Database.ResultSet
summary: The ResultSet instance returned by <Titanium.Database.DB.execute>.
extends: Titanium.Proxy
since: "0.1"
createable: false
platforms: [android, iphone, ipad, macos]
description: |
    A result set represents the results returned by a database query.

    The [rowCount](Titanium.Database.ResultSet.rowCount) property identifies the number of
    rows in the result set. The `ResultSet` object maintains an internal record of the 
    current row. As shown in the example, you can use the 
    [next](Titanium.Database.ResultSet.next) method to iterate through the rows in the set.
    
    Use the [field](Titanium.Database.ResultSet.field) or
    [fieldByName](Titanium.Database.ResultSet.fieldByName) methods to query the fields for
    the current row.

    On the iOS platform, closing the database also closes the result set, that is,
    you can only access the result set if the database is currently open.

methods:
  - name: close
    summary: |
        Closes this result set and release resources. Once closed, the result set must no longer 
        be used.
    
  - name: field
    summary: |
        Retrieves the value for the specified field in the current row, 
        and casts it to the specified type (String, Integer, Float or Double.)
    description: |
        All of the numeric types (Integer, Float or Double) are returned as JavaScript Number objects.  
        
        If no `type` parameter is specified, the returned data type depends on the data in the column.  
        
        * If the data in the column is TEXT, the data is returned as a String.
        * If the data in the column is any kind of number, the data is returned as a Number.
        * If the data in the column is a BLOB, the data is returned as a <Titanium.Blob> object.  
        
        When a `type` is specified and the data cannot be converted to the specified type, an 
        exception is thrown.  
        
        Returns null if the value in the table is NULL.
    returns:
      type: [String, Number, Titanium.Blob]
      summary: return type varies based on the underlying data and optional `type` argument. If BLOB, we return a Titanium.Blob. If TEXT, we return String. If any kind of number, we return a Number.
    parameters:
      - name: index
        summary: A zero-based column index.
        type: Number
        
      - name: type
        summary: Type to cast field value.
        type: Number
        constants: Titanium.Database.FIELD_TYPE_*
        optional: true
    
  - name: fieldByName
    summary: |
        Retrieves the value for the specified field in the current row, 
        and casts it to the specified type (String, Integer, Float or Double.)
    description: |
        All of the numeric types (Integer, Float or Double) are returned as JavaScript Number objects.  
        
        If no `type` parameter is specified, the returned data type depends on the data in the column.  
        
        * If the data in the column is TEXT, the data is returned as a String.
        * If the data in the column is any kind of number, the data is returned as a Number.
        * If the data in the column is a BLOB, the data is returned as a <Titanium.Blob> object.  
        
        When a `type` is specified and the data cannot be converted to the specified type, an 
        exception is thrown.  
        
        Returns null if the value in the table is NULL.        
    returns:
      type: [String, Number, Titanium.Blob]
      summary: return type varies based on the underlying data and optional `type` argument. If BLOB, we return a Titanium.Blob. If TEXT, we return String. If any kind of number, we return a Number.
    parameters:
      - name: name
        summary: A column name or alias used in the SQL query.
        type: String
      - name: type
        summary: Type to cast for the field value.
        type: Number
        constants: Titanium.Database.FIELD_TYPE_*
        optional: true
    
  - name: fieldName
    summary: Returns the field name for the specified field index.
    returns:
        type: String
    parameters:
      - name: index
        summary: A zero-based column index for the field.
        type: Number

  - name: getFieldName
    summary: Returns the field name for the specified field index.
    returns:
        type: String
    parameters:
      - name: index
        summary: A zero-based column index for the field.
        type: Number
    platforms: [android]
        
  - name: isValidRow
    summary: Returns whether the current row is valid.
    returns:
        type: Boolean
    
  - name: next
    summary: |
        Advances to the next row in the result set and returns `true` if one exists, 
        or `false` otherwise.
    returns:
        type: Boolean

properties:
  - name: fieldCount
    summary: The number of columns in this result set.
    type: Number
    permission: read-only
    platforms: [android,  iphone, ipad, macos]
    since: {iphone: "3.3.0", ipad: "3.3.0"}

  - name: rowCount
    summary: The number of rows in this result set.
    type: Number
    permission: read-only
    
  - name: validRow
    summary: Indicates whether the current row is valid.
    type: Boolean
    permission: read-only
    platforms: [iphone,ipad,android, macos]

examples:
  - title: Using ResultSet
    example: |
        The following code will create a database and execute SQL statements that will create a 
        table, insert data into it, query the table and iterate through the returned
        `ResultSet`.
        
        ``` js
        var db = Ti.Database.open('mydb1Installed');
        db.execute('CREATE TABLE IF NOT EXISTS people (name TEXT, phone_number TEXT, city TEXT)');
        db.execute('DELETE FROM people');
        
        var thisName = 'Arthur';
        var thisPhoneNo = '1-617-000-0000';
        var thisCity = 'Mountain View';
        db.execute('INSERT INTO people (name, phone_number, city) VALUES (?, ?, ?)', thisName, thisPhoneNo, thisCity);
        
        var personArray = ['Paul','020 7000 0000', 'London'];
        db.execute('INSERT INTO people (name, phone_number, city) VALUES (?, ?, ?)', personArray);
        
        var rows = db.execute('SELECT rowid,name,phone_number,city FROM people');
        Ti.API.info('Row count: ' + rows.rowCount);

        var fieldCount = rows.fieldCount;
        Ti.API.info('Field count: ' + fieldCount);
        
        while (rows.isValidRow()){
          Ti.API.info('Person ---> ROWID: ' + rows.fieldByName('rowid') + ', name:' + rows.field(1) + ', phone_number: ' + rows.fieldByName('phone_number') + ', city: ' + rows.field(3));
          rows.next();
        }
        rows.close();
        db.close();
        ```
        
        Note that the above `SELECT` query contains the [rowid](http://www.sqlite.org/lang_createtable.html#rowid)
        field, which contains an SQLite-specific unique identifier for each row.
