---
name: Titanium.Media.VideoPlayer
summary: A native control for playing videos.
description: |
    The video player is a native view that can be used to play videos, either stored
    locally or streamed from a web server. The player can occupy the full screen, or can
    be used as a view that can be added to other views.

    Use the <Titanium.Media.createVideoPlayer> method to create a video player.

    All platforms support specifying the video content as a URL, either to a local file or
    a remote stream. This is done by setting the [url](Titanium.Media.VideoPlayer.url) property.

    #### iOS Implementation Notes

    On iOS, video content can also be specified as a [Blob](Titanium.Blob) or
    [File](Titanium.Filesystem.File) object using the
    [media](Titanium.Media.VideoPlayer.media) property.

    On iOS, a video player can dynamically switch back and forth between fullscreen mode
    and standard mode. If the native video controls are displayed, the user can use them
    to switch between standard and fullscreen mode.

    #### Android Implementation Notes

    On Android, the video player cannot switch modes. To create a fullscreen player, you
    must specify `fullscreen: true` when you create the player. This fullscreen player
    creates its own Android [Activity](Titanium.Android.Activity) on top of the activity stack.
    Unlike a normal view, this fullscreen video player appears as soon as it is created.
    The user can close the player by pressing the **Back** button. See the code examples for
    a sample using the fullscreen player on Android.

    There are several known issues with clipping on the Android video player.

    * When used with `scalingMode` set to VIDEO_SCALING_ASPECT_FILL or VIDEO_SCALING_NONE,
      the video content is not correctly clipped to the boundaries of the view.
      ([TIMOB-7628](https://jira.appcelerator.org/browse/TIMOB-7628))

    * When a border is set on the view, the video content does not take the border width
      into account, so the video content covers the border.
      ([TIMOB-7628](https://jira.appcelerator.org/browse/TIMOB-7628))

    * If a borderRadius is specified, the video content is not clipped to the rounded
      corners. ([TIMOB-7629](https://jira.appcelerator.org/browse/TIMOB-7629))

    On Android, using a video player inside a scroll view is not recommended. When scrolling,
    black bars may appear over the video content.

    This is because the video player is rendered on a special Android UI element called a SurfaceView.
    Android renders the SurfaceView behind the main window and punches a hole in the window
    to reveal the video.  Because the content of the SurfaceView does not reside in the application
    window, the video content cannot be transformed (moved, scaled or rotated) with the window.
    This makes it difficult for the content to render properly inside a ScrollView.
extends: Titanium.UI.View
excludes:
    events: ['focus', 'pinch', 'longclick', 'twofingertap']
since: "0.9"
examples:
  - title: Simple Video Player Example
    example: |
        The following code creates a simple video player to play a local video file.

        ``` js
        var vidWin = Titanium.UI.createWindow({
            title: 'Video View Demo',
            backgroundColor: '#fff'
        });

        var videoPlayer = Titanium.Media.createVideoPlayer({
            top: 2,
            autoplay: true,
            backgroundColor: 'blue',
            height: 300,
            width: 300,
            mediaControlStyle: Titanium.Media.VIDEO_CONTROL_DEFAULT,
            scalingMode: Titanium.Media.VIDEO_SCALING_RESIZE_ASPECT
        });

        videoPlayer.url = 'movie.mp4';
        vidWin.add(videoPlayer);
        vidWin.open();
        ```

  - title: Android Fullscreen Video Player
    example: |
        The Android fullscreen video player operates differently from other video players.
        The following example shows how to create, show, and close a fullscreen video
        player.

        Note that in this example, a button is included to close the player, to
        demonstrate a method for dismissing the player programmatically. In practice, the user
        can always dismiss the player by using the **Back** button, so an on-screen
        control would not be required.

        ``` js
        var win = Titanium.UI.createWindow({
            title: 'Test',
            backgroundColor: '#fff'
        });

        // Change to a valid URL
        var contentURL = "http://www.example.com/stream.mp4";

        var openButton = Ti.UI.createButton({
            title: "Start Video",
            top: "0dp",
            height: "40dp",
            left: "10dp",
            right: "10dp"
        });

        openButton.addEventListener('click', function() {
            var activeMovie = Titanium.Media.createVideoPlayer({
                url: contentURL,
                backgroundColor: 'blue',
                mediaControlStyle: Titanium.Media.VIDEO_CONTROL_DEFAULT,
                scalingMode: Titanium.Media.VIDEO_SCALING_RESIZE_ASPECT_FILL,
                fullscreen: true,
                autoplay: true
            });

            var closeButton = Ti.UI.createButton({
                title: "Exit Video",
                top: "0dp",
                height: "40dp",
                left: "10dp",
                right: "10dp"
            });

            closeButton.addEventListener('click', function() {
                activeMovie.hide();
                activeMovie.release();
                activeMovie = null;
            });

            activeMovie.add(closeButton);
        });
        win.add(openButton);
        win.open();
        ```

  - title: Alloy XML Markup
    example: |
        Previous simple example as an Alloy view.

        **simplevideoplayer.xml:**
        ``` xml
        <Alloy>
            <Window id="vidWin" title="Video View Demo" backgroundColor="#fff">
                <VideoPlayer id="videoPlayer" ns="Ti.Media" top="2" url="/movie.mp4"
                              height="300" width="300" backgroundColor="blue" autoplay="true" />
            </Window>
        </Alloy>
        ```

methods:

  - name: cancelAllThumbnailImageRequests
    summary: Cancels all pending asynchronous thumbnail requests.
    description: |
        Asynchronous thumbnail requests initiated with
        [requestThumbnailImagesAtTimes](Titanium.Media.VideoPlayer.requestThumbnailImagesAtTimes).
    platforms: [iphone, ipad, android, macos]
    since:
        android: "3.6.0"

  - name: pause
    summary: Pauses playing the video.

  - name: play
    summary: Starts playing the video.

  - name: release
    summary: Releases the internal video resources immediately.
    description: |
        This is not usually necessary but can help if you no longer need to use the player after
        it is used to help converse memory.

  - name: requestThumbnailImagesAtTimes
    summary: Asynchronously request thumbnail images for one or more points in time in the video.
    description: |
        The `times` parameter specifies an array of time values, in
        **seconds**. For each time value, the platform generates an image
        representing the video at that point in time.

        The callback function is invoked when a thumbnail is available.

        Calling this method will cancel all pending asynchronous thumbnail requests.
    platforms: [iphone, ipad, android, macos]
    since:
        android: "3.6.0"
    parameters:
      - name: times
        summary: Array of time values, representing offsets into the video, in seconds.
        type: Array<Number>
      - name: option
        summary: Video time precision.
        type: Number
        constants: Titanium.Media.VIDEO_TIME_OPTION_*
      - name: callback
        summary: Callback to invoke when a thumbnail is available.
        type: Callback<ThumbnailResponse>

  - name: stop
    summary: Stops playing the video.

events:
  - name: complete
    summary: Fired when movie playback ends or a user exits playback.
    description: |
        On iOS, the `reason` property is only included if this information is available.
    properties:
      - name: reason
        summary: |
            Reason that playback ended.
        type: Number
        constants: Titanium.Media.VIDEO_FINISH_REASON_*

      - name: success
        summary: |
            Indicates if the video was played successfully. User exit counts as a success.
            Returns `true` if `reason` is not
            [VIDEO_FINISH_REASON_PLAYBACK_ERROR](Titanium.Media.VIDEO_FINISH_REASON_PLAYBACK_ERROR),
            `false` otherwise.
        type: Boolean
        platforms: [iphone, ipad, android, macos]

      - name: error
        summary: Error message, if any returned. Will be undefined if `success` is `true`.
        type: String
        platforms: [iphone, ipad, android, macos]

      - name: code
        summary: |
            Error code.
            Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
            was generated by the operating system, that system's error value is used.
            Otherwise, this value will be -1.
        type: Number
        platforms: [iphone, ipad, android, macos]

  - name: durationavailable
    summary: Fired when the video duration is available.
    properties:
      - name: duration
        summary: Video duration, in milliseconds.
        type: Number
    since: '3.0.0'

  - name: error
    summary: Fired when movie playback encounters an error.
    properties:
      - name: message
        summary: Reason for error as a string.
        type: String
        deprecated:
            since: "3.1.0"
            removed: "10.0.0"
            notes: Use `error` property instead
      - name: success
        summary: Indicates a successful operation. Returns `false`.
        type: Boolean
      - name: error
        summary: Error message, if any returned. May be `undefined`.
        type: String
      - name: code
        summary: |
            Error code.
            If the error was generated by the operating system, that system's error value
            is used. Otherwise, this value will be `-1`.
        type: Number

  - name: fullscreen
    deprecated:
        since: "7.0.0"
        notes: This event has been removed in Titanium SDK 7.0.0 as of the official deprecation by Apple.
        removed: "7.0.0"
    summary: Fired when a movie changes to or from fullscreen view.
    description: |
        On iOS, this event is fired at the beginning of the transition to
        fullscreen mode. A `duration` property is provided, indicating the duration
        of the animated transition to or from fullscreen mode.
    platforms: [iphone, ipad]
    properties:
      - name: entering
        summary: |
            `true` if the player is entering fullscreen mode, `false` if it is leaving
            fullscreen mode.
        type: Boolean

      - name: duration
        summary: Duration of the animated transition to or from fullscreen mode, in seconds.
        type: Number
        platforms: [iphone, ipad, macos]

  - name: load
    summary: Fired when the movie play loads.

  - name: loadstate
    summary: |
        Fired when the network [loadState](Titanium.Media.VideoPlayer.loadState) changes.
    properties:
      - name: loadState
        summary: Current value of the [loadState](Titanium.Media.VideoPlayer.loadState) property.
        type: Number

  - name: naturalsizeavailable
    summary: Fired when the natural size of the current movie is determined.
    platforms: [iphone, ipad, macos]
    properties:
      - name: naturalSize
        summary: Current value of the [naturalSize](Titanium.Media.VideoPlayer.naturalSize) property.
        type: Number
    since: '3.0.0'

  - name: playbackstate
    summary: Fired when the [playbackState](Titanium.Media.VideoPlayer.playbackState) changes.
    properties:
      - name: playbackState
        summary: Current value of the [playbackState](Titanium.Media.VideoPlayer.playbackState) property.
        type: Number
        constants: Titanium.Media.VIDEO_PLAYBACK_STATE_*
    since: '3.0.0'

  - name: playing
    summary: Fired when the currently playing movie changes.
    platforms: [android, iphone, ipad, macos]
    properties:
      - name: url
        summary: URL of the media.
        type: String

  - name: preload
    summary: Fired when the movie has preloaded and is ready to play.
    platforms: [android]

  - name: resize
    summary: Fired when the movie player is resized.
    platforms: [iphone, ipad, macos]

  - name: click
    summary: Fired when the device detects a click against the view.
    description: |
        There is a subtle difference between singletap and click events.

        A singletap event is generated when the user taps the screen briefly
        without moving their finger. This gesture will also generate a click event.

        However, a click event can also be generated when the user touches,
        moves their finger, and then removes it from the screen.

        On Android, a click event can also be generated by a trackball click.
    properties:
      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number
      - name: x
        type: Number
        summary: X coordinate of the event from the `source` view's coordinate system.
    platforms: [android]

  - name: singletap
    summary: Fired when the device detects a single tap against the view.
    properties:
      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number
      - name: x
        type: Number
        summary: X coordinate of the event from the `source` view's coordinate system.
    platforms: [android]

  - name: touchcancel
    summary: Fired when a touch event is interrupted by the device.
    description: |
        A touchcancel can happen in circumstances such as an incoming call to allow the
        UI to clean up state.
    properties:
      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number
      - name: x
        type: Number
        summary: X coordinate of the event from the `source` view's coordinate system.
    platforms: [android]

  - name: touchend
    summary: Fired when a touch event is completed.
    description: |
        On the Android platform, other gesture events, such as `longpress` or `swipe`, cancel touch events,
        so this event may not be triggered after a `touchstart` event.
    properties:
      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number
      - name: x
        type: Number
        summary: X coordinate of the event from the `source` view's coordinate system.
    platforms: [android]

  - name: touchmove
    summary: Fired as soon as the device detects movement of a touch.
    description: |
        Event coordinates are always relative to the view in which the initial touch occurred
    properties:
      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number
      - name: x
        type: Number
        summary: X coordinate of the event from the `source` view's coordinate system.
    platforms: [android]

properties:

  - name: allowsAirPlay
    summary: Whether or not the current movie can be played on a remote device.
    type: Boolean
    platforms: [iphone, ipad, macos]
    osver:
        ios:
            min: "4.3"

  - name: autoplay
    summary: Indicates if a movie should automatically start playback.
    description: |
        On iOS, playback starts automatically if `autoplay` is `true` *and* the movie is likely to
        finish uninterrupted. The OS determines whether the movie is likely to finish
        uninterrupted based on factors including the bit rate of the movie and network
        conditions (if the movie is being streamed from a remote source).
    type: Boolean
    default: true

  - name: backgroundView
    deprecated:
        since: "7.0.0"
        notes: Use [Titanium.Media.VideoPlayer.overlayView](Titanium.Media.VideoPlayer.overlayView) instead.
    summary: Sets the background view for customization which is always displayed behind movie content.
    description: |
        To create a background behind the movie content on iOS, you can specify a
        background view. On iOS, you can set the `backgroundColor` property directly on
        the video player, but not a background image or background gradient. For this kind
        of effect, specify a background view.

        Note that the background view must be sized explicitly: percentage sizes do not work properly.

        The following code sample creates a video player with a background image:

        ``` js
        var videoPlayer = Ti.Media.createVideoPlayer({
            height: 300,
            width: 300,
            backgroundView: Ti.UI.createView({
                backgroundImage: 'videoPlayerBG.png
                width: 300,
                height: 300
            }),
            borderRadius: 20,
            borderWidth: 2,
            borderColor: 'blue',
        });
        ```

        Note that if [scalingMode](Titanium.Media.VideoPlayer.scalingMode) is set to
        [VIDEO_SCALING_RESIZE](Titanium.Media.VIDEO_SCALING_RESIZE) or
        [VIDEO_SCALING_RESIZE_ASPECT_FILL](Titanium.Media.VIDEO_SCALING_RESIZE_ASPECT_FILL),
        the playing video will fill the entire video player area, obscuring any background
        view.
    platforms: [iphone, ipad, macos]
    type: Titanium.UI.View

  - name: currentPlaybackTime
    summary: Current playback time of the current movie in milliseconds.
    type: Number

  - name: duration
    summary: The duration of the current movie in milliseconds, or 0.0 if not known.
    description: |
        The duration of the movie may not be available when playback is started. The
        [durationavailable](Titanium.Media.VideoPlayer.durationavailable) event is
        fired when the duration is known.
    type: Number
    default: 0

  - name: endPlaybackTime
    summary: The end time of movie playback, in milliseconds.
    description: |
        On iOS, defaults to 0, which indicates natural end time of the movie.
        Changing the value to a value less than `duration` causes the movie to
        stop playing at the specified point. On iOS, this value is not applicable to
        streaming media, so 0 is returned if the current media is being streamed.

        On Android, this is always the same as [duration](Titanium.Media.VideoPlayer.duration)
        (the natural end time), and changing the value has no effect.
    type: Number
    default: 0

  - name: fullscreen
    platforms: [android]
    deprecated:
        since: "7.0.0"
        notes: This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
    summary: |
        Determines if the movie is presented in the entire screen (obscuring all other application content).
    description: |
        Note that this must be set at different times on different platforms:

        On Android, this property must be set at creation time. For example:

        ``` js
        var player = Ti.Media.createVideoPlayer({fullscreen: true});
        ```

        On Android, setting this value to `true` means that the video will have its own Android Activity
        rather than being embedded as a view.

        This property was removed on iOS in SDK 7.0.0
    type: Boolean
    availability: creation
    default: false

  - name: initialPlaybackTime
    summary: The start time of movie playback, in milliseconds.
    type: Number
    default: 0

  - name: loadState
    deprecated:
        since: "7.0.0"
        notes: On iOS, use [Titanium.Media.VideoPlayer.moviePlayerStatus](Titanium.Media.VideoPlayer.moviePlayerStatus) instead.
    summary: Returns the network load state of the movie player.
    type: Number
    permission: read-only

  - name: media
    summary: Media object to play, as either a `Ti.Filesystem.File`, a `Ti.Blob`, or an URL `String`.
    platforms: [iphone, ipad, macos]
    type: [Titanium.Blob, Titanium.Filesystem.File, String]
    permission: write-only

  - name: mediaControlStyle
    platforms: [android]
    deprecated:
        since: "7.0.0"
        notes: Use [Titanium.Media.VideoPlayer.showsControls](Titanium.Media.VideoPlayer.showsControls) instead.
    summary: The style of the playback controls.
    description: Removed from iOS in SDK 7.0.0
    type: Number
    constants: Titanium.Media.VIDEO_CONTROL_*
    default: System default video controls (<Titanium.Media.VIDEO_CONTROL_DEFAULT>).

  - name: mediaTypes
    summary: The type of media in the player's current item first track.
    exclude-platforms: [android]
    type: String
    permission: read-only
    default: <Titanium.Media.VIDEO_MEDIA_TYPE_VIDEO>
    constants: Titanium.Media.VIDEO_MEDIA_TYPE_*

  - name: moviePlayerStatus
    summary: Returns the status of the movie player.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    constants: Titanium.Media.VIDEO_LOAD_STATE_*

  - name: naturalSize
    summary: Returns the natural size of the movie.
    description: |
        Returns a dictionary with properties `width` and `height`. Returns 0 for both properties if not
        known or applicable.

        The [naturalSizeAvailable](Titanium.Media.VideoPlayer.naturalsizeavailable) event is
        fired when the natural size is known.
    platforms: [iphone, ipad, macos]
    type: MovieSize

  - name: overlayView
    summary: Use the overlay view to add additional custom views between the video content and the controls.
    description: |
        Note that the overlay view must be sized explicitly: percentage sizes do not work properly.

        The following code sample creates a video player with a background image:

        ``` js
        var videoPlayer = Ti.Media.createVideoPlayer({
            height : 300,
            width : 300,
            overlayView : Ti.UI.createView({
                backgroundImage: 'videoPlayerBG.png
                width : 300,
                height : 300
            }),
            borderRadius : 20,
            borderWidth : 2,
            borderColor : 'blue',
        });
        ```
    platforms: [iphone, ipad, macos]
    type: Titanium.UI.View

  - name: pictureInPictureEnabled
    summary: Whether or not the receiver allows Picture in Picture playback.
    platforms: [iphone, ipad, macos]
    type: Boolean
    default: true
    osver: {ios: {min: "9.0"}}

  - name: playableDuration
    summary: |
        Currently playable duration of the movie, in milliseconds, for progressively
        downloaded network content, or 0.0 if not known.
    description: |
        On Android, this is always the same as [duration](Titanium.Media.VideoPlayer.duration).
    type: Number
    permission: read-only
    default: 0

  - name: playbackState
    summary: Current playback state of the video player.
    description: |
        One of the `VIDEO_PLAYBACK_STATE` constants defined in <Titanium.Media>.
    type: Number
    constants: Titanium.Media.VIDEO_PLAYBACK_STATE_*
    permission: read-only

  - name: playing
    summary: Boolean to indicate if the player has started playing.
    type: Boolean
    permission: read-only

  - name: repeatMode
    summary: Determines how the movie player repeats when reaching the end of playback.
    platforms: [android, iphone, ipad, macos]
    type: Number
    constants: Titanium.Media.VIDEO_REPEAT_MODE_*
    default: Titanium.Media.VIDEO_REPEAT_MODE_NONE
    since: {android: "6.2.0", iphone: "0.9.0", ipad: "0.9.0"}

  - name: scalingMode
    summary: Determines how the content scales to fit the view.
    type: Number
    constants: Titanium.Media.VIDEO_SCALING_*
    default: <Titanium.Media.VIDEO_SCALING_RESIZE_ASPECT> on Android, <Titanium.Media.VIDEO_SCALING_RESIZE> on iOS

  - name: showsControls
    summary: Whether or not the receiver shows playback controls. Default is true.
    description: |
        Clients can set this property to false when they don't want to have any playback controls on top of
        the visual content (e.g. for a game splash screen). This property should not be used to temporarily
         change the visibility of the playback controls since it will create or destroy UI elements.
    platforms: [android, iphone, ipad, macos]
    type: Boolean
    default: true
    since: {android: "7.1.0", iphone: "7.0.0", ipad: "7.0.0", macos: "9.2.0"}

  - name: url
    summary: URL of the media to play.
    description: |
        URL identifying a local or remote video to play.
    type: String

  - name: volume
    summary: |
        Volume of the audio portion of the video.
    description: |
        On iOS, this adjusts the volume of the application's session as well, and will
        not work if useApplicationAudioSession has been set false. On the iOS device,
        setting this will be accompanied by an OS-provided indicator. However, the iOS
        simulator does not honor this volume setting, and is a known issue with Apple's
        simulator.
    platforms: [iphone, ipad, macos]
    type: Number
    default: 1.0
    since: "2.1"

---
name: ThumbnailResponse
summary: |
    Simple object passed to the thumbnail callback in response to the
    [requestThumbnailImagesAtTimes](Titanium.Media.VideoPlayer.requestThumbnailImagesAtTimes)
    method.
description: |
    The callback is invoked when a movie thumbnail is available.
platforms: [android, iphone, ipad, macos]
since:
    android: "3.6.0"
extends: ErrorResponse
properties:
  - name: image
    summary: Thumbnail image, as a `Blob`.
    type: Titanium.Blob
    since:
        android: "3.6.0"

  - name: time
    summary: Time offset for the thumbnail, in seconds.
    type: Number
    since:
        android: "3.6.0"

  - name: code
    summary: Error code. Returns `0` if `success` is `true`.
    description: |
        Error code will be `0` if `success` is `true`, nonzero otherwise. If the error
        was generated by the operating system, that system's error value is used.
        Otherwise, this value will be `-1`.
    type: Number
    since:
        iphone: "3.1.0"
        ipad: "3.1.0"
        android: "3.6.0"

---
name: MovieSize
summary: Simple object used to describe the size of a movie.
platforms: [iphone, ipad, macos]
properties:
  - name: width
    summary: Width of the movie.
    type: Number

  - name: height
    summary: Height of the movie.
    type: Number
