---
name: Titanium.Media
summary: The top-level Media module.
description: |
    The Media module is used to access the device's media-related functionality, such
    as using the device's camera and photo gallery, playing media files, or recording
    audio or video.
    For examples of using the Media APIs, refer to the
    [Working with Media APIs guide](https://docs.appcelerator.com/platform/latest/#!/guide/Working_with_Media_APIs)
    in addition to the other media submodule API documentation.
    **Note**: Some third party Android camera apps may choose to ignore video recording quality
    settings. If you wish to specifically set the video quality, don't assume
    `EXTRA_VIDEO_QUALITY` intent will be respected by the camera app and use Titanium's built-in
    camera window which can be used to assign the `overlay` property when calling the
    `showCamera()` method.
extends: Titanium.Module
since: "0.1"
methods:
  - name: beep
    summary: Plays a device beep notification.
    platforms: [iphone, ipad, macos]

  - name: hideCamera
    summary: Hides the device camera UI.
    description: |
        Must be called after calling `showCamera` and only when `autohide` is set to `false`.
        This method causes the media capture UI to be hidden.
    platforms: [iphone, ipad, android, macos]
    since:
        android: "3.2.0"

  - name: hideMusicLibrary
    summary: Hides the music library.
    description: |
        Must be called after calling [openMusicLibrary](Titanium.Media.openMusicLibrary)
        and only when `autohide` is set to `false`.
    platforms: [iphone, ipad, macos]

  - name: isMediaTypeSupported
    summary: Returns `true` if the source supports the specified media type.
    description: |
        You can query whether a given media type is supported by the device's
        camera (`source` == 'camera') or photo library (`source` == 'photo').

        An additional value, `photogallery` can be  used to query the media
        supported by the device's camera roll or saved image album, which is a
        subset of the iOS photo library. However, when calling
        [openPhotoGallery](Titanium.Media.openPhotoGallery) on iOS, the entire
        library is displayed, and there is currently no way to restrict the
        gallery to show only the camera roll/saved images album.
    returns:
        type: Boolean
    parameters:
      - name: source
        summary: |
            Media source specified as a string: `camera` for Camera or `photo` for Photo Library.
        type: String
      - name: type
        summary: Media type to check.
        type: String
        constants: Titanium.Media.MEDIA_TYPE_*
    platforms: [iphone, ipad, macos]

  - name: openMusicLibrary
    summary: Shows the music library and allows the user to select one or more tracks.
    description: |
        If `autohide` is set to `false`, you must hide the library explicitly using
        [hideMusicLibrary](Titanium.Media.hideMusicLibrary).
    platforms: [iphone, ipad, macos]
    parameters:
      - name: options
        summary: A dictionary of options as described in <MusicLibraryOptionsType>.
        type: MusicLibraryOptionsType

  - name: openPhotoGallery
    summary: Opens the photo gallery image picker.
    description: |
        In iOS 6, Apple introduced the Info.plist key `NSPhotoLibraryUsageDescription` that is used to display an
        own description while authorizing gallery permissions. In iOS 10, this key is mandatory and the application
        will crash if your app does not include the key. Check the [Apple docs](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html)
        for more information.
    platforms: [iphone, ipad, android, macos]
    parameters:
      - name: options
        summary: Photo gallery options as described in <PhotoGalleryOptionsType>.
        type: PhotoGalleryOptionsType

  - name: previewImage
    summary: Displays the given image.
    platforms: [android]
    parameters:
      - name: options
        summary: Dictionary containing the image and callback functions.
        type: Dictionary<PreviewImageOptions>

  - name: saveToPhotoGallery
    summary: Saves media to the device's photo gallery / camera roll.
    description: |
        This operation is asynchronous. The caller can supply callbacks to be triggered when the
        save operation completes.

        Media can be passed as either a `Blob` object or a `File` object. If the `media` argument
        is not one of these types, an error is generated.

        Note that when passing a file (or a blob created from a file), the file name must
        have the appropriate extension for the data--for example, `image.jpg` or `video1.mov` work,
        but `video1.tmp` does not. Currently, the `.mp4` extension is not supported, but MP4
        files may be imported by saving them with the `.mov` extension.

        Make sure to check for gallery access permissions with <Titanium.Media.hasPhotoGalleryPermissions>
        and request the permissions with <Titanium.Media.requestPhotoGalleryPermissions> if not granted.
        On iOS, the `NSPhotoLibraryAddUsageDescription` plist key is required in the tiapp.xml in order
        to use this API.

        On Android, this method does not support saving videos to the gallery prior to Titanium SDK 6.1.0.

    platforms: [iphone, ipad, android, macos]
    parameters:
      - name: media
        summary: Media to save to the camera roll or media gallery.
        type: [Titanium.Blob, Titanium.Filesystem.File]
      - name: callbacks
        summary: |
            Pass a dictionary with the following supported keys: `success` a function that
            will be called when the save succeeds, and `error` a function that will be
            called upon receiving an error.
        type: Object
    since:
        android: "3.3.0"

  - name: setOverrideAudioRoute
    summary: Overrides the default audio route when using the <Titanium.Media.AUDIO_SESSION_CATEGORY_PLAY_AND_RECORD> session mode.
    description: |
        By default, when using the <Titanium.Media.AUDIO_SESSION_CATEGORY_PLAY_AND_RECORD> session mode,
        the audio output is routed to the speaker in the receiver. This method lets you specify
        that audio should be routed to the built-in speaker.

        If you override the audio route while audio is playing the changes won't not take effect until  the audio is restarted.
    platforms: [iphone, ipad, macos]
    parameters:
      - name: route
        summary: The specified audio route.
        type: Number
        constants: Titanium.Media.AUDIO_SESSION_OVERRIDE_ROUTE_*

  - name: showCamera
    summary: Shows the camera.
    description: |
        By default, the native camera controls are displayed. To add your own camera controls,
        you can add an overlay view by setting the `overlay` property on the `options` argument.

        #### Android Platform Notes

        * To suppress the default controls, set `autohide` to `false` and then set the
        `overlay` property to a view that contains a control (such as a button) to
        take the photo. You must then control the camera explicitly, using
        the [takePicture](Titanium.Media.takePicture) and [hideCamera](Titanium.Media.hideCamera)
        methods.
        * Setting `saveToPhotoGallery` to `false` is not guaranteed to work with all camera apps. If this setting is desired, then you should use Titanium's internal camera overlay instead.
        * You can only use one or the other (video or photo) types in the array.

        #### iOS Platform Notes

        To suppress the default controls, set `showControls` and `autohide` to `false`.

        If the `showControls` option is `false`, you must control the camera explicitly, using
        the [takePicture](Titanium.Media.takePicture) and [hideCamera](Titanium.Media.hideCamera)
        methods.

        Images taken with the camera will not have accurate geolocation data embedded in the images;
        the latitude and longitude will be set to '0'.  This is not an error, but a limitation which
        Apple has put on the camera API.

        Important: Use <Titanium.Media.hasCameraPermissions> and <Titanium.Media.requestCameraPermissions>
        to ask for camera permissions. This is especially important when running on iOS 10 and later, since
        the application may crash otherwise.
    platforms: [iphone, ipad, android, macos]
    parameters:
      - name: options
        summary: A dictionary of camera options as described in <CameraOptionsType>.
        type: CameraOptionsType

  - name: hasMusicLibraryPermissions
    summary: Returns `true` if the app has music library access.
    description: |
        Music-library permissions are only needed in iOS 9.3 and later and will be ignored on older
        iOS versions. Because of that, the method will return `true` for devices that run iOS < 9.3.
    returns:
        type: Boolean
    platforms: [iphone, ipad, macos]
    since: "6.0.0"

  - name: requestMusicLibraryPermissions
    summary: Request permissions for the native music-library.
    description: |
        Music-library permissions are only needed in iOS 9.3 and later and will be ignored on older
        iOS versions. Because of that, the callback will ignore the permission-check and always return
        `{success: true}` for devices that run iOS < 9.3.

        Important: On iOS 10, Apple introduced the Info.plist key `NSAppleMusicUsageDescription` that is used to
        display an own description while authorizing the music library. This key is mandatory and the application
        will crash if your app does not include the key. Check the [Apple docs](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html)
        for more information.
    parameters:
      - name: callback
        summary: Function to call indicating if permission was granted or denied.
        type: Callback<RequestMusicLibraryAccessResult>
    platforms: [iphone, ipad, macos]
    since: "6.0.0"
  - name: queryMusicLibrary
    summary: Searches the music library for items matching the specified search predicates.
    description: |
        Use <Titanium.Media.hasMusicLibraryPermissions> to check the granted permissions and
        <Titanium.Media.requestMusicLibraryPermissions> to request the permissions. This is especially important
        when running on an iOS 10 device, because the music-library access will crash without having the privacy-key
        `NSAppleMusicUsageDescription` that is specified in <Titanium.Media.requestMusicLibraryPermissions>.
    platforms: [iphone, ipad, macos]
    parameters:
      - name: query
        summary: The query object to extract information from.
        type: MediaQueryType
    returns:
        type: Array<Titanium.Media.Item>
  - name: startMicrophoneMonitor
    summary: Starts monitoring the microphone sound level.
    platforms: [iphone, ipad, macos]
  - name: stopMicrophoneMonitor
    summary: Stops monitoring the microphone sound level.
    platforms: [iphone, ipad, macos]
  - name: takePicture
    summary: Uses the device camera to capture a photo.
    description: |
        Must be called after calling `showCamera` and only when `autohide` is set to `false`.

        This method causes the media capture device to capture a photo and call the
        `success` callback.
    platforms: [iphone, ipad, android, macos]
  - name: startVideoCapture
    summary: Starts video capture using the camera specified.
    platforms: [android, iphone, ipad, macos]
    since:
        android: 5.4.0
  - name: stopVideoCapture
    summary: Stops video capture using the camera specified.
    platforms: [android, iphone, ipad, macos]
    since:
        android: 5.4.0
  - name: switchCamera
    summary: |
        Switches between front and rear-facing cameras. Make sure to set one of the below constants to determine
        the camera you want to switch to.
    description: |
        In Android, this can only be called when using a custom overlay (see <Titanium.Media.showCamera>).
    platforms: [iphone, ipad, android, macos]
    parameters:
      - name: camera
        summary: Constant indicating to which camera you want to switch.
        type: Number
        constants: [Titanium.Media.CAMERA_FRONT, Titanium.Media.CAMERA_REAR]
    since:
        android: 3.2.0
        iphone: 1.8.1
        ipad: 1.8.1

  - name: hasCameraPermissions
    summary: Returns `true` if the app has camera access.
    returns:
        type: Boolean
    platforms: [iphone, ipad, android, macos]
    since: "5.1.0"

  - name: requestCameraPermissions
    summary: Requests for camera access.
    description: |
        On Android, the request view will show if the permission is not accepted by the user, and the user did
        not check the box "Never ask again" when denying the request. If the user checks the box "Never ask again,"
        the user has to manually enable the permission in device settings.

        This method requests `Manifest.permission.CAMERA`, `Manifest.permission.READ_EXTERNAL_STORAGE` and `Manifest.permission.WRITE_EXTERNAL_STORAGE` on Android.
        If you require other permissions, you can also use <Titanium.Android.requestPermissions>.

        In iOS 6, Apple introduced the Info.plist key `NSCameraUsageDescription` that is used to display an
        own description while authorizing camera permissions. In iOS 10, this key is mandatory when taking a photo
        and the application will crash if your app does not include the key. Check the [Apple docs](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html)
        for more information. When using the camera to take a video, you also need the `NSMicrophoneUsageDescription` key.
        In addition, the authorization dialog will only show if user has not made a decision, yet.
        If the user has, the callback will return the earlier decision. To change the permission the user needs to
        change it in the device settings.
    parameters:
      - name: callback
        summary: |
            Function to call indicating if permission was granted or denied.
            Optional on SDK 10, as this method will return a `Promise`, which may be used to handle the result.
        type: Callback<RequestCameraAccessResult>
        optional: true
    returns:
      summary: On SDK 10+, this method will return a `Promise` whose resolved value is equivalent to that passed to the optional callback argument.
      type: Promise<RequestCameraAccessResult>
    platforms: [iphone, ipad, android, macos]
    since: "5.1.0"
    osver: {ios: {min: "7.0"}}

  - name: hasPhotoGalleryPermissions
    summary: Returns `true` if the app has photo gallery permissions.
    returns:
        type: Boolean
    platforms: [android, iphone, ipad, macos]
    since:
        android: "9.3.0"
        iphone: "6.0.0"
        ipad: "6.0.0"

  - name: requestPhotoGalleryPermissions
    summary: Requests for photo gallery permissions.
    description: |
        In iOS 6, Apple introduced the Info.plist key `NSPhotoLibraryUsageDescription` that is used to display an
        own description while authorizing photo gallery permissions. In iOS 10, this key is mandatory when accessing the
        photo gallery and the application will crash if your app does not include the key. Check the [Apple docs](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html)
        for more information. If the user has, the callback will return the earlier decision. To change the permission the
        user needs to change it in the device settings.

        iOS Apps that do not include this method, will present the system-dialog while the dialog is opened with <Titanium.Media.openPhotoGallery>.
    parameters:
      - name: callback
        summary: |
            Function to call indicating if permission was granted or denied.
            Optional on SDK 10, as this method will return a `Promise`, which may be used to handle the result.
        type: Callback<RequestPhotoGalleryAccessResult>
        optional: true
    returns:
      summary: On SDK 10+, this method will return a `Promise` whose resolved value is equivalent to that passed to the optional callback argument.
      type: Promise<RequestPhotoGalleryAccessResult>
    platforms: [android, iphone, ipad, macos]
    since:
        android: "9.3.0"
        iphone: "6.0.0"
        ipad: "6.0.0"
    osver: {ios: {min: "8.0"}}

  - name: requestCameraAccess
    deprecated:
      since: "5.1.0"
      removed: "9.0.0"
      notes: Please use the [Titanium.Media.requestCameraPermissions](Titanium.Media.requestCameraPermissions) method instead.
    summary: Requests for camera access.
    description: |
       This method allows the app to request for camera access, before or without the user granting
       it in <Titanium.Media.showCamera>. The request view will only show if user has not yet made
       a decision. If he has, the callback will return his earlier decision, and if any changes has
       to be made, the user has to change it in the device settings.
    parameters:
      - name: callback
        summary: Function to call indicating if permission was granted or denied.
        type: Callback<RequestCameraAccessResult>
    platforms: [iphone, ipad]
    since: "4.0.0"
    osver: {ios: {min: "7.0"}}

  - name: takeScreenshot
    summary: Takes a screen shot of the visible UI on the device.
    description: |
       This method is asynchronous. The screenshot is returned in the callback argument.
       The callback argument's `media` property contains the screenshot image as a
       [Blob](Titanium.Blob) object.
    parameters:
      - name: callback
        summary: Function to call upon capture.
        type: Callback<ScreenshotResult>
    platforms: [iphone, ipad, android, macos]

  - name: vibrate
    summary: Makes the device vibrate.
    description: |
        On Android, a `pattern` argument can be provided to specify a
        vibration pattern.

        The `pattern` is an array of Number values.  Each number in the array is
        interpreted as a duration in milliseconds. The first number is the *delay*
        before the pattern starts, and the remaining numbers are interpreted as
        alternating periods of on and off times. For example, the following pattern:

        ``` js
        [ 0, 500, 100, 500, 100, 500 ]
        ```

        Would cause the vibration to start immediately (delay = 0), and perform three
        long vibrations (500 ms) separated by short pauses (100ms).
    parameters:
      - name: pattern
        summary: Array of values identifying a vibrate pattern (only used on Android).
        optional: true
        type: Array<Number>
    platforms: [iphone, ipad, android, macos]

  - name: requestAuthorization
    summary: Request the user's permission for audio recording.
    description: |
        Recording audio requires explicit permission from the user. After the user
        grants or denies permission, the system remembers the choice for future use in the same app.
        If permission is not granted, or if the user has not yet responded to the permission prompt,
        any audio recording sessions record only silence.

        In addition, Apple introduced the Info.plist key `NSMicrophoneUsageDescription` that is used to display an
        own description while authorizing microphone permissions. In iOS 10, this key is mandatory and the application
        will crash if your app does not include the key. Check the [Apple docs](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html)
        for more information.
    platforms: [iphone, ipad]
    deprecated:
        since: "5.1.0"
        removed: "9.0.0"
        notes: Use the [Titanium.Media.requestAudioRecorderPermissions](Titanium.Media.requestAudioRecorderPermissions) method instead.
    since: "3.1.3"
    parameters:
      - name: callback
        summary: Callback function to execute when the users responds to the authorization alert.
        type: Callback<MediaAuthorizationResponse>

  - name: hasAudioPermissions
    summary: Returns `true` if the app has audio permissions.
    description: |
        Recording audio requires explicit permission from the user. After the user
        grants or denies permission, the system remembers the choice for future use in the same app.
        If permission is not granted, or if the user has not yet responded to the permission prompt,
        any audio recording sessions record only silence.

        In addition, Apple introduced the Info.plist key `NSMicrophoneUsageDescription` that is used to display an
        own description while authorizing microphone permissions. In iOS 10, this key is mandatory and the application
        will crash if your app does not include the key. Check the [Apple docs](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html)
        for more information.
    returns:
        type: Boolean
    platforms: [iphone, ipad, macos]
    deprecated:
        since: "6.1.0"
        removed: "10.0.0"
        notes: Use [Titanium.Media.hasAudioRecorderPermissions](Titanium.Media.hasAudioRecorderPermissions) instead.
    since: "6.0.0"

  - name: hasAudioRecorderPermissions
    summary: Returns `true` if the app has audio permissions.
    description: |
        Recording audio requires explicit permission from the user. After the user
        grants or denies permission, the system remembers the choice for future use in the same app.
        If permission is not granted, or if the user has not yet responded to the permission prompt,
        any audio recording sessions record only silence.

        In addition, Apple introduced the Info.plist key `NSMicrophoneUsageDescription` that is used to display an
        own description while authorizing microphone permissions. In iOS 10, this key is mandatory and the application
        will crash if your app does not include the key. Check the [Apple docs](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html)
        for more information.
    returns:
        type: Boolean
    platforms: [android, iphone, ipad, macos]
    since:
        android: "6.2.0"
        iphone: "6.1.0"
        ipad: "6.1.0"

  - name: requestAudioPermissions
    summary: Request the user's permission for audio recording.
    description: |
        Recording audio requires explicit permission from the user. After the user
        grants or denies permission, the system remembers the choice for future use in the same app.
        If permission is not granted, or if the user has not yet responded to the permission prompt,
        any audio recording sessions record only silence.

        In addition, Apple introduced the Info.plist key `NSMicrophoneUsageDescription` that is used to display an
        own description while authorizing microphone permissions. In iOS 10, this key is mandatory and the application
        will crash if your app does not include the key. Check the [Apple docs](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html)
        for more information.
    platforms: [iphone, ipad]
    deprecated:
        since: "6.1.0"
        removed: "9.0.0"
        notes: Use the [Titanium.Media.requestAudioRecorderPermissions](Titanium.Media.requestAudioRecorderPermissions) method instead.
    since: "5.1.0"
    parameters:
      - name: callback
        summary: Callback function to execute when the users responds to the authorization alert.
        type: Callback<MediaAuthorizationResponse>

  - name: requestAudioRecorderPermissions
    summary: Request the user's permission for audio recording.
    description: |
        Recording audio requires explicit permission from the user. After the user
        grants or denies permission, the system remembers the choice for future use in the same app.
        If permission is not granted, or if the user has not yet responded to the permission prompt,
        any audio recording sessions record only silence.

        In addition, Apple introduced the Info.plist key `NSMicrophoneUsageDescription` that is used to display an
        own description while authorizing microphone permissions. In iOS 10, this key is mandatory and the application
        will crash if your app does not include the key. Check the [Apple docs](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html)
        for more information.
    platforms: [android, iphone, ipad, macos]
    since:
        android: "6.2.0"
        iphone: "6.1.0"
        ipad: "6.1.0"
    parameters:
      - name: callback
        summary: |
            Callback function to execute when the users responds to the authorization alert.
            Optional on SDK 10, as this method will return a `Promise`, which may be used to handle the result.
        type: Callback<MediaAuthorizationResponse>
        optional: true
    returns:
      summary: On SDK 10+, this method will return a `Promise` whose resolved value is equivalent to that passed to the optional callback argument.
      type: Promise<MediaAuthorizationResponse>

events:
  - name: cameraready
    summary: Fires when the camera overlay is ready to take pictures.
    platforms: [android]
    since: "6.0.0"

  - name: routechange
    summary: Fired when an audio line type change is detected.
    properties:
      - name: reason
        summary: The reason for route change.
        type: String
      - name: oldRoute
        summary: Returns a description of the old route, consisting of zero or more input ports and zero or more output ports.
        type: RouteDescription
      - name: currentRoute
        summary: Returns a description of the current route, consisting of zero or more input ports and zero or more output ports.
        type: RouteDescription
    since: "3.4.2"
    platforms: [iphone, ipad, macos]

  - name: volume
    summary: Fired when the volume output changes.
    properties:
      - name: volume
        summary: New volume level in dB.
        type: Number
    platforms: [iphone, ipad, macos]

properties:
  - name: AUDIO_FILEFORMAT_3GP2
    summary: Audio file format 3GPP2.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_FILEFORMAT_3GPP
    summary: Audio file format 3GPP.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_FILEFORMAT_AIFF
    summary: Audio file format Audio Interchange File Format (AIFF).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_FILEFORMAT_AMR
    summary: Audio file format Adaptive Multi-Rate (AMR).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_FILEFORMAT_CAF
    summary: Audio file format Apple Compressed Audio Format (CAF).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_FILEFORMAT_MP3
    summary: Audio file format MP3.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_FILEFORMAT_MP4
    summary: Audio file format MP4.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_FILEFORMAT_MP4A
    summary: Audio file format MP4A.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_FILEFORMAT_WAVE
    summary: Audio file format WAVE.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_FORMAT_AAC
    summary: Audio format MPEG4 AAC encoding.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_FORMAT_ALAW
    summary: Audio format 8-bit [aLaw encoding](https://en.wikipedia.org/wiki/A-law_algorithm).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_FORMAT_APPLE_LOSSLESS
    summary: Audio format Apple lossless encoding.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_FORMAT_ILBC
    summary: Audio format [iLBC encoding](https://en.wikipedia.org/wiki/Internet_Low_Bitrate_Codec).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
  - name: AUDIO_FORMAT_IMA4
    summary: Audio format Apple IMA4 encoding.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
  - name: AUDIO_FORMAT_LINEAR_PCM
    summary: Audio format 16-bit, [linear PCM encoding](https://en.wikipedia.org/wiki/Pulse-code_modulation).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_FORMAT_ULAW
    summary: Audio format 8-bit [muLaw encoding](https://en.wikipedia.org/wiki/M-law_algorithm).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_SESSION_CATEGORY_AMBIENT
    summary: For long-duration sounds such as rain, car engine noise, and so on.
    description: |
        Also used for for 'play along' style applications, such a virtual piano that a
        user plays over iPod audio.

        See also: [AUDIO_SESSION_CATEGORY_SOLO_AMBIENT](Titanium.Media.AUDIO_SESSION_CATEGORY_SOLO_AMBIENT).
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_CATEGORY_PLAYBACK
    summary: Session mode for playing recorded music or other sounds that are central to the successful use of your application.
    description: |
        When using this mode, your application audio continues with the Ring/Silent switch set
        to silent or when the screen locks. This property normally disallows mixing iPod audio
        with application audio.
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_CATEGORY_PLAY_AND_RECORD
    summary: Session mode for recording (input) and playback (output) of audio, such as for a VOIP (voice over IP) application.
    description: |
        This category is appropriate for simultaneous recording and playback, and also for
        applications that record and play back but not simultaneously. If you want to ensure
        that sounds such as Messages alerts do not play while your application is recording,
        use  <Titanium.Media.AUDIO_SESSION_CATEGORY_RECORD> instead. This category normally
        disallows mixing iPod audio with application audio.

        In this mode, by default audio playback is routed to the speaker in the iPhone receiver. To have audio playback through the iPhone speaker, use <Titanium.Media.setOverrideAudioRoute>.

    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_CATEGORY_RECORD
    summary: Session mode for recording audio; it silences playback audio.
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_CATEGORY_SOLO_AMBIENT
    summary: Session mode for long-duration sounds such as rain, car engine noise, and so on.
    description: |
        When you use this category, audio from built-in applications, such as the iPod,
        is silenced. Your audio is silenced when the Ring/Silent switch is set to `silent`
        or when the screen locks.

        To use long-duration sounds without silencing built-in applications,
        see [AUDIO_SESSION_CATEGORY_AMBIENT](Titanium.Media.AUDIO_SESSION_CATEGORY_AMBIENT).
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_OVERRIDE_ROUTE_NONE
    summary: Constant that specifies audio should output to the default audio route. See <Titanium.Media.setOverrideAudioRoute> for more information.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_SESSION_OVERRIDE_ROUTE_SPEAKER
    summary: Constant that specifies audio should output to the speaker. See <Titanium.Media.setOverrideAudioRoute> for more information.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: AUDIO_SESSION_PORT_LINEIN
    summary: Constant for line level input on a dock connector. This is an input port.
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_PORT_BUILTINMIC
    summary: Constant for built-in microphone on an iOS device. This is an input port.
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_PORT_HEADSETMIC
    summary: Constant for microphone on a wired headset. This is an input port.
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_PORT_LINEOUT
    summary: Constant for line level output on a dock connector. This is an output port.
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_PORT_HEADPHONES
    summary: Constant for headphone or headset output. This is an output port.
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_PORT_BLUETOOTHA2DP
    summary: Constant for output on a Bluetooth A2DP device. This is an output port.
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_PORT_BUILTINRECEIVER
    summary: Constant for the speaker you hold to your ear when on a phone call. This is an output port.
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_PORT_BUILTINSPEAKER
    summary: Constant for built-in speaker on an iOS device. This is an output port.
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_PORT_HDMI
    summary: Constant for output via High-Definition Multimedia Interface. This is an output port
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_PORT_AIRPLAY
    summary: Constant for output on a remote Air Play device. This is an output port.
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_PORT_BLUETOOTHHFP
    summary: Constant for input or output on a Bluetooth Hands-Free Profile device. This can be both an input and output port.
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_PORT_USBAUDIO
    summary: Constant for input or output on a Universal Serial Bus device. This can be both an input and output port.
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: AUDIO_SESSION_PORT_BLUETOOTHLE
    summary: Constant for output on a Bluetooth Low Energy device. This is an output port. This is available on iOS7 and later.
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"
    osver: {ios: {min: "7.0"}}

  - name: AUDIO_SESSION_PORT_CARAUDIO
    summary: Constant for Input or output via Car Audio. This can be both an input and output port. This is available on iOS7 and later.
    type: String
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "3.4.2"
    osver: {ios: {min: "7.0"}}

  - name: AUDIO_STATE_BUFFERING
    summary: Audio data is being buffered from the network.
    type: Number
    permission: read-only
    since: "7.5.0"

  - name: AUDIO_STATE_INITIALIZED
    summary: Audio playback is being initialized.
    type: Number
    permission: read-only
    since: "7.5.0"

  - name: AUDIO_STATE_PAUSED
    summary: Playback is paused.
    type: Number
    permission: read-only
    since: "7.5.0"

  - name: AUDIO_STATE_PLAYING
    summary: Audio playback is active.
    type: Number
    permission: read-only
    since: "7.5.0"

  - name: AUDIO_STATE_STARTING
    summary: Audio playback is starting.
    type: Number
    permission: read-only
    since: "7.5.0"

  - name: AUDIO_STATE_STOPPED
    summary: Audio playback is stopped.
    type: Number
    permission: read-only
    since: "7.5.0"

  - name: AUDIO_STATE_STOPPING
    summary: Audio playback is stopping.
    type: Number
    permission: read-only
    since: "7.5.0"

  - name: AUDIO_STATE_WAITING_FOR_DATA
    summary: Player is waiting for audio data from the network.
    type: Number
    permission: read-only
    since: "7.5.0"

  - name: AUDIO_STATE_WAITING_FOR_QUEUE
    summary: Player is waiting for audio data to fill the queue.
    type: Number
    permission: read-only
    since: "7.5.0"

  - name: CAMERA_FLASH_AUTO
    summary: Constant specifying to have the device determine to use the flash or not.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since: {android: "3.3.0", iphone: "1.4.0", ipad: "1.4.0" }
  - name: CAMERA_FLASH_OFF
    summary: Constant specifying to never fire the flash.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since: {android: "3.3.0", iphone: "1.4.0", ipad: "1.4.0" }
  - name: CAMERA_FLASH_ON
    summary: Constant specifying to always fire the flash.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since: {android: "3.3.0", iphone: "1.4.0", ipad: "1.4.0" }

  - name: CAMERA_FRONT
    summary: Constant specifying the front camera.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since:
        android: "3.2.0"
  - name: CAMERA_REAR
    summary: Constant indicating the rear camera.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since:
        android: "3.2.0"
  - name: CAMERA_AUTHORIZATION_AUTHORIZED
    summary: Constant specifying that app is authorized to use camera. This is available on iOS7 and later.
    type: Number
    permission: read-only
    exclude-platforms: [android]
    since: "4.0.0"
    osver: {ios: {min: "7.0"}}

  - name: CAMERA_AUTHORIZATION_DENIED
    summary: Constant specifying that app is denied usage of camera. This is available on iOS7 and later.
    type: Number
    permission: read-only
    exclude-platforms: [android]
    since: "4.0.0"
    osver: {ios: {min: "7.0"}}

  - name: CAMERA_AUTHORIZATION_RESTRICTED
    summary: Constant specifying that app is restricted from using camera. This is available on iOS7 and later.
    type: Number
    permission: read-only
    exclude-platforms: [android]
    since: "4.0.0"
    osver: {ios: {min: "7.0"}}

  - name: CAMERA_AUTHORIZATION_UNKNOWN
    summary: Constant specifying that app is not yet authorized to use camera. This is available on iOS7 and later.
    type: Number
    permission: read-only
    exclude-platforms: [android]
    since: "5.2.0"
    osver: {ios: {min: "7.0"}}

  - name: DEVICE_BUSY
    summary: Constant for media device busy error.
    type: Number
    permission: read-only

  - name: MEDIA_TYPE_PHOTO
    summary: Media type constant for photo media.
    type: String
    value: "public.image"
    permission: read-only

  - name: MEDIA_TYPE_LIVEPHOTO
    summary: Media type constant for live photo media.
    type: String
    permission: read-only
    since: "5.2.0"
    value: "com.apple.live-photo"
    exclude-platforms: [android]
    osver: {ios: {min: "9.1"}}

  - name: MEDIA_TYPE_VIDEO
    summary: Media type constant for video media.
    type: String
    value: "public.movie"
    permission: read-only

  - name: MUSIC_MEDIA_TYPE_ALL
    summary: Music library media containing any type of content.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_MEDIA_TYPE_ANY_AUDIO
    summary: Music library media containing any type of audio content.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_MEDIA_TYPE_AUDIOBOOK
    summary: Music library media containing audiobook content.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_MEDIA_TYPE_MUSIC
    summary: Music library media containing music content.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_MEDIA_TYPE_PODCAST
    summary: Music library media containing podcast content.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_MEDIA_GROUP_TITLE
    summary: Constant for grouping query results by title.
    value: 0
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_MEDIA_GROUP_ALBUM
    summary: Constant for grouping query results by album.
    value: 1
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_MEDIA_GROUP_ARTIST
    summary: Constant for grouping query results by artist.
    value: 2
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_MEDIA_GROUP_ALBUM_ARTIST
    summary: Constant for grouping query results by album and artist.
    value: 3
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_MEDIA_GROUP_COMPOSER
    summary: Constant for grouping query results by composer.
    value: 4
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_MEDIA_GROUP_GENRE
    summary: Constant for grouping query results by genre.
    value: 5
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_MEDIA_GROUP_PLAYLIST
    summary: Constant for grouping query results by playlist.
    value: 6
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_MEDIA_GROUP_PODCAST_TITLE
    summary: Constant for grouping query results by podcast title.
    value: 7
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_PLAYER_REPEAT_ALL
    summary: Constant for "Repeat All" setting.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_PLAYER_REPEAT_DEFAULT
    summary: Constant for user's default repeat setting.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_PLAYER_REPEAT_NONE
    summary: Constant for "No Repeat" setting.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_PLAYER_REPEAT_ONE
    summary: Constant for "Repeat one item" setting.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_PLAYER_SHUFFLE_ALBUMS
    summary: Constant for shuffling complete albums setting.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_PLAYER_SHUFFLE_DEFAULT
    summary: Constant for user's default shuffle setting.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_PLAYER_SHUFFLE_NONE
    summary: Constant for "no shuffle" setting.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_PLAYER_SHUFFLE_SONGS
    summary: Constant for shuffling songs setting.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_PLAYER_STATE_INTERRUPTED
    summary: Constant for interrupted state.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_PLAYER_STATE_PAUSED
    summary: Constant for paused state.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_PLAYER_STATE_PLAYING
    summary: Constant for playing state.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_PLAYER_STATE_SEEK_BACKWARD
    summary: Constant for backward seek state.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_PLAYER_STATE_SEEK_FORWARD
    summary: Constant for forward seek state.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: MUSIC_PLAYER_STATE_STOPPED
    summary: Constant for stopped state.
    type: Number
    permission: read-only
    exclude-platforms: [android]

  - name: NO_CAMERA
    summary: Constant for media no camera error.
    type: Number
    permission: read-only

  - name: NO_VIDEO
    summary: Constant for media no video error.
    type: Number
    permission: read-only

  - name: QUALITY_HIGH
    summary: Media type constant for high-quality video recording.
    description: |
        Recorded files are suitable for on-device playback and for wired transfer to the
        Desktop using Image Capture; they are likely to be too large for transfer using Wi-Fi.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since: { iphone: "0.9.0", ipad: "0.9.0", android: "7.5.0" }

  - name: QUALITY_LOW
    summary: Media type constant for low-quality video recording.
    description: |
        Recorded files can usually be transferred over the cellular network.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since: { iphone: "0.9.0", ipad: "0.9.0", android: "7.5.0" }

  - name: QUALITY_MEDIUM
    summary: Media type constant for medium-quality video recording.
    description: |
        Recorded files can usually be transferred using Wi-Fi. This is the default video
        quality setting.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: QUALITY_640x480
    summary: Media type constant for medium-quality video recording.
    description: |
        If recording, specifies that you want to use VGA-quality video recording (pixel dimensions
        of 640x480).
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since: { iphone: "0.9.0", ipad: "0.9.0", android: "7.5.0" }

  - name: QUALITY_IFRAME_1280x720
    summary: Media type constant for medium-quality video recording.
    description: If recording, specifies that you want to use 1280x720 iFrame format.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since: { android: "7.5.0", iphone: "6.0.0", ipad: "6.0.0" }

  - name: QUALITY_IFRAME_960x540
    summary: Media type constant for medium-quality video recording.
    description: If recording, specifies that you want to use 960x540 iFrame format.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]
    since: "6.0.0"

  - name: UNKNOWN_ERROR
    summary: Constant for unknown media error.
    type: Number
    permission: read-only

  - name: VIDEO_CONTROL_DEFAULT
    deprecated:
        since: "7.0.0"
        notes: This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
    summary: Constant for default video controls.
    description: |
        Used in conjunction with the
        [mediaControlStyle](Titanium.Media.VideoPlayer.mediaControlStyle) property
        of [Titanium.Media.VideoPlayer](Titanium.Media.VideoPlayer).

        Removed on iOS in SDK 7.0.0.
    type: Number
    permission: read-only
    platforms: [android]

  - name: VIDEO_CONTROL_EMBEDDED
    deprecated:
        since: "7.0.0"
        notes: This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
    summary: Constant for video controls for an embedded view.
    description: |
        Used in conjunction with the
        [mediaControlStyle](Titanium.Media.VideoPlayer.mediaControlStyle) property
        of [Titanium.Media.VideoPlayer](Titanium.Media.VideoPlayer).

        On Android, this constant has the same effect as VIDEO_CONTROL_DEFAULT. Video controls may
        only be shown or hidden.

        Removed on iOS in SDK 7.0.0.
    type: Number
    permission: read-only
    platforms: [android]

  - name: VIDEO_CONTROL_FULLSCREEN
    deprecated:
        since: "7.0.0"
        notes: This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
    summary: Constant for fullscreen video controls.
    description: |
        Used in conjunction with the
        [mediaControlStyle](Titanium.Media.VideoPlayer.mediaControlStyle) property
        of [Titanium.Media.VideoPlayer](Titanium.Media.VideoPlayer).

        On iOS, use VIDEO_CONTROL_FULLSCREEN when creating a video player that occupies the entire
        screen, that is, the parent window should be a fullscreen window
        ([fullscreen](Titanium.UI.Window.fullscreen) set to `true`) and the video player should
        occupy the entirety of the parent window.

        If the user clicks the **Done** button in the fullscreen control bar, the video player
        pauses playback and generates a [complete](Titanium.Media.VideoPlayer.complete) event.

        Note that if you create a video player that does *not* occupy the entire screen, and later
        switch to fullscreen mode, the video controls are switched automatically. That is, if
        `mediaControlStyle` is set to VIDEO_CONTROL_DEFAULT or VIDEO_CONTROL_EMBEDDED, it is
        automatically switched to the fullscreen controls when the player enters fullscreen mode.
        This is true whether the user initiates the mode switch by clicking the fullscreen button
        in the embedded controls, or if you programmatically switch to full screen mode (by setting
        the `fullscreen` property to true).

        On Android, this constant has the same effect as VIDEO_CONTROL_DEFAULT. Video controls may
        only be shown or hidden.

        Removed on iOS in SDK 7.0.0.
    type: Number
    permission: read-only
    platforms: [android]

  - name: VIDEO_CONTROL_HIDDEN
    deprecated:
        since: "7.0.0"
        notes: This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
    summary: Constant for video controls hidden.
    description: |
        Used in conjunction with the
        [mediaControlStyle](Titanium.Media.VideoPlayer.mediaControlStyle) property
        of <Titanium.Media.VideoPlayer>.

        Removed on iOS in SDK 7.0.0.
    type: Number
    permission: read-only
    platforms: [android]

  - name: VIDEO_CONTROL_NONE
    deprecated:
        since: "7.0.0"
        notes: This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
    summary: Constant for no video controls.
    description: |
        Used in conjunction with the
        [mediaControlStyle](Titanium.Media.VideoPlayer.mediaControlStyle) property
        of <Titanium.Media.VideoPlayer>.

        Removed on iOS in SDK 7.0.0.
    type: Number
    permission: read-only
    platforms: [android]

  - name: VIDEO_FINISH_REASON_PLAYBACK_ENDED
    summary: Video playback ended normally.
    type: Number
    permission: read-only
    platforms: [android]

  - name: VIDEO_FINISH_REASON_PLAYBACK_ERROR
    summary: Video playback ended abnormally.
    type: Number
    permission: read-only
    platforms: [android]

  - name: VIDEO_FINISH_REASON_USER_EXITED
    summary: Video playback ended by user action (such as clicking the `Done` button).
    type: Number
    permission: read-only
    platforms: [android]

  - name: VIDEO_LOAD_STATE_FAILED
    summary: Indicates that the player can no longer play media items because of an error.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: VIDEO_LOAD_STATE_PLAYABLE
    summary: Current media is playable.
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]

  - name: VIDEO_LOAD_STATE_UNKNOWN
    summary: Current load state is not known.
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]

  - name: VIDEO_MEDIA_TYPE_AUDIO
    summary: The media contains audio media.
    type: String
    permission: read-only
    exclude-platforms: [android]

  - name: VIDEO_MEDIA_TYPE_CLOSED_CAPTION
    summary: The media contains closed-caption content.
    type: String
    permission: read-only
    exclude-platforms: [android]

  - name: VIDEO_MEDIA_TYPE_DEPTH_DATA
    summary: The media contains depth data.
    type: String
    permission: read-only
    exclude-platforms: [android]

  - name: VIDEO_MEDIA_TYPE_METADATA
    summary: The media contains metadata.
    type: String
    permission: read-only
    exclude-platforms: [android]

  - name: VIDEO_MEDIA_TYPE_METADATA_OBJECT
    summary: The media contains metadata objects.
    type: String
    permission: read-only
    exclude-platforms: [android]

  - name: VIDEO_MEDIA_TYPE_MUXED
    summary: The media contains muxed media.
    type: String
    permission: read-only
    exclude-platforms: [android]

  - name: VIDEO_MEDIA_TYPE_SUBTITLE
    summary: The media contains subtitles.
    type: String
    permission: read-only
    exclude-platforms: [android]

  - name: VIDEO_MEDIA_TYPE_TEXT
    summary: The media contains text.
    type: String
    permission: read-only
    exclude-platforms: [android]

  - name: VIDEO_MEDIA_TYPE_TIMECODE
    summary: The media contains a time code.
    type: String
    permission: read-only
    exclude-platforms: [android]

  - name: VIDEO_MEDIA_TYPE_VIDEO
    summary: The media contains video.
    type: String
    permission: read-only
    exclude-platforms: [android]

  - name: VIDEO_PLAYBACK_STATE_INTERRUPTED
    summary: Video playback has been interrupted.
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]

  - name: VIDEO_PLAYBACK_STATE_PAUSED
    summary: Video playback is paused.
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]

  - name: VIDEO_PLAYBACK_STATE_PLAYING
    summary: Video is being played.
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]

  - name: VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD
    summary: Video playback is rewinding.
    description: |
        This constant has been removed on iOS in SDK 7.0.0 by using the official Apple AVPlayer that does not expose this functionality so far.
    type: Number
    permission: read-only
    platforms: [android]

  - name: VIDEO_PLAYBACK_STATE_SEEKING_FORWARD
    summary: Video playback is seeking forward.
    description: |
        This constant has been removed on iOS in SDK 7.0.0 by using the official Apple AVPlayer that does not expose this functionality so far.
    type: Number
    permission: read-only
    platforms: [android]

  - name: VIDEO_PLAYBACK_STATE_STOPPED
    summary: Video playback is stopped.
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]

  - name: VIDEO_REPEAT_MODE_NONE
    summary: Constant for disabling repeat on video playback.
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]
    since: {android: "6.2.0", iphone: "0.9.0", ipad: "0.9.0"}

  - name: VIDEO_REPEAT_MODE_ONE
    summary: Constant for repeating one video (i.e., the one video will repeat constantly) during playback.
    type: Number
    permission: read-only
    platforms: [android, iphone, ipad, macos]
    since: {android: "6.2.0", iphone: "0.9.0", ipad: "0.9.0"}

  - name: VIDEO_SCALING_ASPECT_FILL
    deprecated:
        since: "7.0.0"
        notes: |
            Use <Titanium.Media.VIDEO_SCALING_RESIZE_ASPECT_FILL> instead.
            
            This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
    summary: Scale video to fill the screen, clipping edges if necessary.
    description: |
        Video is scaled until the video fills the entire screen. Content at the edges
        of the larger of the two dimensions is clipped so that the other dimension fits the
        screen exactly. The aspect ratio of the movie is preserved.
    type: Number
    permission: read-only
    platforms: [android]

  - name: VIDEO_SCALING_ASPECT_FIT
    deprecated:
        since: "7.0.0"
        notes: |
            Use <Titanium.Media.VIDEO_SCALING_RESIZE_ASPECT> instead.
            
            This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
    platforms: [android]
    summary: Scale video to fit the screen, letterboxing if necessary.
    description: |
        Video is scaled until the larger dimension fits on the screen exactly. In the
        other dimension, the region between the edge of the movie and the edge of the screen
        is filled with a black bar. The aspect ratio of the movie is preserved.

        This constant was removed on iOS in SDK 7.0.0
    type: Number
    permission: read-only

  - name: VIDEO_SCALING_MODE_FILL
    deprecated:
        since: "7.0.0"
        notes: |
            Use <Titanium.Media.VIDEO_SCALING_MODE_RESIZE> instead.
            
            This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
    summary: Video is scaled until both dimensions fit the screen exactly, stretching if necessary.
    description: This constant was removed on iOS in SDK 7.0.0
    type: Number
    permission: read-only
    platforms: [android]

  - name: VIDEO_SCALING_NONE
    deprecated:
        since: "7.0.0"
        notes: This property has been removed for iOS in Titanium SDK 7.0.0 as of the official deprecation by Apple.
    platforms: [android]
    summary: Video scaling is disabled.
    description: This constant was removed on iOS in SDK 7.0.0
    type: Number
    permission: read-only

  - name: VIDEO_SCALING_RESIZE
    summary: Specifies that the video should be stretched to fill the bounds of layer.
    description: This is a `String` on iOS, a `Number` on Android.
    type: [String, Number]
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since: {iphone: "7.0.0", ipad: "7.0.0", android: "8.3.0"}

  - name: VIDEO_SCALING_RESIZE_ASPECT
    summary: Specifies that the player should preserve the aspect ratio of video and fit the video within the bounds of layer.
    description: This is a `String` on iOS, a `Number` on Android.
    type: [String, Number]
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since: {iphone: "7.0.0", ipad: "7.0.0", android: "8.3.0"}

  - name: VIDEO_SCALING_RESIZE_ASPECT_FILL
    summary: Specifies that the player should preserve the aspect ratio of video and fill the bounds of layer.
    description: This is a `String` on iOS, a `Number` on Android.
    type: [String, Number]
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since: {iphone: "7.0.0", ipad: "7.0.0", android: "8.3.0"}

  - name: VIDEO_TIME_OPTION_EXACT
    summary: Use the exact time.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: VIDEO_TIME_OPTION_NEAREST_KEYFRAME
    summary: Use the closest keyframe in the time.
    type: Number
    permission: read-only
    platforms: [iphone, ipad, android, macos]
    since:
        android: "3.6.0"

  - name: VIDEO_TIME_OPTION_CLOSEST_SYNC
    summary: Use the closest sync (or key) frame at given the time.
    type: Number
    permission: read-only
    platforms: [android]
    since:
        android: "3.6.0"

  - name: VIDEO_TIME_OPTION_NEXT_SYNC
    summary: Use the sync (or key) frame located right after or at given the time.
    type: Number
    permission: read-only
    platforms: [android]
    since:
        android: "3.6.0"

  - name: VIDEO_TIME_OPTION_PREVIOUS_SYNC
    summary: Use the sync (or key) frame located right before or at given the time.
    type: Number
    permission: read-only
    platforms: [android]
    since:
        android: "3.6.0"

  - name: appMusicPlayer
    summary: An instance of <Titanium.Media.MusicPlayer> representing the app-specific music player.
    type: Titanium.Media.MusicPlayer
    platforms: [iphone, ipad, macos]
    permission: read-only

  - name: audioPlaying
    summary: Returns `true` if the device is playing audio.
    type: Boolean
    platforms: [iphone, ipad, macos]
    permission: read-only

  - name: audioSessionCategory
    summary: A constant for the audio session category to be used.
    description: |
        Set to one of the `AUDIO_SESSION_CATEGORY` constants defined in <Titanium.Media>.

        Must be set while the audio session is inactive (no sounds are playing, no listeners
        for audio properties on the Media module, but the iPod may be active).
    type: String
    constants: Titanium.Media.AUDIO_SESSION_CATEGORY*
    platforms: [iphone, ipad, macos]
    since: "3.4.2"

  - name: availableCameras
    summary: Array indicating which cameras are available, `CAMERA_FRONT`, `CAMERA_REAR` or both.
    type: Array<Number>
    constants: [Titanium.Media.CAMERA_FRONT, Titanium.Media.CAMERA_REAR]
    platforms: [iphone, ipad, android, macos]
    since:
        android: "3.2.0"
    permission: read-only

  - name: availableCameraMediaTypes
    summary: Array of media type constants supported for the camera.
    type: Array<String>
    constants: Titanium.Media.MEDIA_TYPE_*
    platforms: [iphone, ipad, macos]

  - name: availablePhotoGalleryMediaTypes
    summary: Array of media type constants supported for saving to the device's camera roll or saved images album.
    type: Array<String>
    constants: Titanium.Media.MEDIA_TYPE_*
    platforms: [iphone, ipad, macos]

  - name: availablePhotoMediaTypes
    summary: Array of media type constants supported for the photo library.
    type: Array<String>
    constants: Titanium.Media.MEDIA_TYPE_*
    platforms: [iphone, ipad, macos]

  - name: averageMicrophonePower
    summary: Current average microphone level in dB or -1 if microphone monitoring is disabled.
    description: |
        See [startMicrophoneMonitor](Titanium.Media.startMicrophoneMonitor),
        [stopMicrophoneMonitor](Titanium.Media.stopMicrophoneMonitor).
    type: Number
    platforms: [iphone, ipad, macos]

  - name: cameraFlashMode
    summary: Determines how the flash is fired when using the device's camera.
    type: Number
    constants: Titanium.Media.CAMERA_FLASH_*
    platforms: [android, iphone, ipad, macos]
    since: {android: "3.3.0", iphone: "1.4.0", ipad: "1.4.0"}
    default: <Titanium.Media.CAMERA_FLASH_AUTO> on iOS, <Titanium.Media.CAMERA_FLASH_OFF> on Android

  - name: canRecord
    summary: |
        `true` if the device has a recording input device available.
    type: Boolean
    platforms: [android, iphone, ipad, macos]
    since:
        android: "6.2.0"
    permission: read-only

  - name: currentRoute
    summary: |
        Returns a description of the current route, consisting of zero or more input ports and zero or more output ports.
    type: RouteDescription
    platforms: [iphone, ipad, macos]
    since: "3.4.2"
    permission: read-only

  - name: isCameraSupported
    summary: |
        `true` if the device has camera support.
    type: Boolean
    platforms: [iphone, ipad, android, macos]
    permission: read-only

  - name: cameraAuthorization
    summary: |
        Returns the authorization status for the camera.
    type: Number
    constants: Titanium.Media.CAMERA_AUTHORIZATION_*
    platforms: [iphone, ipad, macos]
    permission: read-only
    since: "5.2.0"
    osver: {ios: {min: "7.0"}}

  - name: peakMicrophonePower
    summary: Current microphone level peak power in dB or -1 if microphone monitoring is disabled.
    description: |
        See [startMicrophoneMonitor](Titanium.Media.startMicrophoneMonitor),
        [stopMicrophoneMonitor](Titanium.Media.stopMicrophoneMonitor).
    type: Number
    platforms: [iphone, ipad, macos]
    permission: read-only

  - name: systemMusicPlayer
    summary: An instance of <Titanium.Media.MusicPlayer> representing the system-wide music player.
    type: Titanium.Media.MusicPlayer
    platforms: [iphone, ipad, macos]
    permission: read-only

  - name: volume
    summary: Current volume of the playback device.
    description: |
        A value in the range `0.0` to `1.0`, with `0.0` representing the minimum volume and `1.0` representing the maximum volume.
    type: Number
    platforms: [iphone, ipad, macos]
    permission: read-only

# Pseudo-type for showMusicLibrary argument

---
name: MusicLibraryOptionsType
summary: Simple object for specifying options to [openMusicLibrary](Titanium.Media.openMusicLibrary).
platforms: [iphone, ipad, macos]
properties:
  - name: success
    summary: Function to call when the music library selection is made.
    type: Callback<MusicLibraryResponseType>
  - name:  error
    summary: Function to call upon receiving an error.
    type: Callback<FailureResponse>
  - name: cancel
    summary: Function to call if the user presses the cancel button.
    type: Callback<FailureResponse>
  - name: autohide
    summary: Specifies that the library should be hidden automatically after media selection is completed.
    type: Boolean
    default: true
  - name: animated
    summary: Boolean if the dialog should be animated when showing and hiding.
    type: Boolean
    default: true
  - name: mediaTypes
    summary: An array of media type constants defining selectable media.
    description: |
        Specify one or more of the `MUSIC_MEDIA_TYPE` constants from <Titanium.Media>. To
        specify multiple types, either pass an array of values, or pass a
        single value that represents the bitwise-OR of the desired media types. For example,
        the following values are equivalent:

        ``` js
        mediaTypes: [Titanium.Media.MUSIC_MEDIA_TYPE_MUSIC, Titanium.Media.MUSIC_MEDIA_TYPE_PODCAST]
        ```

        Or:
        ``` js
        mediaTypes: Titanium.Media.MUSIC_MEDIA_TYPE_MUSIC|Titanium.Media.MUSIC_MEDIA_TYPE_PODCAST
        ```
    type: [Number, Array<Number>]
    constants: Titanium.Media.MUSIC_MEDIA_TYPE_*
    default: All available types.
  - name: allowMultipleSelections
    summary: Set to `true` to allow the user to select multiple items from the library.
    type: Boolean
    default: false

---
name: MusicLibraryResponseType
summary: |
    Simple object passed to the [openMusicLibrary](Titanium.Media.openMusicLibrary)
    `success` callback function.
properties:
  - name: representative
    summary: A single representative of the selected items.
    type: Titanium.Media.Item
  - name: items
    summary: A list of all the items chosen by the user.
    type: Array<Titanium.Media.Item>
  - name: types
    summary: |
        Media types in this collection, represented as the bitwise OR of the media type
        values for all media types represented in `items`.
    type: Number

# Pseudo-type for queryMediaLibrary argument
---
name: MediaQueryType
summary: A specifier for a media library query. By default, filters
    perform an exact match.
platforms: [iphone, ipad, macos]
since: "1.8"
properties:
  - name: grouping
    summary: A constant that specifies the ordering of the result array.
    type: Number
    constants: Titanium.Media.MUSIC_MEDIA_GROUP_*
  - name: mediaType
    summary: The media type to filter on.
    type: [MediaQueryInfoType, Number]
    constants: Titanium.Media.MUSIC_MEDIA_TYPE_*
  - name: title
    summary: The title to filter on. Value should be a String.
    type: [MediaQueryInfoType, String]
  - name: albumTitle
    summary: The album title to filter on. Value should be a String.
    type: [MediaQueryInfoType, String]
  - name: artist
    summary: The artist to filter on. Value should be a String.
    type: [MediaQueryInfoType, String]
  - name: albumArtist
    summary: The album artist to filter on. Value should be a String.
    type: [MediaQueryInfoType, String]
  - name: genre
    summary: The genre to filter on. Value should be a String.
    type: [MediaQueryInfoType, String]
  - name: composer
    summary: The composer to filter on. Value should be a String.
    type: [MediaQueryInfoType, String]
  - name: isCompilation
    summary: |
        Filter by whether or not the item is a compilation.
        The value should be a Boolean.
    type: [MediaQueryInfoType, Boolean]
  - name: playCount
    summary: The play count to filter on. Value should be a Number.
    description: Available in Titanium SDK 6.1.0 and later.
    type: [MediaQueryInfoType, Number]
  - name: persistentID
    summary: The persistent ID to filter on. Value should be a Number.
    description: Available in Titanium SDK 6.1.0 and later.
    type: [MediaQueryInfoType, Number]
  - name: albumPersistentID
    summary: The album persistent ID to filter on. Value should be a Number.
    description: Available in Titanium SDK 6.1.0 and later.
    type: [MediaQueryInfoType, Number]
  - name: albumArtistPersistentID
    summary: The album artist persistent ID to filter on. Value should be a Number.
    description: Available in Titanium SDK 6.1.0 and later.
    type: [MediaQueryInfoType, Number]
  - name: genrePersistentID
    summary: The genre persistent ID to filter on. Value should be a Number.
    description: Available in Titanium SDK 6.1.0 and later.
    type: [MediaQueryInfoType, Number]
  - name: composerPersistentID
    summary: The composer persistent ID to filter on. Value should be a Number.
    description: Available in Titanium SDK 6.1.0 and later.
    type: [MediaQueryInfoType, Number]
  - name: isCloudItem
    summary: |
        Filter by whether or not the item is a cloud item.
        Value should be a Boolean.
    description: Available in Titanium SDK 6.1.0 and later.
    type: [MediaQueryInfoType, Boolean]
  - name: hasProtectedAsset
    summary: |
        Filter by whether or not the item is a protected asset.
        Value should be a Boolean.
    description: Available in Titanium SDK 6.1.0 and later.
    type: [MediaQueryInfoType, Boolean]
  - name: podcastTitle
    summary: The podcast title to filter on. Value should be a String.
    description: Available in Titanium SDK 6.1.0 and later.
    type: [MediaQueryInfoType, String]
  - name: podcastPersistentID
    summary: The podcast persistent ID to filter on. Value should be a Number.
    description: Available in Titanium SDK 6.1.0 and later.
    type: [MediaQueryInfoType, Number]

# Pseudo-type for query arguments

---
name: MediaQueryInfoType
summary: A full query descriptor for a filtering predicate.
platforms: [iphone, ipad, macos]
since: "1.8"
properties:
  - name: value
    summary: The value for the given predicate. See the descriptions
        in <MediaQueryType> for information about which properties
        require which values.
    type: [Number, String, Boolean]
  - name: exact
    summary: Whether or not the predicate is for an exact match.  The
        default is `true`.
    type: Boolean
    default: true

# Camera options pseudo-type
---
name: CameraOptionsType
summary: Simple object for specifying options to [showCamera](Titanium.Media.showCamera).
properties:
  - name: success
    summary: Function to call when the camera is closed after a successful capture/selection.
    type: Callback<CameraMediaItemType>

  - name: error
    summary: Function to call upon receiving an error.
    type: Callback<FailureResponse>

  - name: cancel
    summary: Function to call if the user presses the cancel button.
    type: Callback<FailureResponse>

  - name: androidback
    summary: Function to call if the user presses the back button.
    description: |
        On Android, this property is considered only if `overlay` is also set. If the user presses
        the back button on the phone this callback function will be called. The camera view stays
        open and you will need to call `Ti.Media.hideCamera();` if you want to close it.
    type: Callback<FailureResponse>
    platforms: [android]
    since: {android: "9.0.0"}

  - name: autohide
    summary: Specifies if the camera should be hidden automatically after the media capture is completed.
    type: Boolean
    default: true
    platforms: [iphone, ipad, android, macos]
    since: {android: "3.2.0"}
    description: |
        On Android, this property is considered only if `overlay` is also set. When an
        overlay is not set, the default Android Camera Activity is used, which is only
        capable of reporting back the results of one taken photo, making `autohide`
        meaningless in that context.

  - name: animated
    summary: Specifies if the dialog should be animated upon showing and hiding.
    type: Boolean
    default: true
    platforms: [iphone, ipad, macos]

  - name: saveToPhotoGallery
    summary: Specifies if the media should be saved to the photo gallery upon successful capture.
    type: Boolean
    default: false

  - name: allowEditing
    summary: Specifies if the media should be editable after capture/selection.
    type: Boolean
    platforms: [iphone, ipad, macos]
    default: false

  - name: mediaTypes
    summary: |
        Array of media type constants to allow. Note: If you want to select live photos, iOS only  allows
        you to select existing live photos from the gallery, capturing new live photos is not supported by
        iOS public API, yet.
    constants: [Titanium.Media.MEDIA_TYPE_PHOTO, Titanium.Media.MEDIA_TYPE_LIVEPHOTO, Titanium.Media.MEDIA_TYPE_VIDEO]
    type: Array<String>
    default: Both photo and video allowed.
    platforms: [android, iphone, ipad, macos]
    since:
        android: 5.4.0

  - name: videoMaximumDuration
    summary: Maximum duration (in milliseconds) to allow video capture before completing.
    type: Number
    platforms: [android, iphone, ipad, macos]
    since:
        android: 5.4.0

  - name: videoQuality
    summary: Constant to indicate the video quality during capture.
    type: Number
    platforms: [android, iphone, ipad, macos]
    constants: Titanium.Media.QUALITY_*
    since:
        android: 5.4.0

  - name: whichCamera
    summary: Opens the camera with the specified camera direction.
    type: Number
    constants: [Titanium.Media.CAMERA_FRONT, Titanium.Media.CAMERA_REAR]
    platforms: [android]
    since:
        android: 5.4.0

  - name: showControls
    summary: Indicates if the built-in camera controls should be displayed.
    type: Boolean
    default: true
    platforms: [iphone, ipad, macos]

  - name: overlay
    summary: View to added as an overlay to the camera UI (on top).
    description: |
        On iOS, the overlay view is usually used in conjunction with `showControls: false`.
        The `transform` property can be used to scale and position the camera preview inside
        the overlay view.
    type: Titanium.UI.View
    default: no overlay view

  - name: transform
    summary: Transformation matrix to apply to the camera or photogallery view.
    description: |
        Can be used to size and position the camera or photogallery view behind an overlay view.
        iOS 10 note: There was a [known iOS 10 issue](http://openradar.appspot.com/28232651) caused by Apple
        that breaks the native camera transformation. Apple fixed this issue in the iOS 10.2 release.
    type: Titanium.UI.Matrix2D
    default: identity matrix
    platforms: [iphone, ipad, macos]

  - name: inPopOver
    summary: Show the camera in a popover.
    description: |
        Use `inPopOver: true` on iPad to display the camera view in a popover.
    type: Boolean
    default: false
    platforms: [ipad, macos]

  - name: popoverView
    summary: View to position the camera or photo gallery popover on top of.
    description: |
        This property is only used if the camera is displayed in a
        popover (`inPopOver` is `true`).
    type: Titanium.UI.View
    platforms: [ipad, macos]

  - name: arrowDirection
    summary: Controls the type of arrow and position of the popover.
    description: |
        This property is only used if the camera is displayed in a
        popover (`inPopOver` is `true`).
    type: Number
    constants: Titanium.UI.iPad.POPOVER_ARROW_DIRECTION*
    platforms: [ipad, macos]

  - name: autorotate
    summary: Determines if the camera preview should rotate or not.
    description: |
        Set to `false` to disable rotating the camera preview. The camera preview will remain
        in the same orientation it was opened in.

        Set to `true` to allow the camera preview to rotate when the device rotates.
        Black bars will appear and disappear as the device is rotated.
    type: Boolean
    default: true
    since: "3.4.0"
    platforms: [ipad, macos]

# Photo Gallery options pseudo-type. Much like the camera one.
---
name: PhotoGalleryOptionsType
summary: |
    Simple object for specifying options to
    [openPhotoGallery](Titanium.Media.openPhotoGallery).
properties:
  - name: success
    summary: Function to call when the photo gallery is closed after a successful selection.
    description: |
        If <Titanium.Media.allowMultiple> is `true`, then Callback<CameraMediaMultipleItemsType> will be invoked.
        Otherwise Callback<CameraMediaItemType> will be invoked for single selection.
    type: [Callback<CameraMediaItemType>, Callback<CameraMediaMultipleItemsType>]

  - name: error
    summary: Function to call upon receiving an error.
    type: Callback<FailureResponse>

  - name: cancel
    summary: Function to call if the user presses the cancel button.
    type: Callback<FailureResponse>

  - name: autohide
    summary: |
        Specifies if the photo gallery should be hidden automatically after the media
        selection is completed.
    type: Boolean
    default: true
    platforms: [iphone, ipad, macos]

  - name: animated
    summary: Specifies if the dialog should be animated upon showing and hiding.
    type: Boolean
    default: true
    platforms: [iphone, ipad, macos]

  - name: allowEditing
    summary: Specifies if the media should be editable after capture/selection.
    type: Boolean
    platforms: [iphone, ipad, macos]

  - name: mediaTypes
    summary: |
        Array of media type constants to allow.

        Live photos is only supported on the iOS platform, starting with iOS 9.1. If you want
        to allow live photos with <Titanium.Media.MEDIA_TYPE_LIVEPHOTO>, you also need to specify
        at least <Titanium.Media.MEDIA_TYPE_PHOTO> as a fallback. If you do not allow live
        photos, they still can be selected, but will be represented as a normal static photo.
    type: Array<String>
    constants: Titanium.Media.MEDIA_TYPE_*
    default: Only photo and video allowed.
    platforms: [android, iphone, ipad, macos]
    since: { android: "7.3.0", iphone: "0.8", ipad: "0.8" }

  - name: popoverView
    summary: View to position the photo gallery popover on top of.
    type: Titanium.UI.View
    platforms: [ipad, macos]

  - name: arrowDirection
    summary: Controls the type of arrow and position of the popover.
    type: Number
    constants: Titanium.UI.iPad.POPOVER_ARROW_DIRECTION*
    platforms: [ipad, macos]

  - name: allowMultiple
    summary: Specifies if the user should be able to select multiple photos.
    description: |
        The allowMultiple property is only available on Android API 18 and above.
    type: Boolean
    platforms: [android, iphone, ipad]
    osver: {ios: {min: "14.0"}}
    since: { android: "6.0.0", iphone: "9.2.0", ipad: "9.2.0" }

  - name: selectionLimit
    summary: Specifies number of media item that can be selected.
    description: |
        Setting this property to zero allows you to select maximum number of media supported by system.
        This will work only when <Titanium.Media.allowMultiple> is `true`.
    type: Boolean
    platforms: [iphone, ipad]
    osver: {ios: {min: "14.0"}}
    since: "9.2.0"

  - name: allowTranscoding
    summary: Specifies if the video should be transcoded (using highest quality preset) . If set to false no video transcoding will be performed.
    type: Boolean
    default: true
    platforms: [iphone, ipad, macos]
    since: "8.1.0"
    osver: {ios: {min: "11.0"}}

---
name: CameraMediaMultipleItemsType
summary: A media object from photo gallery when <Titanium.Media.allowMultiple> is `true`.
extends: SuccessResponse
properties:
  - name: images
    summary: |
        The list of selected images.
    type: Array<CameraMediaItemType>
    optional: true

  - name: livePhotos
    summary: |
        The list of selected live photo objects.
    type: Array<Titanium.UI.iOS.LivePhoto>
    platforms: [iphone, ipad]
    optional: true

  - name: videos
    summary: |
        The list of selected videos.
    type: Array<CameraMediaItemType>
    optional: true
---
name: CameraMediaItemType
summary: A media object from the camera or photo gallery.
extends: SuccessResponse
properties:
  - name: media
    summary: The media object, as a [Blob](Titanium.Blob).
    type: Titanium.Blob

  - name: mediaType
    summary: The type of media, either `MEDIA_TYPE_PHOTO`, `MEDIA_TYPE_LIVEPHOTO` or `MEDIA_TYPE_VIDEO` defined in <Titanium.Media>.
    type: String

  - name: cropRect
    summary: Simple object defining the user's selected crop rectangle, or `null` if the user has not edited the photo. `width`/`height` values are assumed to be in pixels.
    type: Dimension
    optional: true

  - name: previewRect
    summary: Simple object defining the preview image size. This will be undefined when custom camera overlay is not used. Values are assumed to be in pixels.
    type: Size
    platforms: [android]

  - name: success
    summary: Indicates if the operation succeeded. Returns `true`.
    description: Returns `true`.
    type: Boolean
    since: "3.1.0"

  - name: error
    summary: Error message, if any returned.
    description: Will be undefined.
    type: String
    since: "3.1.0"

  - name: code
    summary: Error code. Returns 0.
    description: Error code will be 0.
    type: Number
    since: "3.1.0"

  - name: livePhoto
    summary: |
        The live photo object, as a <Titanium.UI.iOS.LivePhoto> and
        `undefined` if no live photo is selected.
    type: Titanium.UI.iOS.LivePhoto
    since: "5.2.0"
    osver: {ios: {min: "9.1"}}

---
name: PreviewImageOptions
summary: Options passed to <Titanium.Media.previewImage>.
platforms: [android]
properties:
  - name: image
    summary: The image to preview. Must be a blob based on a file, such as from <Titanium.Filesystem.File.read>.
    type: Titanium.Blob
    accessors: false

  - name: success
    summary: Function to be called back if the preview succeeds. No info is passed.
    type: Callback<SuccessResponse>
    accessors: false

  - name: error
    summary: Function called back if the preview fails. Check the `message` property of passed back parameter.
    type: Callback<PreviewImageError>
    accessors: false

---
name: PreviewImageError
summary: The parameter passed to the `error` callback of <PreviewImageOptions>.
platforms: [android]
extends: FailureResponse
properties:
  - name: message
    summary: Description of the error.
    type: String
    accessors: false
    deprecated:
        since: "3.1.0"
        removed: "10.0.0"
        notes: Use `error` property instead

  - name: code
    summary: Error code, if applicable.
    type: Number
    constants: [Titanium.Media.DEVICE_BUSY, Titanium.Media.NO_CAMERA, Titanium.Media.UNKNOWN_ERROR]
    accessors: false

  - name: success
    summary: Indicates if the operation succeeded. Returns `false`.
    description: Returns `false`.
    type: Boolean
    since: "3.1.0"

  - name: error
    summary: Error message, if any returned.
    description: May be undefined.
    type: String
    since: "3.1.0"
---
name: ScreenshotResult
summary: The parameter passed to the <Titanium.Media.takeScreenshot> callback.
platforms: [iphone, ipad, android, macos]
properties:
  - name: media
    summary: The screenshot image.
    type: Titanium.Blob
    accessors: false
---
name: MediaAuthorizationResponse
summary: Argument passed to the callback when a request finishes successfully or erroneously.
extends: ErrorResponse
---
name: RequestCameraAccessResult
summary: Argument passed to the callback when a request finishes successfully or erroneously.
extends: ErrorResponse
---
name: RequestMusicLibraryAccessResult
summary: Argument passed to the callback when a request finishes successfully or erroneously.
extends: ErrorResponse
---
name: RequestPhotoGalleryAccessResult
summary: Argument passed to the callback when a request finishes successfully or erroneously.
extends: ErrorResponse
---
name: RouteDescription
summary: An Object describing the current audio route.
platforms: [iphone, ipad, macos]
since: "3.4.2"
properties:
  - name: inputs
    summary: An Array of current input ports for the session. See the `AUDIO_SESSION_PORT` constants.
    type: Array<String>
    constants: Titanium.Media.AUDIO_SESSION_PORT_*
  - name: outputs
    summary: An Array of current output ports for the session. See the `AUDIO_SESSION_PORT` constants.
    type: Array<String>
    constants: Titanium.Media.AUDIO_SESSION_PORT_*
