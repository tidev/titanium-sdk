---
name: Titanium
summary: The top-level Titanium module.
description: |
    The Titanium module provides the Titanium Mobile API, allowing developers to access native
    features of each target environment. Currently, the Android and iOSenvironments are supported.

    #### Titanium Namespace

    The complete Titanium API is accessible from the `Titanium` namespace but, for convenience and
    brevity, the alias `Ti` is also provided. As the `Titanium` namespace is functionally-identical
    to its `Ti` alias, it is always recommended to use `Ti` in your code.

    For example, the following pairs of Titanium calls behave exactly the same.

    ``` js
    Titanium.API.info('Hello Titanium!');
    Ti.API.info('Hello Titanium!');

    Titanium.Utils.sha256('Hello Titanium!');
    Ti.Utils.sha256('Hello Titanium!');

    Titanium.App.Properties.setString('hello_msg','Hello Titanium!');
    Ti.App.Properties.setString('hello_msg','Hello Titanium!');

    Titanium.Database.open('mydb');
    Ti.Database.open('mydb');
    ```

    #### Global APIs

    Titanium includes a number of built-in JavaScript objects that are not part of the Titanium
    namespace, including String formatting, timers, and the CommonJS `require` function.
    See [Global APIs](Global) for details.

since: "0.1"
extends: Titanium.Module

properties:
  - name: userAgent

    type: String
    summary: User-agent string used by Titanium.
  - name: version
    type: String
    summary: Version of Titanium that is executing.
    permission: read-only
  - name: buildDate

    type: String
    summary: Date of the Titanium build.
    permission: read-only
  - name: buildHash

    type: String
    summary: Git hash of the Titanium build.
    permission: read-only
methods:
  - name: createBuffer
    summary: Creates a new buffer based on the params.
    parameters:
      - name: params
        summary: creation arguments
        type: CreateBufferArgs
    returns:
        type: Titanium.Buffer
        summary: The new buffer.
    platforms: [android, iphone, ipad, macos]
    examples:
      - title: Create a buffer with 1K bytes
        example: |
            ``` js
            var buffer = Ti.createBuffer({ length: 1024 });
            ```
      - title: Create a buffer with string
        example: |
            Create a buffer with the string "hello world" encoded in UTF-8
            ``` js
            var buffer = Ti.createBuffer({ value: "hello world" });
            ```
      - title: Create a buffer with encoded float
        example: |
            Create a buffer with the encoded value of the double-precision floating point
            number 1.234567 in Big Endian (network) byte order
            ``` js
            var buffer = Ti.createBuffer({ value: 1.234567, type: Ti.Codec.TYPE_DOUBLE, byteOrder: Ti.Codec.BIG_ENDIAN });
            ```

---
name: CreateBufferArgs
summary: Arguments to be passed to createBuffer
since: {android: "1.7", iphone: "1.7", ipad: "1.7", macos: "9.2.0"}
platforms: [android, iphone, ipad, macos]

properties:
  - name: value
    type: [String, Number]
    summary: An initial value which will be encoded and placed in the buffer. If value is a Number, type must also be set. (this is simply a convenient way of calling <Titanium.Codec.encodeString> or <Titanium.Codec.encodeNumber> and placing the encoded value in the returned buffer.)
    optional: true
  - name: length
    type: Number
    summary: The length of the buffer.
    optional: true
    default: 0, unless `value` is specified, in which case the length of the encoded data is used.
  - name: type
    type: String
    summary: The type of data encoding to use with `value`.
    optional: true
    default: <Titanium.Codec.CHARSET_UTF8> if `value` is a String, If `value` is a Number, this argument is required
  - name: byteOrder
    type: Number
    summary: The byte order of this buffer.
    optional: true
    default: The OS native byte order is used by default. See <Titanium.Codec.getNativeByteOrder>
