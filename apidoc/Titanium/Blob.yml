---
name: Titanium.Blob
summary: A container for binary data.
description: |
    A `Blob` represents a chunk of binary information, often obtained through
    an [HTTPClient](Titanium.Network.HTTPClient) or by reading a [File](Titanium.Filesystem.File).

    Blobs are often used to store text or image data.
    The `Blob` object includes a number of properties and methods specific to image blobs.

    Android supports an [append](Titanium.Blob.append) method, but
    otherwise blobs are immutable.

    The <Titanium.Utils> module provides several utility methods for working with
    blobs, including methods for converting between blobs and Base64-encoded strings,
    and methods for generating SHA-1 and SHA-256 hashes and MD5 digests from blob data.

    The [Buffer](Titanium.Buffer) object can also contain binary data, and is
    more easily mutable. Extracting blob data to a buffer is somewhat roundabout:

    ``` js
    var blobStream = Ti.Stream.createStream({ source: myBlob, mode: Ti.Stream.MODE_READ });
    var newBuffer = Ti.createBuffer({ length: myBlob.length });
    var bytes = blobStream.read(newBuffer);
    ```

    Creating a blob from a buffer is much easier:
    ``` js
    var newBlob = myBuffer.toBlob();
    ```

    In both cases, the conversion involves copying the data from one object to another, so
    you should be conscious of the amount of the data being copied.
extends: Titanium.Proxy
platforms: [android, iphone, ipad, macos]
since: {iphone: "0.9", ipad: "0.9", android: "0.9", macos: "9.2.0"}
createable: false
properties:
  - name: file
    type: Titanium.Filesystem.File
    summary: |
        File object represented by this blob, or `null` if this blob is not
        associated with a file.
    permission: read-only

  - name: length
    type: Number
    summary: Length of this blob in bytes.
    permission: read-only

  - name: text
    type: String
    summary: UTF-8 string representation of the data in this blob.
    description: |
        If this blob represents pure binary data, the value will be `null`.
    permission: read-only

  - name: mimeType
    type: String
    summary: Mime type of the data in this blob.
    permission: read-only

  - name: height
    type: Number
    summary: If this blob represents an image, this is the height of the image in pixels.
    description: |
        If this blob doesn't represent an image, `height` is reported as 0.

        **NOTE 1**: On SDK versions prior to 9.1.0, Ti.Blob images may have reported in points, not pixels.
        This would occur for images with a higher density/scale returned by <Titanium.UI.View.toImage> or images with `@dx` density suffixes.
        You may multiply by <Titanium.Platform.DisplayCaps.logicalDensityFactor> to try and determine the pixels, but this value may be off for some pixel/density combinations.
        (i.e. a `10px` image would report as `3` on a `3x` density screen, so multiplying would give you `9` pixels, which is still incorrect)

        **NOTE 2**: This represents the height the platform decodes the image to in memory. iOS will automatically
        rotate a JPEG based on its EXIF orientation when loaded into memory, but Android does not and instead
        rotates it when shown on-screen. You can read the [uprightHeight](Titanium.Blob.uprightHeight) to determine
        what the image height will be after rotation, if applicable.
    permission: read-only

  - name: uprightHeight
    type: Number
    summary: If the blob references an image, this provides the height in pixels after factoring in EXIF orientation.
    description: |
        The height of the image in pixels after rotating/flipping it based on its EXIF orientation,
        which is commonly the case with JPEGs. Will return the save value as the [height](Titanium.Blob.height)
        property if image does not have an EXIF orientation or if the orientation is already upright.

        On iOS, properties [height](Titanium.Blob.height) and [uprightHeight](Titanium.Blob.uprightHeight) will always match.
        On Android, these properties may differ when loading a JPEG since this platform does not automatically
        rotate the loaded image in memory, but it is rotated when displaying it on-screen.
    since: "9.2.0"
    permission: read-only

  - name: width
    type: Number
    summary: If this blob represents an image, this is the width of the image in pixels.
    description: |
        If this blob doesn't represent an image, `width` is reported as 0.

        **NOTE 1**: On SDK versions prior to 9.1.0, Ti.Blob images may have reported in points, not pixels.
        This would occur for images with a higher density/scale returned by <Titanium.UI.View.toImage> or images with `@dx` density suffixes.
        You may multiply by <Titanium.Platform.DisplayCaps.logicalDensityFactor> to try and determine the pixels, but this value may be off for some pixel/density combinations.
        (i.e. a `10px` image would report as `3` on a `3x` density screen, so multiplying would give you `9` pixels, which is still incorrect)

        **NOTE 2**: This represents the width the platform decodes the image to in memory. iOS will automatically
        rotate a JPEG based on its EXIF orientation when loaded into memory, but Android does not and instead
        rotates it when shown on-screen. You can read the [uprightWidth](Titanium.Blob.uprightWidth) to determine
        what the image width will be after rotation, if applicable.
    permission: read-only

  - name: uprightWidth
    type: Number
    summary: If the blob references an image, this provides the width in pixels after factoring in EXIF orientation.
    description: |
        The width of the image in pixels after rotating/flipping it based on its EXIF orientation,
        which is commonly the case with JPEGs. Will return the save value as the [width](Titanium.Blob.width)
        property if image does not have an EXIF orientation or if the orientation is already upright.

        On iOS, properties [width](Titanium.Blob.width) and [uprightWidth](Titanium.Blob.uprightWidth) will always match.
        On Android, these properties may differ when loading a JPEG since this platform does not automatically
        rotate the loaded image in memory, but it is rotated when displaying it on-screen.
    since: "9.2.0"
    permission: read-only

  - name: nativePath
    type: String
    summary: |
        If this blob represents a [File](Titanium.Filesystem.File), this is the file URL
        that represents it.
    description: |
        If this blob doesn't represent a file, the value of `nativePath` is `null`.
    permission: read-only

  - name: size
    type: Number
    summary: |
        Size of the blob in pixels (for image blobs) or bytes (for all other blobs).
    description: |
        If this blob represents an image, this is the total number of pixels in the image.
        Otherwise it returns the number of bytes in the binary data.
    platforms: [android, iphone, ipad, macos]
    since: {android: "7.2.0", iphone: "0.9.0", ipad: "0.9.0", macos: "9.2.0"}
    permission: read-only

methods:
  - name: toString
    returns:
        type: String
    summary: Returns a string representation of this blob.

  - name: append
    summary: Appends the data from another blob to this blob.
    platforms: [android]
    parameters:
      - name: blob
        type: Titanium.Blob
        summary: Blob to append to this blob.

  - name: imageAsCropped
    summary: Creates a new blob by cropping the underlying image to the specified dimensions.
    description: |
        Returns the cropped image as a blob.

        If this blob doesn't represent an image, returns `null`.
    platforms: [android, iphone, ipad, macos]
    since: {android: "3.0.0", macos: "9.2.0"}
    parameters:
      - name: options
        summary: |
          Image cropping options. <Dimension> properties are all optional for this use case.

          Defaults will be to use the current image's `height`/`width` and to center the cropped rectangle horizontally/vertically on the original image (`x`/`y`).
        type: Dimension
    returns:
        type: Titanium.Blob
        summary: Cropped image as a blob.

  - name: imageAsResized
    summary: Creates a new blob by resizing and scaling the underlying image to the specified dimensions.
    description: |
        Returns the resized image as a blob.

        If this blob doesn't represent an image, returns `null`.
    platforms: [android, iphone, ipad, macos]
    since: {android: "3.0.0", macos: "9.2.0"}
    parameters:
      - name: width
        type: Number
        summary: Width to resize this image to.
      - name: height
        type: Number
        summary: Height to resize this image to.
    returns:
        type: Titanium.Blob
        summary: Resized image as a blob.

  - name: imageAsCompressed
    summary: Creates a new blob by compressing the underlying image to the specified quality.
    description: |
        Returns the compressed image as a blob.

        If this blob doesn't represent an image, returns `null`.
    platforms: [android, iphone, ipad, macos]
    since: {iphone: "6.1.0", ipad: "6.1.0", android: "6.1.0", macos: "9.2.0"}
    parameters:
      - name: quality
        type: Number
        summary: Quality to compress this image to. From 0.0 (lowest quality) to 1.0 (highest quality).
    returns:
        type: Titanium.Blob
        summary: Compressed image as a blob.

  - name: imageAsThumbnail
    summary: Returns a thumbnail version of the underlying image, optionally with a border and rounded corners.
    description: |
        Returns the thumbnail image as a blob.

        If this blob doesn't represent an image, returns `null`.

        The final height/width of the image will actually be `size + (2 * borderSize)` as the border is added around the image.
        By default the `borderSize` is `1`.
    platforms: [android, iphone, ipad, macos]
    since: {android: "3.0.0", macos: "9.2.0"}
    returns:
        type: Titanium.Blob
        summary: The image thumbnail in a blob.
    parameters:
      - name: size
        type: Number
        summary: Size of the thumbnail, in either width or height.

      - name: borderSize
        type: Number
        summary: Width of the thumbnail's border.
        optional: true
        default: 1

      - name: cornerRadius
        type: Number
        summary: Radius of the thumbnail's corners.
        optional: true
        default: 0

  - name: imageWithAlpha
    summary: Returns a copy of the underlying image with an added alpha channel.
    description: |
        Returns the new image as a blob, or `null` if this blob is not an image.
    platforms: [android, iphone, ipad, macos]
    since: {android: "3.0.0", macos: "9.2.0"}
    returns:
        type: Titanium.Blob
        summary: The image with an alpha channel in a blob, or `null` if this blob is not an image.

  - name: imageWithRoundedCorner
    summary: Returns a copy of the underlying image with rounded corners added.
    description: |
        Returns the new image as a blob, or `null` if this blob is not an image.
        The image will grow in height and width by `(2 * borderSize)` as the border is added around the image to avoid scaling.
        By default the `borderSize` is `1`.
    platforms: [android, iphone, ipad, macos]
    since: {android: "3.0.0", macos: "9.2.0"}
    parameters:
      - name: cornerSize
        type: Number
        summary: Size of the rounded corners in pixels.
      - name: borderSize
        type: Number
        summary: Width of the border in pixels.
        optional: true
        default: 1
    returns:
        type: Titanium.Blob
        summary: Image with a rounded corner in a blob, or `null` if this blob is not an image.

  - name: imageWithTransparentBorder
    summary: Returns a copy of the underlying image with an added transparent border.
    description: |
        Returns the new image as a blob, or `null` if this blob is not an image.
        The image will grow in height and width by `(2 * borderSize)` as the border is added around the image to avoid scaling.
    platforms: [android, iphone, ipad, macos]
    since: {android: "3.0.0", macos: "9.2.0"}
    parameters:
      - name: size
        type: Number
        summary: Width of the transparent border in pixels.
    returns:
        type: Titanium.Blob
        summary: The image with a transparent border in a blob, or `null` if this blob is not an image.

  - name: toArrayBuffer
    returns:
        type: ArrayBuffer
    summary: Returns an `ArrayBuffer` representation of this blob.

  - name: arrayBuffer
    returns:
        type: Promise<ArrayBuffer>
    summary: Returns a `Promise` that resolves with the contents of the blob as binary data contained in an `ArrayBuffer`.
