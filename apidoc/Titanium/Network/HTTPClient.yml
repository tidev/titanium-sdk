---
name: Titanium.Network.HTTPClient
summary: HTTP client object that (mostly) implements the XMLHttpRequest specification.
description: |
    Use <Titanium.Network.createHTTPClient> to create a new `HTTPClient` object.

    An `HTTPClient` object is intended to be used for a single request. It may be
    possible to re-use an `HTTPClient` object, but this use case is not tested.

    There are three steps in making a typical HTTP request:

    * Creating an `HTTPClient` object.
    * Opening the `HTTPClient` object.
    * Sending the request.

    Before opening the request, you must define one or more callbacks to handle
    the HTTP response, as well as errors, progress updates, and other conditions.

    The `HTTPClient` callbacks operate somewhat differently from other
    Titanium callbacks, in accordance with the XMLHttpRequest specification.

    When the callbacks are invoked, the `this` value is set to either the
    original `HTTPClient` object itself, or a response object that holds all
    of the response-related properties defined for the `HTTPClient` object. So the
    callbacks can use code like this to access the response values:

    ``` js
    httpResponse = this.responseText;
    status = this.status;
    ```

    #### Content-Type Header

    When sending a POST request with the HTTP client, the Content-Type header is set automatically
    depending on the platform and data type sent.

    On the Android and iOS platforms:

      * If you are sending a JavaScript object, the content type is set to `multipart/form-data`.
      * For all other data types on Android, the content type is set to `application/x-www-form-urlencoded`.
      * For all other data types on iOS, the content type is **NOT** set.

    Use the [setRequestHeader](Titanium.Network.HTTPClient.setRequestHeader) method to override the
    default Content-Type header.

    #### Asynchronous vs. Synchronous HTTP Requests

    By default, the `HTTPClient` makes asynchronous requests.  Asynchronous requests do not block
    the application and use callbacks to process responses when they are received.

    Synchronous requests block the execution of the application until it receives a response.
    On the iOS platform,  you can make synchronous requests by setting the optional
    `async` parameter to `false` when calling the [open](Titanium.Network.HTTPClient.open) method.

    The Android platform does not support synchronous requests.

    #### TLS Support

    Transport Layer Security (TLS) is a protocol that ensures privacy between communicating applications
    and their users on the Internet. When a server and client communicate, TLS ensures that no third
    party may eavesdrop or tamper with any message. TLS is the successor to the Secure Sockets Layer (SSL).

    To communicate to servers with the TLS protocol, you need to use the same TLS version between
    the client and server.

    <table class="doc-table" summary="This table provides information about TLS versions.">
      <caption><b>TLS versions by platform</b></caption>
      <thead>
        <tr>
          <th>Protocol</th>
          <th>Android</th>
          <th>iOS</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th align="left">TLS 1.0</th>
          <td>1.0+</td>
          <td>1.0+</td>
        </tr>
        <tr>
          <th align="left">TLS 1.1</th>
          <td>4.1+</td>
          <td>5.0+</td>
        </tr>
        <tr>
          <th align="left">TLS 1.2</th>
          <td>4.1+</td>
          <td>5.0+</td>
        </tr>
        <tr>
          <th align="left">TLS 1.3</th>
          <td>10.0+</td>
          <td>12.2+</td>
        </tr>
      </tbody>
    </table>

    In Titanium, if a connection with TLS 1.2 fails, Titanium will re-attempt the connection with
    TLS 1.1 and TLS 1.0. By default, TLS 1.2 is attempted first.

    On Android, use the <Titanium.Network.HTTPClient.tlsVersion> property to set the version of the TLS protocol
    if you know the version the server is running.  If you do not know, do not set this property.

    On iOS, add the `NSExceptionMinimumTLSVersion` key in the `<plist>` section of `tiapp.xml` to set a minimum TLS version. 
    See following example:

    ```
    <key>NSAppTransportSecurity</key>
    <dict>
      <key>NSExceptionDomains</key>
      <dict>
        <key>www.appcelerator.com</key>
        <dict>
          <key>NSExceptionMinimumTLSVersion</key>
          <string>TLSv1.3</string>
        </dict>
      </dict>
    </dict>
    ```  
    Titanium will not fallback with a lower TLS version if the `tlsVersion` property in android or `NSExceptionMinimumTLSVersion` in iOS, is set.
    Setting the TLS version saves time from re-attempting connections with lower TLS versions and
    provides added security by denying attempts to use lower TLS versions.

    #### Caching Data

    You can also use the HTTP client API to cache image, response data or related. A convenient
    way to do so is by setting the <Titanium.Network.HTTPClient.file> property to a path or target
    file, which will be populated with the response data in a successful case (e.g. in the `onload`
    callback). For more complex use cases, make sure to check [To.ImageCache](https://github.com/Topener/To.ImageCache/)
    which also supports expire-handling and extended cache control.

    #### Android Platform Implementation Notes

    On Android, the `HTTPClient` uses its own cookie store which does not share cookies with the
    system cookie store used by <Titanium.UI.WebView>. Developers can manage their cookies for both
    cookie stores using the methods <Titanium.Network.addHTTPCookie>, <Titanium.Network.addSystemCookie>,
    <Titanium.Network.getHTTPCookies>, <Titanium.Network.getHTTPCookiesForDomain>, <Titanium.Network.getSystemCookies>,
    <Titanium.Network.removeHTTPCookie>, <Titanium.Network.removeHTTPCookiesForDomain>, <Titanium.Network.removeAllHTTPCookies>,
    <Titanium.Network.removeSystemCookie>, <Titanium.Network.removeAllSystemCookies>.

    #### Connect to local network in iOS

    On iOS 14 and later, while connecting to local network a prompt will be shown to request user's permission.
    Add key `NSLocalNetworkUsageDescription` to the `ios plist` section of the tiapp.xml file to show the message on prompt.
    If this key is not added default message will be shown in prompt.
    
    Example:

    ``` xml
    <ti:app>
      <!-- ... -->
      <ios>
        <plist>
          <dict>
            <!-- Reason to access local network-->
            <key>NSLocalNetworkUsageDescription</key>
            <string>
                Specify the reason for accessing the local network.
                This appears in the alert dialog when asking the user 
                for permission to access local network.
            </string>
          </dict>
        </plist>
      </ios>
      <!-- ... -->
    </ti:app>
    ```
extends: Titanium.Proxy
since: "0.1"

methods:
  - name: abort
    summary: Cancels a pending request.

  - name: clearCookies
    summary: Clears any cookies stored for the host.
    parameters:
      - name: host
        summary: The URL of the host/domain to clear cookies for.
        type: String
    platforms: [android, iphone, ipad, macos]

  - name: getAllResponseHeaders
    summary: All of the response headers.
    description: |
        Contains a single string, or an empty string if no headers are available.

        See also: [getResponseHeader](Titanium.Network.HTTPClient.getResponseHeader).

        Intended to match the `XMLHTTPRequest` [getAllResponseHeaders API](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders).
    returns:
        type: String
    since: {iphone: "10.0.0", ipad: "10.0.0", macos: "10.0.0", android: "0.8"}

  - name: getResponseHeader
    summary: Returns the value of the specified response header.
    returns:
        type: String
    parameters:
      - name: name
        summary: Name of the header to retrieve.
        type: String

  - name: open
    summary: Opens the request and prepares the connection.
    parameters:
      - name: method
        summary: HTTP method for this request, such as 'GET' or 'POST'. 'PATCH' is available on Android from SDK 4.1.0.
        type: String

      - name: url
        summary: URL for the request.
        type: String

      - name: async
        summary: Determines whether the request should be made asynchronously. Only used on iOS.
        type: Boolean
        optional: true
        default: true

  - name: send
    summary: Sends the request.
    description: |
        For POST requests, use the `data` parameter to send POST data.

        If you pass a serializable JavaScript object, it is automatically turned into form-encoded
        POST data. You can also send an arbitrary string or binary data (in the form of a
        <Titanium.Blob>).

        To send array data, specify each array element individually as a property of the object.
        For example, normally, you specify an array in an object as:

        ``` js
        var payload = { myArray: [1, 2, 3] };
        ```

        Instead, for the HTTP client to encode the data correctly, you need to send the data as:

        ``` js
        var payload = {
            "myArray[0]" : 1,
            "myArray[1]" : 2,
            "myArray[2]" : 3
        };
        ```

        On iOS, you can specify a synchronous request when you call `open` by passing `false` for
        the `async` parameter. In the case of a synchronous request, `send` blocks until the request
        is complete.
    parameters:
      - name: data
        summary: Data to send with a POST request.
        type: [Object, String, Titanium.Filesystem.File, Titanium.Blob]
        optional: true
        default: no data

  - name: setRequestHeader
    summary: |
        Sets the value for the specified request header. Must be called after `open` but before `send`.
    parameters:
      - name: name
        summary: Name of the header to set.
        type: String

      - name: value
        summary: |
            Value to assign to the header. May be `null` to clear a default header value, such as
            X-Requested-With.
        type: String

  - name: setTimeout
    summary: Sets the request timeout.
    parameters:
      - name: timeout
        summary: Timeout in milliseconds.
        type: Number
    deprecated:
      since: "10.0.0"
      removed: "10.0.0"
      notes: Use the <Titanium.Network.HTTPClient.timeout> property instead.


properties:
  - name: DONE
    summary: Ready state constant indicating that the request is complete.
    description: |
        In this ready state, either the data has been transferred, or an error has occured.

        See also [readyState](Titanium.Network.HTTPClient.readyState).
    type: Number
    permission: read-only

  - name: HEADERS_RECEIVED
    summary: Ready state constant indicating that response headers have been received.
    description: See also [readyState](Titanium.Network.HTTPClient.readyState).
    type: Number
    permission: read-only

  - name: LOADING
    summary: |
        Ready state constant indicating that response data is being received from the remote server.
    description: See also [readyState](Titanium.Network.HTTPClient.readyState).
    type: Number
    permission: read-only

  - name: OPENED
    summary: |
        Ready state constant indicating that the connection has been opened, but the request has
        not yet been sent.
    description: See also [readyState](Titanium.Network.HTTPClient.readyState).
    type: Number
    permission: read-only

  - name: UNSENT
    summary: Ready state constant indicating that HTTPClient request has not been opened or sent.
    description: See also [readyState](Titanium.Network.HTTPClient.readyState).
    type: Number
    permission: read-only

  - name: allResponseHeaders
    summary: All of the response headers.
    description: |
        Contains a single string, or an empty string if no headers are available.

        See also: [getResponseHeader](Titanium.Network.HTTPClient.getResponseHeader).
    type: String
    permission: read-only
    platforms: [android]

  - name: responseHeaders
    summary: Returns all the response headers returned with the request.
    description: |
        Contains a dictionary of response headers only after the http call has finished.

        See also: [getResponseHeader](Titanium.Network.HTTPClient.getResponseHeader).
    type: Dictionary
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: autoEncodeUrl
    summary: Determines whether automatic encoding is enabled for the specified URL.
    description: Set to `false` to disable automatic URL-encoding.
    type: Boolean
    default: true
    platforms: [android]

  - name: autoRedirect
    summary: Determines whether automatic automatic handling of HTTP redirects is enabled.
    description: Set to `false` to disable automatic HTTP redirects handling.
    type: Boolean
    default: true
    platforms: [android, iphone, ipad, macos]

  - name: connected
    summary: Indicates whether the response was successful.
    type: Boolean
    permission: read-only

  - name: connectionType
    summary: Connection type, normally either `GET`, `POST` or `PATCH`.
    type: String
    permission: read-only

  - name: domain
    summary: Sets the domain parameter for authentication credentials.
    description: |
        Set this parameter when authentication against NTLM domains along with the [username](Titanium.Network.HTTPClient.username)
        and [password](Titanium.Network.HTTPClient.password) properties.
        iOS supports NTLM authentication natively.
        Android can be extended using the [addAuthFactory](Titanium.Network.HTTPClient.addAuthFactory) method.
        Must be set before calling [open](Titanium.Network.HTTPClient.open).
    type: String
    default: Undefined
    platforms: [android, iphone, ipad, macos]
    since: "3.0.0"

  - name: enableKeepAlive
    summary: Determines whether the client should attempt to keep a persistent connection.
    description: Set to `true` to maintain a persistent connection.
    type: Boolean
    default: false
    platforms: [iphone, ipad, macos]

  - name: file
    summary: Target local file or file path to receive data.
    description: |
        This property can be set anytime prior to calling [send](Titanium.Network.HTTPClient.send).
        The file must be writable such as the application data directory or temp directory.
    type: [String, Titanium.Filesystem.File]
    platforms: [android, iphone, ipad, macos]
    since: {android: 3.4.0}

  - name: location
    summary: Absolute URL of the request.
    description: |
        If the request redirects, this property returns the URL of the redirected request.
    type: String
    permission: read-only

  - name: ondatastream
    summary: Function to be called at regular intervals as the request data is being received.
    description: |
        Must be set before calling `open`.

        The `progress` property of the event will contain a value from 0.0-1.0 with the progress of
        the request. If the progress can not be calculated,
        the value will be [PROGRESS_UNKNOWN](Titanium.Network.PROGRESS_UNKNOWN).
    type: Callback<Object>

  - name: onerror
    summary: Function to be called upon a error response.
    description: |
        Must be set before calling `open`.

        The callback's argument is an object with a single property, `error`, containing the error
        string.
    type: Callback<FailureResponse>

  - name: onload
    summary: Function to be called upon a successful response.
    description: |
        Must be set before calling `open`.

        To access response data and headers, access the `HTTPClient` object itself (accessible as
        `this` during the callback, or the `source` property of the callback event).
    type: Callback<SuccessResponse>

  - name: onreadystatechange
    summary: |
        Function to be called for each [readyState](Titanium.Network.HTTPClient.readyState) change.
    type: Callback<Object>
    description: |
        Must be set before calling `open`.

        When the callback is invoked, `this.readyState` is set to one of the
        `Titanium.Network.HTTPClient` ready-state constants,
        [OPENED](Titanium.Network.HTTPClient.OPENED),
        [HEADERS_RECEIVED](Titanium.Network.HTTPClient.HEADERS_RECEIVED),
        [LOADING](Titanium.Network.HTTPClient.LOADING),
        or [DONE](Titanium.Network.HTTPClient.DONE).

        Due to the asynchronous nature of the Titanium platform, the internal value of
        [readyState](Titanium.Network.HTTPClient.readyState) might be different from the state change
        for which the event was fired. To address this discrepancy, the function is now invoked with a
        payload object of type <ReadyStatePayload>. This is supported on the iOS and Android platforms.

  - name: onsendstream
    summary: Function to be called at regular intervals as the request data is being transmitted.
    description: |
        Must be set before calling `open`.

        The `progress` property of the event will contain a value from 0.0-1.0 with the progress of
        the upload.
    type: Callback<Object>

  - name: password
    summary: Sets the password parameter for authentication credentials.
    description: Must be set before calling [open](Titanium.Network.HTTPClient.open).
    type: String
    default: Undefined
    platforms: [android, iphone, ipad, macos]
    since: "3.0.0"

  - name: readyState
    summary: The current ready state of this HTTP request.
    description: |
        The ready state describes the current state of the request. The ready state is set to one of
        the five `Titanium.Network.HTTPClient` ready state constants. A typical HTTP request goes
        through the states in this order:

        * [UNSENT](Titanium.Network.HTTPClient.UNSENT)
        * [OPENED](Titanium.Network.HTTPClient.OPENED)
        * [HEADERS_RECEIVED](Titanium.Network.HTTPClient.HEADERS_RECEIVED)
        * [LOADING](Titanium.Network.HTTPClient.LOADING)
        * [DONE](Titanium.Network.HTTPClient.DONE)

        The `onreadystatechange` callback is invoked each time the ready state changes.
    type: Number
    constants: [ Titanium.Network.HTTPClient.UNSENT,Titanium.Network.HTTPClient.OPENED,
                 Titanium.Network.HTTPClient.HEADERS_RECEIVED, Titanium.Network.HTTPClient.LOADING,
                 Titanium.Network.HTTPClient.DONE ]
    permission: read-only

  - name: responseData
    summary: Response data as a `Blob` object.
    type: Titanium.Blob
    permission: read-only

  - name: responseText
    summary: Response as text.
    description: Set to `null` if an error was received or no data was returned.
    type: String
    permission: read-only

  - name: responseXML
    summary: Response object as an XML DOM Document object.
    description:
       Set to `null` if the content type returned by the server was not XML or if the content could
       not be parsed.
    type: Titanium.XML.Document
    permission: read-only

  - name: securityManager
    summary: The Security Manager for this client.
    description:
        This property **must** be specified during creation.
        Set this property on the HTTPClient to participate in the authentication and resource management
        of the connection.
        See <SecurityManagerProtocol> for further information.
    type: SecurityManagerProtocol
    platforms: [ipad, iphone, android, macos]
    since: "3.3.0"
    availability: creation

  - name: status
    summary: Response HTTP status code.
    type: Number
    permission: read-only

  - name: statusText
    summary: Human-readable status message associated with the status code.
    type: String
    permission: read-only

  - name: timeout
    summary: Timeout in milliseconds when the connection should be aborted.
    default: |
        On iOS, the default is 15000 (15 seconds).
    type: Number

  - name: timeoutForResource
    summary: |
        The maximum amount of time (in milliseconds) that a resource request should be allowed to take.
    description: |
        The resource timeout controls how long (in milliseconds) to wait for an entire resource to transfer before giving up.
        The resource timer starts when the request is initiated and counts until either the request completes or this timeout is reached, whichever comes first.
        For more detail see [timeoutintervalforresource](https://developer.apple.com/documentation/foundation/nsurlsessionconfiguration/1408153-timeoutintervalforresource?language=objc)
        from Apple documentation.
        This property also applies if <Ti.Network.HttpClient.waitsForConnectivity> is set to `true`.
    default: |
        The default is `7*24*60*60*1000` milliseconds (7 days).
    type: Number
    platforms: [iphone, ipad]
    since: '9.2.0'

  - name: waitsForConnectivity
    summary: |
        A Boolean value that indicates whether the session should wait for connectivity to become available, or fail immediately.
    description: |
        Causes tasks to wait for network connectivity to become available, rather than immediately failing 
        with an error when it is not. When waiting for connectivity, the <Ti.Network.HttpClient.timeout> 
        property does not apply, but the <Ti.Network.HttpClient.timeoutForResource> property does.
    default: false
    type: Boolean
    platforms: [iphone, ipad]
    osver: {ios: {min: "11.0"}}
    since: '9.2.0'

  - name: username
    summary: Sets the username parameter for authentication credentials.
    description: Must be set before calling [open](Titanium.Network.HTTPClient.open).
    type: String
    default: Undefined
    platforms: [android, iphone, ipad, macos]
    since: "3.0.0"

  - name: validatesSecureCertificate
    summary: Determines how SSL certification validation is performed on connection.
    description: |
        On Android, this property is ignored if the `securityManager` property is used to create a custom SSL context and will handle the given URI.
    type: Boolean
    default: |
        False when running in the simulator or on device in testing mode, and true if built for
        release in distribution mode.
    platforms: [android, iphone, ipad, macos]

  - name: tlsVersion
    summary: Sets the TLS version to use for handshakes.
    description: |
        If you experience handshake failures, set this value to a lower version using the TLS
        constants in <Titanium.Network>. 'undefined', 'null', or unsupported values use the default
        behavior for that Android versions.

        Setting this property disables falling back to lower TLS versions.
    type: Number
    constants: Titanium.Network.TLS_VERSION_*
    since: {android: "3.6.0"}
    default: |
        undefined, behaves as `Ti.Network.TLS_VERSION_1_2`.
    platforms: [android]

  - name: cache
    summary: Determines whether HTTP responses are cached.
    description: |
        If `cache` is set to `true`, requests using this HTTP client will cache their responses
        (respecting headers such as "no-cache", "no-store", and cache expiry). In this case, repeated
        requests to the same URL may retrieve the initial response rather than triggering a new
        request. The cache is shared between all instances of `HTTPClient`.

        Caching should only be enabled for HTTP requests which you expect the result to remain
        consistent for.

        If `cache` is `false`, any request on this HTTP client will result in a new HTTP request.

        This propery must be set before `open` is called.
    type: Boolean
    since: "2.0.0"
    default: false
    platforms: [iphone, ipad, macos]

examples:
  - title: Simple GET Request
    example: |
        The following code excerpt does a simple GET request and logs the response text.

        ``` js
        var url = "http://www.appcelerator.com";
        var client = Ti.Network.createHTTPClient({
            // function called when the response data is available
            onload : function(e) {
                Ti.API.info("Received text: " + this.responseText);
                alert('success');
            },
            // function called when an error occurs, including a timeout
            onerror : function(e) {
                Ti.API.debug(e.error);
                alert('error');
            },
            timeout : 5000  // in milliseconds
        });
        // Prepare the connection.
        client.open("GET", url);
        // Send the request.
        client.send();
        ```

---
name: SecurityManagerProtocol
summary: The protocol that the <Titanium.Network.HTTPClient.securityManager> must implement.
description: |
    The object representing <Titanium.Network.HTTPClient.securityManager> must implement this protocol.
    Assigning the securityManager property to an object that does not implement this protocol will cause an exception to be raised.
    All methods in this protocol are required.

methods:
  - name: willHandleURL
    summary: Returns if the security manager will participate in authentication of this end point.
    description: |
        The parameter passed to this method is a [NSURL](https://developer.apple.com/documentation/foundation/nsurl?language=objc)
        on iOS and a [Uri](https://developer.android.com/reference/android/net/Uri.html) on android.

        Return **true** to participate, **false** to allow default authentication flow.
    returns:
        type: Boolean
    parameters:
      - name: url
        summary: The Object representing representing the end point of this connection.
        type: Object

  - name: connectionDelegateForUrl
    summary: The <APSConnectionDelegate> for this connection.
    description: |
        This method is only called if <SecurityManagerProtocol.willHandleURL> returns true.
        See <APSConnectionDelegate> for further information.
    returns:
        type: APSConnectionDelegate
    parameters:
      - name: url
        summary: The [NSURL](https://developer.apple.com/documentation/foundation/nsurl?language=objc) representing the end point of this connection.
        type: Object
    platforms: [iphone, ipad, macos]

  - name: getTrustManagers
    summary: Returns an array of objects implementing the [X509TrustManager](https://developer.android.com/reference/javax/net/ssl/X509TrustManager.html) protocol for the SSL Context.
    description: |
        This method is only called if <SecurityManagerProtocol.willHandleURL> returns true.

        Return null to set up a SSL Context with the default system trust managers.
    returns:
        type: Array<Object>
    parameters:
      - name: proxy
        summary: The <Titanium.Network.HTTPClient> representing this connection.
        type: Object
    platforms: [android]

  - name: getKeyManagers
    summary: Returns an array of objects implementing the [X509KeyManager](https://developer.android.com/reference/javax/net/ssl/X509KeyManager.html) protocol for the SSL Context.
    description: |
        This method is only called if <SecurityManagerProtocol.willHandleURL> returns true.

        Return null to set up a SSL Context with the default system key managers.
    returns:
        type: Array<Object>
    parameters:
      - name: proxy
        summary: The <Titanium.Network.HTTPClient> representing this connection.
        type: Object
    platforms: [android]

since: "3.3.0"
platforms: [iphone, ipad, android, macos]

---
name: APSConnectionDelegate
summary: An extension of the [NSURLConnectionDelegate](https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intf/NSURLConnectionDelegate) protocol to allow users to participate in authentication and resource management for this HTTPClient.
description: |
    The APSConnectionDelegate protocol is an extension of the NSURLConnectionDelegate protocol.

    Although all methods in this protocol are optional, the connection delegate must implement at least one of the methods to
    participate in the authentication and resource management.

    The deprecated methods as defined by the NSURLConnectionDelegate protocol are not supported.

    In addition to the methods defined in the NSURLConnectionDelegate protocol this protocol defines one additional method.

    `-(BOOL)willHandleChallenge:(NSURLAuthenticationChallenge *)challenge forConnection:(NSURLConnection *)connection`.

    This method is called on the connection delegate only if it also implements the
    `connection:willSendRequestForAuthenticationChallenge:` method of the NSURLConnectionDelegate protocol.
    Return `true` if the connection delegate wants to handle this challenge.
    Return `false` if the default delegate will handle this challenge.

    If the connection delegate does not implement this method but implements `connection:willSendRequestForAuthenticationChallenge:`, the return
    value is assumed to be `true` and all challenges will be forwarded to the connection delegate.

since: "3.3.0"
platforms: [iphone, ipad, macos]
---
name: ReadyStatePayload
summary: An Object describing the current ready state. See [onreadystatechange](Titanium.Network.HTTPClient.onreadystatechange) for more information.
platforms: [iphone, ipad, android, macos]
since: "3.4.2"
properties:
  - name: readyState
    summary: The state for which `onreadystatechange` was invoked. Set to one of `Titanium.Network.HTTPClient` ready-state constants
    type: Number
