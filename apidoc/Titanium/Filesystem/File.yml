---
name: Titanium.Filesystem.File
summary: Object representing a path to a file or directory in the device's persistent storage.
description: |
    Use the <Titanium.Filesystem.getFile> method to get a handle to a `File` object,
    which represents a given path.  There does not need to be an existing file or directory
    does not need to exist before `getFile` is called. If the file doesn't exist, and
    the file path identifies a file in a writable directory, writing to the file
    creates the file implicitly.

    See <Titanium.Filesystem> for constants identifying commonly-used device directories.

    Use the [exists](Titanium.Filesystem.File.exists) method to test whether the file exists.

    A file object can point to an ordinary file, a directory or a symbolic link.
    Use [createDirectory](Titanium.Filesystem.File.createDirectory) to create a directory.
    Use the [getDirectoryListing](Titanium.Filesystem.File.getDirectoryListing) method to
    retrieve a list of the directory's contents.

    The `File` object doesn't provide methods for random access into the file.
    The `read` method reads the file's entire contents into a `Blob` object.
    The `write` method can either overwrite the entire file or append to an
    existing file.

    For random access to a file, such as accessing a small portion of a larger file,
    you can open a file as a [FileStream](Titanium.Filesystem.FileStream) object. Use the
    [open](Titanium.Filesystem.File.open) method to get a `FileStream` for an
    existing `File` object, or use the <Titanium.Filesystem.openStream> method
    to get a `FileStream` directly without calling `getFile` first.

    The <Titanium.Filesystem> module defines a number of properties and methods related to
    filesystem access, including properties that specify paths for application-specific
    directories, and methods for creating temporary files and directories.

    On Android, files may be stored on external storage (that is, removable media such as
    SD Cards).

    Note that once created with `getFile`, the path associated with a file object is
    immutable. If you move the underlying file using [move](Titanium.Filesystem.File.move)
    or [rename](Titanium.Filesystem.File.rename), you can no longer access it with the
    original `File` object. You must use `getFile` to get a handle to the new path.

    #### Resource Files

    The `Resources` directory and all the files in it are read-only. On Android, resource
    files are stored in the resource bundle and do not have all of the properties of
    normal files. In particular, they do not have creation or modification timestamps.

extends: Titanium.Proxy
since: "0.1"
createable: false
examples:
  - title: Reading a File
    example: |
        Data files shipped with the application are stored in the resources directory.

        This example reads string data from a text file.

        ``` js
        // resourcesDirectory is actually the default location, so the first
        // argument could be omitted here.
        file = Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory, "textfile.txt");
        var blob = file.read();
        var readText = blob.text;
        // dispose of file handle & blob.
        file = null;
        blob = null;
        ```
  - title: Creating a Subdirectory
    example: |
        Files that the application writes to need to be stored outside of the
        resources directory, since that directory is read-only.

        This example creates a subdirectory to store downloaded images.
        The example assumes that two variables are defined elsewhere in the code:
        myImageID, a string containing some kind of ID for the downloaded image,
        and myImageData, a `Blob` containing JPEG image data.

        ``` js
        var imageDir = Ti.Filesystem.getFile(Ti.Filesystem.applicationDataDirectory,
            'downloaded_images');
        if (! imageDir.exists()) {
            imageDir.createDirectory();
        }

        // .resolve() provides the resolved native path for the directory.
        var imageFile  = Ti.Filesystem.getFile(imageDir.resolve(), myImageID + '.jpg');
        Ti.API.info("ImageFile path is: " + imageFile.resolve());
        if (imageFile.write(myImageData)===false) {
            // handle write error
        }
        // dispose of file handles
        imageFile = null;
        imageDir = null;
        ```
methods:
  - name: append
    summary: Appends data to the file identified by this file object.
    description: |
        Data to append can be specified as a String, `Blob`, or `File`.

        If the `data` argument is a `File` object, the file's contents
        are appended to this file.

        Returns `true` if the operation succeeds.
    parameters:
      - name: data
        summary: Data to append.
        type: [String,Titanium.Blob,Titanium.Filesystem.File]
    returns:
        type: Boolean
    platforms: [android, iphone, ipad, macos]
    since: { iphone: "0.9.0", ipad: "0.9.0", android: "7.3.0" }
  - name: copy
    summary: Copies the file identified by this file object to a new path.
    description: Returns `true` if the copy succeeds.
    parameters:
      - name: destinationPath
        summary: Destination path to copy to.
        type: String
    returns:
        type: Boolean
    platforms: [android, iphone, ipad, macos]
    since: { iphone: "7.3.0", ipad: "7.3.0", android: "0.9.0" }
  - name: createDirectory
    summary: Creates a directory at the path identified by this file object.
    description: |
        Returns `true` if the directory was created successfully.
    returns:
        type: Boolean
    parameters:
      - name: recursive
        summary: |
          Toggles whether to recursively create the directory structure (like mkdir -p).
          Pass `false` to avoid recursively creating the directory.
          Defaults to true on SDK 7.3.0+, defaults to false on older SDK versions.
        type: Boolean
        optional: true
        default: true
  - name: createFile
    summary: Creates a file at the path identified by this file object.
    description: |
        Note that if you write to a file that doesn't exist, the file is created automatically,
        so it is not necessary to call this method unless you want to explicitly create the file
        (for example, to create an empty file).

        Returns `true` if the file was created successfully. Returns `false` if the
        file already exists, or if the file couldn't be created for some other reason.
    returns:
        type: Boolean
    platforms: [iphone, ipad, android, macos]
    since: { iphone: "0.9.0", ipad: "0.9.0", android: "6.1.0" }

  - name: createTimestamp
    summary: Returns the creation timestamp for the file identified by this file object.
    description: |
        On Android, returns 0 for resource files.
    returns:
        type: Number
    deprecated:
        since: "7.3.0"
        notes: Use [createdAt](Titanium.Filesystem.File.createdAt) instead.

  - name: createdAt
    summary: Returns the creation Date for the file identified by this file object.
    description: |
        On Android, returns a Date whose `getTime()` value is 0 for resource files.
    returns:
        type: Date
    platforms: [iphone, ipad, android, macos]
    since: { iphone: "7.3.0", ipad: "7.3.0", android: "7.3.0" }

  - name: deleteDirectory
    summary: Deletes the directory identified by this file object.
    description: |
        Returns `true` if the operation was successful. Does nothing if the file
        object does not identify a directory.
    returns:
        type: Boolean
    parameters:
      - name: recursive
        summary: Pass `true` to recursively delete any directory contents.
        type: Boolean
        optional: true
        default: false
  - name: deleteFile
    summary: Deletes the file identified by this file object.
    description: |
        Returns `true` if the operation was successful.
    returns:
        type: Boolean
  - name: exists
    summary: Returns `true` if the file or directory identified by this file object exists on the device.
    returns:
        type: Boolean
  - name: extension
    summary: Returns the extension for the file identified by this file object.
    returns:
        type: String
  - name: getDirectoryListing
    summary: |
        Returns a listing of the directory identified by this file object, or `null`
        if this object doesn't identify a directory.
    returns:
        type: Array<String>
  - name: getParent
    summary: |
        Returns the path of the parent directory holding the file identified by this
        file object, as a String (deprecated) **or** as a `File` object.
    description: |
        Prior to Titanium SDK 7.0.0, on iOS this method returned the path of the parent
        directory as a String. Since Titanium SDK 7.0.0, this method has been deprecated
        in favor of the [parent](Titanium.Filesystem.File.parent) property and will return
        a [File](Titanium.Filesystem.File) reference in the future as well.
    deprecated:
        since: "7.0.0"
        notes: |
            Use the [Titanium.Filesystem.File.parent](Titanium.Filesystem.File.parent) property to receive a `File`
            reference instead. If you wish to receive the path, use the `nativePath`
            property of that reference instead.
    returns:
      type: [String, Titanium.Filesystem.File]
      summary: Returns a String on iOS, a `Titanium.Filesystem.File` on Android

  - name: getProtectionKey
    summary: |
        Returns the protection key value of this file object.
        Returns `null` if there's an error.
    returns:
        type: String
        constants: Titanium.Filesystem.IOS_FILE_PROTECTION_*
    platforms: [iphone, ipad, macos]
    since: "4.1.0"

  - name: isDirectory
    summary: Returns `true` if this file object represents a directory.
    returns:
        type: Boolean
    since: { iphone: "3.1.0", ipad: "3.1.0" }
  - name: isFile
    summary: Returns `true` if this file object represents an ordinary file.
    returns:
        type: Boolean
    since: { iphone: "3.1.0", ipad: "3.1.0" }
  - name: modificationTimestamp
    summary: Returns the last modification time for this file.
    description: |
        On Android, returns 0 for resource files.
    returns:
        type: Number
    deprecated:
        since: "7.3.0"
        notes: Use [Titanium.Filesystem.File.modifiedAt](Titanium.Filesystem.File.modifiedAt) instead.
  - name: modifiedAt
    summary: Returns the last modification Date for the file identified by this file object.
    description: |
        On Android, returns a Date whose `getTime()` value is 0 for resource files.
    returns:
        type: Date
    platforms: [iphone, ipad, android, macos]
    since: { iphone: "7.3.0", ipad: "7.3.0", android: "7.3.0" }

  - name: move
    summary: Moves the file identified by this file object to another path.
    description: |
        Note that this method moves the stored file, but doesn't update this
        file object to point to the new path. To access the file after moving it,
        you must call [getFile](Titanium.Filesystem.getFile) using the destination
        path to obtain a new file handle.
    returns:
        type: Boolean
    parameters:
      - name: newpath
        summary: New location for the file.
        type: String

  - name: open
    summary: Opens the file identified by this file object for random access.
    description: |
        You can open the file for reading, writing, or appending by specifying one of the
        `MODE` constants from <Titanium.Filesystem>:
        [MODE_READ](Titanium.Filesystem.MODE_READ), [MODE_WRITE](Titanium.Filesystem.MODE_WRITE),
        or [MODE_APPEND](Titanium.Filesystem.MODE_APPEND).

        The `FileStream` object returned by this call can be used to read from, write to, or
        append to the file, depending on what mode the file is opened in.
    parameters:
      - name: mode
        summary: |
            Mode to open the file in: `MODE_READ`, `MODE_WRITE`, or `MODE_APPEND`.
        type: Number
    returns:
        type: Titanium.Filesystem.FileStream

  - name: read
    summary: Returns the contents of the file identified by this file object as a `Blob`.
    returns:
        type: Titanium.Blob
  - name: rename
    summary: Renames the file identified by this file object.
    description: |
        Returns `true` if the file was successfully renamed.

        Fails if the destination is in a different directory than the current file.
        Use [move](Titanium.Filesystem.File.move) to move a file to a different directory.

        Note that this method renames the stored file, but doesn't update this
        file object to point to the new path. To access the file after renaming it,
        you must call [getFile](Titanium.Filesystem.getFile) using the destination
        path to obtain a new file handle.
    returns:
        type: Boolean
    parameters:
      - name: newname
        summary: New name for the file.
        type: String

  - name: resolve
    summary: Returns the fully-resolved native path associated with this file object.
    description: |
        On iOS, the path returned by this method is a plain file path, not a URL. It is suitable
        for use in native modules that need to access the file using native APIs.

        On Android, the return value of `resolve` is a `file://` URL, identical to the
        [nativePath](Titanium.Filesystem.File.nativePath) property.
    returns:
        type: String

  - name: setProtectionKey
    summary: Sets the protection key as an attribute to the file identified by this file object.
    description: |
        Returns `true` if successfully set. Returns `false` if failed.
    returns:
        type: Boolean
    parameters:
      - name: fileProtectionType
        summary: |
            File protection type.
        constants: Titanium.Filesystem.IOS_FILE_PROTECTION_*
        type: String
    platforms: [iphone, ipad, macos]
    since: "4.1.0"

  - name: spaceAvailable
    summary: Returns the amount of free space available on the device where the file
        identified by this file object is stored.
    description: |
        Free space is returned in bytes.
    returns:
        type: Number

  - name: write
    summary: Writes the specified data to the file identified by this file object.
    description: |
        If the `append` parameter is `false` or not specified, any existing data in
        the file is overwritten.

        If `append` is `true`, the specified data is appended to the end of the file.
    returns:
        type: Boolean
    parameters:
      - name: data
        summary: Data to write, as a String, `Blob` or `File` object.
        type: [String, Titanium.Filesystem.File, Titanium.Blob]
      - name: append
        summary: If `true`, append the data to the end of the file.
        type: Boolean
        optional: true
        default: false
properties:
  - name: executable
    summary: |
        `true` if the file is executable.
    description: |
        On iOS, this property exists but is always `false`.
    type: Boolean
    platforms: [android, iphone, ipad, macos]
    permission: read-only

  - name: hidden
    summary:
        Set to `true` if the file is hidden.
    description: |
        On iOS, this property exists but is always `false`.
    type: Boolean
    platforms: [android, iphone, ipad, macos]

  - name: name
    summary: Name of the file.
    type: String
    permission: read-only

  - name: nativePath
    summary: Native path associated with this file object, as a file URL.
    description: |
        On iOS, use the [resolve](Titanium.Filesystem.File.resolve)
        method to obtain a plain file path for use with native modules.
    type: String
    permission: read-only

  - name: parent
    summary: A `File` object representing the parent directory of the file identified by this object.
    description: |
        iOS platform-note: Prior to Titanium SDK 7.0.0, this method returned the
        path of the parent directory as a String. Since Titanium SDK 7.0.0 it
        returnes a <Titanium.Filesystem.File> reference for parity wih Android and Windows.
    type: Titanium.Filesystem.File
    permission: read-only
    platforms: [android]

  - name: readonly
    summary: |
        `true` if the file identified by this object is read-only.
    type: Boolean
    permission: read-only
    platforms: [android]

  - name: size
    summary: Size, in bytes, of the file identified by this object.
    type: Number
    permission: read-only

  - name: remoteBackup
    summary: Value indicating whether or not to back up to a cloud service.
    description: |
        Some apps may be rejected by Apple for backing up specific files; if this
        is the case, ensure that this value is set to `false` for them. This
        value should only need to be set once by your app, but setting it
        multiple times will not cause problems. For files distributed with your
        app, this will need to be set on boot. This flag will only affect iOS
        versions 5.0.1 and later, but is safe to set on earlier versions.

        Note that setting this property to `false` will also prevent the
        file identified by this object from being backed up to iTunes.
    default: true
    type: Boolean
    platforms: [iphone,ipad, macos]
    since: "1.8.0"

  - name: symbolicLink
    summary: |
        `true` if the file identified by this object is a symbolic link.
    type: Boolean
    permission: read-only

  - name: writable
    summary: |
        `true` if the file identified by this object is writable.
    type: Boolean
    permission: read-only
