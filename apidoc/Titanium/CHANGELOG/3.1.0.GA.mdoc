# Titanium SDK 3.1.0 - 04/16/2013

##### Contents

  * [About This Release](#about)
    * [Tizen General Availability Release](#tizen)
    * [BlackBerry 10 Beta Release](#blackberry)
  * [Installation Notes](#install)
    * [Upgrading Pre-GA npm Packages](#upgrading_npm)
    * [Installing Studio Web Plugins](#studio_web_plugins)
  * [Notice of Breaking Changes in Release 3.1](#changes)
    * [Facebook Module](#facebook)
    * [Google Maps v2 Module for Android](#googlemaps)
  * [Known Issues](#known_issues)
  * [New Features](#features)
    * [ListView](#listview)
    * [Alloy Updates](#alloy_updates)
    * [EventKit UI Framework](#event_kit)
    * [iOS6 Core Location AutoPause API](#core_location_autopause)
    * [iOS Retina Simulator Support](#retina_sim)
    * [BlackBerry and Tizen Platforms](#new_platforms)
    * [New Modules](#new_modules)
    * [iOS Contacts Reload Event](#ioscontactsreload)
    * [iOS TabGroup Customization](#customtabgroups)
  * [Deprecations](#deprecations)
    * [Titanium Manifest File](#manifest)
    * [Global Context Available to CommonJS Modules](#commonjs)
    * [Android ServiceReferenceCount Module APIs](#serviceref)
  * [API Changes](#apichanges)
    * [New APIs](#new_apis)
    * [Deprecated APIs](#deprecated_apis)

<a name="about"></a>

## About This Release

This is a General Availability (GA) release of Titanium SDK and Titanium Studio 3.1, introducing a number of new features.

Note that this release includes breaking changes. See [Notice of Breaking Changes in Release 3.1](#changes)
for details.

See [New Features](#features) for a summary of new features in this release.

<a name="tizen"></a>

### Tizen General Availability Release

This release coincides with the General Availability Release of Tizen development support with the
Titanium SDK.

Refer to [Installing the Tizen SDK](https://titaniumsdk.com/api/)
for information on getting started with Tizen development.

<a name="blackberry"></a>

### BlackBerry 10 Beta Release

This release coincides with the Beta Release of BlackBerry 10 development support with the
Titanium SDK.

Note that BlackBerry is *not* included in SDK 3.1.0. To build for BlackBerry, you must
have the BlackBerry beta version of the Titanium SDK installed. For best results, use the BlackBerry
SDK with a 3.1.1 preview build of Studio, which includes support for Alloy on BlackBerry.

The BlackBerry beta SDK and Studio preview are available.

Note that the BlackBerry beta SDK has not been tested for any other platforms.

Refer to [Installing the BlackBerry NDK](https://titaniumsdk.com/api/)
for information on getting started with BlackBerry 10 development.

<a name="install"></a>

## Installation Notes

<a name="upgrading_npm"></a>

### Upgrading Pre-GA npm Packages

If you previously installed the Beta or Release Candidate versions of the Titanium CLI
and Alloy, you need to first uninstall these components before installing or updating to
3.1.0.GA.

To check the current versions run the following commands:

    npm list -g titanium
    npm list -g alloy

If either package has a version number ending in `-alpha`, `-beta`, or `-cr`, you should uninstall the package
manually before installing 3.1.0.GA.

To uninstall these packages:

    npm remove -g titanium
    npm remove -g alloy

Note: You may need to use <code>sudo</code> before these terminal commands on OSX and Linux.

If you are using Titanium Studio, these components will be updated if you chose to install
additional Titanium updates or from the **Help** menu, select **Check for Titanium Updates**.

If you are using the Titainium CLI, you need to reinstall the CLI and Alloy from the terminal:

    npm install -g titanium
    npm install -g alloy

If you should run into any issues, run `npm cache clean` and then retry the steps above.

<a name="studio_web_plugins"></a>

### Installing Studio Web Plugins

The web development plugins, PHP, Ruby, and PyDev, are no longer bundled with Studio by
default. These plugins are still available as optional downloads. To install these
plugins:

1.  Launch Titanium Studio.
2.  Click **Help** > **Install New Software**.
3.  In the **Work with** field, enter the update URL for the package you want to install
    and press **Enter**.
4.  In the **Available Software** dialog, select the checkbox next to the package name and click **Next**.
5.  Follow the prompts to complete the installation wizard.


<a name="changes"></a>

## Notice of Breaking Changes in Release 3.1

The following changes alter the behavior of the Titanium SDK from previous versions, and may require
code changes to run your application on Titanium SDK 3.1.

<a name="facebook"></a>

### Facebook Module

A new open source Facebook module replaces the built-in `Titanium.Facebook` proxy, which uses
the Facebook 2.x SDK. Applications must transition to this new module to support Facebook,
which uses the Facebook SDK 3.0 for Android and SDK 3.1 for iOS.

The new add-on module behaves the same as the built-in `Titanium.Facebook` proxy except it also
supports the native iOS 6 Facebook login.

For more information, refer to
[Modules.Facebook](https://titaniumsdk.com/api/).

<a name="googlemaps"></a>

### Google Maps v2 Module for Android

A new open source Google Maps v2 module for Android replaces the built-in `Titanium.Map` proxy, which
uses the deprecated Google Maps API v1.  For new development, applications need to use this module
to add native maps support on the Android platform.

The Google Maps v2 module is **not** included in the SDK for Release 3.1. You can download
it from the Marketplace or from github:

*   [https://github.com/tidev/titanium_modules/tree/master/map/mobile/android/dist](https://github.com/tidev/titanium_modules/tree/master/map/mobile/android/dist)

If you have Google Maps API v1 keys, you may continue using the `Titanium.Map` proxy or use the new
Google Maps v2 module.

The new add-on module behaves the same as the built-in `Titanium.Map` proxy with the following
exceptions:

#### Requirements

  * Only works on Android devices. Not supported on the Android emulator.
  * Requires Google Play to be installed.
  * Requires Google Maps API key for both development and production.

#### New features

  * **Support for multiple map views.** Unlike the built-in `Titanium.Map` proxy, the new Google Maps v2
    module can display multiple map views.
  * **Support native UI controls and gestures.** The new Google Maps v2 module supports the native UI
    controls (zooming, compass and user position) and gestures (rotating and tilting).
  * **Draggable annotations.** Annotations are draggable with the new Google Maps v2 module. Set the
    Annotation's `draggable` property to `true` to enable this behavior. 
  * **Display traffic conditions.** The new Google Maps v2 module can display current traffic conditions,
    depending on the region viewed.  Set the View's `traffic` property to `true` to enable this behavior.
  * **Additional Annotation colors.** The new Google Map v2 module has more color constants besides
    ANNOTATION_GREEN and ANNOTATION_RED.
  * **Support for custom annotation views.** Instead of a pin image, you can specify a
    custom view for the pin using the
    [`customView`](https://titaniumsdk.com/api/) property. 
    (This property has also been added to Titanium.Map.Annotation for iOS.)


#### Behavior changes

  * **Route class.** In the Google Maps v2 module, you need to create a Route object before adding it.
    Previously in the `Titanium.Map` proxy, routes were created using an abstract data type with the
    `addRoute` method.
  * **Annotation properties.** The `animate` property is not supported. The module only supports the 
    Google Maps Android API v2 native markers.
  * **View properties.** The following properties and their accessors are not supported on the View
    class in the Google Maps v2 module: `hideAnnotationWhenTouchMap`, `latitudeDelta`, `longitudeDelta` and
    `regionFit`.
      * For the `hideAnnotationWhenTouchMap` property, annotations can be deselected by either touching the
        annotation again or touching the View outside the annotation.  Previously in the `Titanium.Map` proxy,
        you had to choose one of these behaviors to deselect the annotation.  In the Google Maps v2 module,
        both methods of deselecting an annotation work by default.
      * The `latitudeDelta` and `longitudeDelta` properties were read-only properties in the `Titanium.Map` proxy
        that can be accessed using View's `region` property with the Google Maps v2 module.
  * **View `regionchanged` event.** This event returns the new `latitude` and `longitude` coordinates of the
    changed View not the `region` object.
  * **Map constants.**
      * The STANDARD_TYPE constant is missing from the Google Maps v2 module.  Use the NORMAL_TYPE constant
        instead.
      * The ANNOTATION_PURPLE constant is missing from the Google Maps v2 module.  Use the ANNOTATION_VIOLET
        constant instead.

For more information, refer to
[Modules.Map](https://titaniumsdk.com/api/) and
[Google Maps v2 for Android](https://titaniumsdk.com/api/).


<a name="known_issues"></a>

## Known Issues

### iOS 6 Calendar and Contact Permissions

If you build your application with Xcode 4.4.1/iOS 5.1, by default, your application will
not have access to an iOS 6 device's calendar and contacts. Because of iOS 6's new privacy settings
and the Titanium SDK's support for the EventKit UI framework, only applications built for iOS 6
devices are provided with these default permissions.

To allow the application access to an iOS 6 device's calendar and contacts, go to
**Settings** > **Privacy** and enable the application.


<a name="features"></a>

## New Features

<a name="listview"></a>

### ListView

This release introduces `ListView`, a new Titanium proxy to replace the existing `TableView`.

`ListView` is analogous to `TableView`, `ListSection` is analogous to `TableViewSection`, and
`ListItem` is analogous to `TableViewRow`.

Both list view and table view present data to user as a vertically scrolling list of rows.
However, list view uses a data-oriented approach versus table view's view-oriented approach.

Because of list view's approach, list view's performance is faster but limits access to items
in the list, that is, you cannot directly manipulate the views, set view properties and bind event
callbacks the same way as you can with table view rows. The next subsection describes how to
use list items.

#### ListItem versus TableViewRow

You need to explicitly create a `ListSection` in order to add a `ListItem` to a `ListView`.
You cannot directly add a `ListItem` to a `ListView`.
In a `TableView`, a `TableViewRow` can be directly added to a `TableView` because a
`TableViewSection` is implicitly created and added to the `TableView`.

With `ListView`, you can't create a `ListItem` object directly.
Instead, you pass an array of `ListDataItem` objects to the `ListSection`, and the 
list view manages the creation of list items dynamically.

You cannot add views to a `ListItem` using the `add` method, which could be done with a
`TableViewRow`. To add views to a `ListItem`, you need to define an `ItemTemplate`,
which is bound to a list data item using the `template` property.

You cannot explicitly set properties or bind events for a `ListItem`.  You have to set them using the
`properties` dictionary of a `ListDataItem` or `ItemTemplate` and the `events` dictionary of the
`ItemTemplate` or `ViewTemplate`, respectively.

#### API Differences

**Note:** This is the first version of list view and some features have not been implemented.
The differences listed are for the final planned list view and the current table view in Release 3.1.0.

  - **TableViewRow properties**: The following properties and their accessors are not
    available for ListItem: `accessibilityLabel`, `className`, `editable`, `hasCheck`,
    `hasChild`, `hasDetail`, `leftImage`, `moveable` and `rightImage`.

      - For `hasCheck`, `hasChild`, and `hasDetail`, use the `accessoryType` property.
      - For `leftImage` and `rightImage`, use the `image` property or create a custom item
        template.

  - **TableViewRow methods**: ListItem does not support any methods. Adding views and
    binding event callbacks are supported through the item template.

  - **TableViewSection properties**: The following properties and their accessors are not
    supported by ListSection: `rows` and `rowCount`.

      - For `rows`, use the `items` property.
      - For `rowCount`, use the `itemCount` property. (Not yet implemented.)

  - **TableViewSection methods**: The following methods are not supported by ListSection:
    `add`, `remove` and `rowAtIndex`.

      - For `rowAtIndex`, use the `getItemAt` method.
      - For `add` and `remove`, use the other ListSection methods to manipulate the ListItems in
        the ListSection.

  - **TableView properties**: The `data` property and its accessors are not available
    for ListView. Use the `sections` property to set the ListSections for a ListView.  You
    cannot directly add ListItems to a ListView.

  - **TableView methods**: The following methods are not available to ListView:
    `appendRow`, `deleteRow`, `deselectRow`, `insertRowAfter`, `insertRowBefore`, `selectRow`,
    `updateRow`, `scrollToIndex` and `selectRow`.

      - For `scrollToIndex`, use the `scrollToItem` method.
      - For `selectRow`, use the `selectItem` method. (Currently implemented only for iOS.)
      - For all other row methods, you cannot manipulate ListItems with a ListView.
        You have to manipulate them with the ListSection they are contained in.

For more information, refer to
[Titanium.UI.ListView](https://titaniumsdk.com/api/)
and the [ListView guide](https://titaniumsdk.com/api/).

<a name="alloy_updates"></a>

### Alloy Updates

Alloy 1.1.0, released in coordination with this SDK release, includes new collection
binding functionality.

Studio 3.1.0 includes two new features related to Alloy: 

*   Content assist in Alloy view XML files, TSS files, and controllers.

*   Debugging support for Alloy applications. You can now set breakpoints in Alloy controllers
    and the alloy.js file, instead of having to set breakpoints in the generated code.

<a name="event_kit"></a>

### EventKit UI Framework

The iOS EventKit framework, allowing access to calendar events and reminders, is now
available inside Titanium. See the
[Titanium.Calendar API reference](https://titaniumsdk.com/api/)
for details.

<a name="core_location_autopause"></a>

### iOS6 Core Location AutoPause API

The iOS AutoPause API pauses the location updates when an application goes into the
background. We've implemented access to this new API in Titanium. For more information,
see 
[pauseLocationUpdateAutomatically](https://titaniumsdk.com/api/)
in the Ti.Geolocation API reference.

<a name="retina_sim"></a>

### iOS Retina Simulator Support

The iOS simulator now allows you to choose the default simulator type to launch--either
non-Retina, Retina, or Retina tall. To select the simulator type:

1. In the Preferences dialog, navigate to **Studio** > **Platforms** > **iOS**.
2. Choose a simulator type from the **Default Display** list and click **OK**.

A subsequent release will include the ability to change the simulator type from the Run
Configurations dialog when launching in the simulator.

<a name="new_platforms"></a>

### BlackBerry and Tizen Platforms

This release includes support for Tizen and BlackBerry (Beta). 

Use BlackBerry and Tizen from inside Studio 3.1.0. Create projects and run on simulator
and device.

For details on getting started with BlackBerry, see:

*  [Installing the BlackBerry NDK](https://titaniumsdk.com/api/) in the Titanium Guides.

For details on getting started with Tizen, see: 

*  [Installing the Tizen SDK](https://titaniumsdk.com/api/) in the Titanium Guides.

Note that the platform support for these new platforms is *not* reflected in the API docs.

<a name="new_modules"></a>

### New Modules

In coordination with this release Appcelerator is releasing Facebook V3 (iOS and Android), Google Maps V2 (Android), Newsstand (iOS)
and NFC (Android) modules.

To support these new modules which are either currently packaged with the SDK or will be
packaged with the SDK in the future, API docs for optional modules are now available in
the [Modules](https://titaniumsdk.com/api/) namespace in the API reference.

Docs for Facebook, Google Maps, and NFC are available on the documentation site:

*   [Facebook Module API reference](https://titaniumsdk.com/api/)
*   [Google Maps v2 Module API reference](https://titaniumsdk.com/api/)
*   [NFC Module API reference](https://titaniumsdk.com/api/)

<a name="ioscontactsreload"></a>

### iOS Contacts Reload Event

On iOS, the contacts database may be modified by an external application, causing any `Person` or
`Group` objects you have retrieved to be out of sync with the database. The IDs of these objects are
not guaranteed to remain the same, so updating an object when it is out of sync may have
unpredictable results.

To avoid this, listen for the 
[`reload`](https://titaniumsdk.com/api/) event.
When you receive a `reload` event, you should  assume that any existing `Person` or `Group` objects
are invalid, and reload them from the `Contacts` module before modifying them.

<a name="customtabgroups"></a>

### iOS TabGroup Customization

Several new properties are available for customizing tab groups on iOS. These include
`activeIcon` on the Tab object and `activeTabIconTint`, `activeTabBackgroundImage`,
`shadowImage`, and `tabsBackgroundImage` on the TabGroup object.

<a name="deprecations"></a>

## Deprecations

The following features have been marked deprecated and will be removed in a future Titanium SDK
release.

<a name="manifest"></a>

### Titanium Manifest File

The `manifest` file located in the top-level directory of a Titanium project is deprecated as of
this release.  This file is created for all Titanium projects and contains project metadata,
which can also be found in the `tiapp.xml` file.  This file is not used by the Titanium project.

As of Release 3.2.0, this file will no longer be generated when creating a new project using either
the CLI or Studio.

<a name="commonjs"></a>

### Global Context Available to CommonJS Modules

Currently, CommonJS modules loaded into a Titanium application have access to the global context.
Meaning any variable not declared locally using `var` can be accessed and modified in the
application code and CommonJS modules if they have the same name.

As of this release, this behavior works on Android, iOS and Mobile Web. Prior to Release 3.1.0,
this behavior only worked on iOS and Mobile Web.

The usage of the global context in CommonJS modules is unsupported and deprecated,
and will be removed in a future Titanium SDK release.

For recommended practices, refer to
[CommonJS Modules in Titanium](https://titaniumsdk.com/api/)

<a name="serviceref"></a>

### Android ServiceReferenceCount Module API Methods

The undocumented module API methods `incrementServiceReferenceCount`,
`decrementServiceReferenceCount`, and `getServiceReferenceCount` are
deprecated and will be removed in the future. ([TIMOB-13443](https://jira-archive.titaniumsdk.com/TIMOB-13443))

<a name="apichanges"></a>

## API Changes

<a name="new_apis"></a>

<h2>New APIs</h2>

The following APIs are new or have expanded platform support in Release
3.1.0.

<table>
<tr><th>API</th><th>Type</th><th>Notes</th></tr>
  <tr><td>Titanium.Android.BroadcastReceiver</td><td>object</td><td><p>The Titanium binding of an 
Android Broadcast Receiver.
 (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.Android.createBroadcastReceiver</td><td>method</td><td><p>Creates and returns an instance of Titanium.Android.BroadcastReceiver. (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.Android.registerBroadcastReceiver</td><td>method</td><td><p>Registers broadcast receiver for the given actions (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.Android.unregisterBroadcastReceiver</td><td>method</td><td><p>Unregisters a broadcast receiver (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.App.significanttimechange</td><td>event</td><td><p>Fired when there is a significant change in the time. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Calendar</td><td>module</td><td><p>The Android.Calendar module provides proxies and methods for accessing the native 
calendar functionality.
 (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Calendar.Alert</td><td>object</td><td><p>An object that represents a single alert for an event in an calendar. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Calendar.Calendar</td><td>object</td><td><p>An object that represents a single calendar. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Calendar.Event</td><td>object</td><td><p>An object that represents a single event in a calendar. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Calendar.RecurrenceRule</td><td>object</td><td><p>An object that is used to describe the recurrence pattern for a recurring event. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Contacts.reload</td><td>event</td><td><p>Fired when the database backing the contacts module is modified externally. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Filesystem.File.isDirectory</td><td>method</td><td><p>Returns <code>true</code> if this file object represents a directory. (Added support for iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Filesystem.File.isFile</td><td>method</td><td><p>Returns <code>true</code> if this file object represents an ordinary file. (Added support for iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Geolocation.ACCURACY_BEST_FOR_NAVIGATION</td><td>property</td><td><p>Use with accuracy to request highest possible 
accuracy and combine it with additional sensor data.
 (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Geolocation.ACTIVITYTYPE_AUTOMOTIVE_NAVIGATION</td><td>property</td><td><p>The location data is used for tracking location changes to the automobile specifically during vehicular navigation. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Geolocation.ACTIVITYTYPE_FITNESS</td><td>property</td><td><p>The location data is used for tracking any pedestrian-related activity. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Geolocation.ACTIVITYTYPE_OTHER</td><td>property</td><td><p>The location data is being used for an unknown activity. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Geolocation.ACTIVITYTYPE_OTHER_NAVIGATION</td><td>property</td><td><p>The location data is used for tracking movements of other types of vehicular 
navigation that are not automobile related.
 (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Geolocation.activityType</td><td>property</td><td><p>The type of user activity to be associated with the location updates. Available in iOS 6.0 and later.
 (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Geolocation.getActivityType</td><td>method</td><td><p>Gets the value of the activityType property. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Geolocation.getPauseLocationUpdateAutomatically</td><td>method</td><td><p>Gets the value of the pauseLocationUpdateAutomatically property. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Geolocation.locationupdatepaused</td><td>event</td><td><p>Fired when location updates are paused by the OS. Available in iOS 6.0 and later. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Geolocation.locationupdateresumed</td><td>event</td><td><p>Fired when location manager is resumed by the OS. Available in iOS 6.0 and later. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Geolocation.pauseLocationUpdateAutomatically</td><td>property</td><td><p>Indicates whether the location updates may be paused. Available in iOS 6.0 and later. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Geolocation.setActivityType</td><td>method</td><td><p>Sets the value of the activityType property. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Geolocation.setPauseLocationUpdateAutomatically</td><td>method</td><td><p>Sets the value of the pauseLocationUpdateAutomatically property. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Map.Annotation.customView</td><td>property</td><td><p>Defines a custom view to be used by the annotation. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Map.Annotation.getCustomView</td><td>method</td><td><p>Gets the value of the customView property. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Map.Annotation.setCustomView</td><td>method</td><td><p>Sets the value of the customView property. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.Map.View.longpress</td><td>event</td><td><p>Fired when the device detects a long press. (Added support for Android.)</p></td></tr>
  <tr><td>Titanium.UI.Android.OVER_SCROLL_ALWAYS</td><td>property</td><td><p>Always allow a user to over-scroll this view, provided it is a view that can scroll. (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.Android.OVER_SCROLL_IF_CONTENT_SCROLLS</td><td>property</td><td><p>Allow a user to over-scroll this view only if the content is large enough to meaningfully scroll, provided it is a view that can scroll. (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.Android.OVER_SCROLL_NEVER</td><td>property</td><td><p>Never allow a user to over-scroll this view. (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.DashboardView.pagechanged</td><td>event</td><td><p>Fired when the current page of the dashboard view changes. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.LIST_ACCESSORY_TYPE_CHECKMARK</td><td>property</td><td><p>Displays a checkmark on the right side of an item in a list view. (New API, supported on Android, iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.LIST_ACCESSORY_TYPE_DETAIL</td><td>property</td><td><p>Displays a detail disclosure button on the right side of an item in a list view. (New API, supported on Android, iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.LIST_ACCESSORY_TYPE_DISCLOSURE</td><td>property</td><td><p>Displays a disclosure indicator on the right side of an item in a list view. (New API, supported on Android, iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.LIST_ACCESSORY_TYPE_NONE</td><td>property</td><td><p>Do not display anything on the right side of an item in a list view. (New API, supported on Android, iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.LIST_ITEM_TEMPLATE_CONTACTS</td><td>property</td><td><p>A built-in style for an item with a title label on the left side of the cell with
right-aligned, blue text, which is next to a subtitle label with left-aligned, black text.
 (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.LIST_ITEM_TEMPLATE_DEFAULT</td><td>property</td><td><p>A built-in style for an item with an image view and black, left-aligned title label.
 (New API, supported on Android, iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.LIST_ITEM_TEMPLATE_SETTINGS</td><td>property</td><td><p>A built-in style for a item with an image view; a black, left-aligned title label; and a
smaller blue, right-aligned subtitle label.
 (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.LIST_ITEM_TEMPLATE_SUBTITLE</td><td>property</td><td><p>A built-in style for an item with an image view; a black, left-aligned title label across the
top of the cell and a subtitle label below it in smaller gray text.
 (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.ListItem</td><td>object</td><td><p>A list item is an individual item in a list section. (New API, supported on Android, iPad and iPhone.)</p></td></tr>
  <tr><td>Titanium.UI.ListSection</td><td>object</td><td><p>A list section is a container within a list view used to organize list items. (New API, supported on Android, iPad and iPhone.)</p></td></tr>
  <tr><td>Titanium.UI.ListView</td><td>object</td><td><p>A list view is used to present information, organized in to sections and items,
in a vertically-scrolling view.
 (New API, supported on Android, iPad and iPhone.)</p></td></tr>
  <tr><td>Titanium.UI.ScrollView.getOverScrollMode</td><td>method</td><td><p>Gets the value of the overScrollMode property. (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.ScrollView.overScrollMode</td><td>property</td><td><p>One of Titanium.UI.Android.OVER_SCROLL_ALWAYS, Titanium.UI.Android.OVER_SCROLL_IF_CONTENT_SCROLLS, or Titanium.UI.Android.OVER_SCROLL_NEVER. 
 (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.ScrollView.setOverScrollMode</td><td>method</td><td><p>Sets the value of the overScrollMode property. (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.ScrollableView.getOverScrollMode</td><td>method</td><td><p>Gets the value of the overScrollMode property. (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.ScrollableView.overScrollMode</td><td>property</td><td><p>One of Titanium.UI.Android.OVER_SCROLL_ALWAYS, Titanium.UI.Android.OVER_SCROLL_IF_CONTENT_SCROLLS, or Titanium.UI.Android.OVER_SCROLL_NEVER. 
 (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.ScrollableView.setOverScrollMode</td><td>method</td><td><p>Sets the value of the overScrollMode property. (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.Slider.start</td><td>event</td><td><p>Fired when the user starts tracking the slider. (New API, supported on Android, iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.Slider.stop</td><td>event</td><td><p>Fired when the user stops tracking the slider. (New API, supported on Android, iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.Tab.activeIcon</td><td>property</td><td><p>Icon URL for this tab when active. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.Tab.getActiveIcon</td><td>method</td><td><p>Gets the value of the activeIcon property. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.Tab.setActiveIcon</td><td>method</td><td><p>Sets the value of the activeIcon property. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.TabGroup.activeTabBackgroundImage</td><td>property</td><td><p>Default background image for the active tab. (Added support for iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.TabGroup.activeTabIconTint</td><td>property</td><td><p>Color applied to active tabs icons, as a color name or hex triplet, where the tab's activeIcon was not defined. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.TabGroup.shadowImage</td><td>property</td><td><p>Image of the shadow placed between the tab bar and the content area. (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.TabGroup.tabsBackgroundImage</td><td>property</td><td><p>Default background image for tabs. (Added support for iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.TableView.getOverScrollMode</td><td>method</td><td><p>Gets the value of the overScrollMode property. (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.TableView.overScrollMode</td><td>property</td><td><p>One of Titanium.UI.Android.OVER_SCROLL_ALWAYS, Titanium.UI.Android.OVER_SCROLL_IF_CONTENT_SCROLLS, or Titanium.UI.Android.OVER_SCROLL_NEVER. 
 (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.TableView.sections</td><td>property</td><td><p>Sections of this table. (Added support for Android.)</p></td></tr>
  <tr><td>Titanium.UI.TableView.setOverScrollMode</td><td>method</td><td><p>Sets the value of the overScrollMode property. (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.View.keypressed</td><td>event</td><td><p>Fired when a hardware key is pressed in the view. (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.View.removeAllChildren</td><td>method</td><td><p>Removes all child views from this view's hierarchy. (New API, supported on Android, iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.WebView.getOverScrollMode</td><td>method</td><td><p>Gets the value of the overScrollMode property. (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.WebView.overScrollMode</td><td>property</td><td><p>One of Titanium.UI.Android.OVER_SCROLL_ALWAYS, Titanium.UI.Android.OVER_SCROLL_IF_CONTENT_SCROLLS, or Titanium.UI.Android.OVER_SCROLL_NEVER. 
 (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.WebView.setOverScrollMode</td><td>method</td><td><p>Sets the value of the overScrollMode property. (New API, supported on Android.)</p></td></tr>
  <tr><td>Titanium.UI.createListSection</td><td>method</td><td><p>Creates and returns an instance of Titanium.UI.ListSection. (New API, supported on Android, iPad and iPhone.)</p></td></tr>
  <tr><td>Titanium.UI.createListView</td><td>method</td><td><p>Creates and returns an instance of Titanium.UI.ListView. (New API, supported on Android, iPad and iPhone.)</p></td></tr>
  <tr><td>Titanium.UI.iPad.SplitWindow.removeAllChildren</td><td>method</td><td><p>Removes all child views from this view's hierarchy. (New API, supported on iPad.)</p></td></tr>
  <tr><td>Titanium.UI.iPhone.ListViewCellSelectionStyle</td><td>object</td><td><p>A set of constants for the style that can be used for the <code>selectionStyle</code> property of a
ListItem, which is set in the <code>properties</code> dictionary of either the ListDataItem or
ItemTemplate.
 (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.iPhone.ListViewScrollPosition</td><td>object</td><td><p>A set of constants for the position value that can be used for the <code>position</code> property of 
ListViewAnimationProperties when invoking the ListView's <code>scrollToItem</code>, <code>appendSection</code>,
<code>deleteSectionAt</code>, <code>insertSectionAt</code> and <code>replaceSectionAt</code> methods.
 (New API, supported on iPhone and iPad.)</p></td></tr>
  <tr><td>Titanium.UI.iPhone.ListViewStyle</td><td>object</td><td><p>A set of constants for the style that can be used for the <code>style</code> property of 
Titanium.UI.ListView.
 (New API, supported on iPhone and iPad.)</p></td></tr>
<tr>
</table>

<a name="deprecated_apis"></a>

<h2>Deprecated APIs</h2>

The following APIs are deprecated in Release 3.1.0.

<table>
<tr><th>API</th><th>Type</th><th>Notes</th></tr>
  <tr><td>Titanium.Facebook</td><td>module</td><td><p>On Mobile Web, continue to use this module.</p>
<p>On Android and iOS, use Modules.Facebook instead.</p></td></tr>
  <tr><td>Titanium.Facebook.LoginButton</td><td>object</td><td><p>On Mobile Web, continue to use this module.</p>
<p>On Android and iOS, use Modules.Facebook.LoginButton instead.</p></td></tr>
  <tr><td>Titanium.Media.Sound.error.message</td><td>event property</td><td></td></tr>
  <tr><td>Titanium.Media.VideoPlayer.error.message</td><td>event property</td><td></td></tr>
  <tr><td>Titanium.UI.WebView.error.errorCode</td><td>event property</td><td></td></tr>
  <tr><td>Titanium.UI.WebView.error.message</td><td>event property</td><td></td></tr>
  <tr><td>Titanium.UI.iOS.AdView.error.message</td><td>event property</td><td></td></tr>
<tr>
</table>
