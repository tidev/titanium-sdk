---
name: Titanium.Stream
summary: Stream module containing stream utility methods.
description: |
    This module provides a set of methods for interacting with
    [IOStream](Titanium.IOStream) objects, including asynchronous versions of the 
    `read` and `write` methods offered by all stream objects. These 
    methods should be used in any place where reading from or writing
    to a stream might block.

    See also:

    * <Titanium.IOStream>
    * <Titanium.BlobStream>
    * <Titanium.BufferStream>
    * <Titanium.Filesystem.FileStream>
    * <Titanium.Network.Socket.TCP>
extends: Titanium.Module
since: "1.7"
platforms: [android, iphone, ipad, macos]
examples: 
  - title: Stream.pump Example
    example: |
        The following example shows how to use the [pump](Titanium.Stream.pump) method.
        
        ``` js
        var pumpCallback = function(arg) {
            if(arg.bytesProcessed == -1) {
                Ti.API.info("At end of stream.");
            } else {
                Ti.API.info(String.format("Received %.0f bytes. Total: %.0f bytes.", 
                            arg.bytesProcessed, arg.totalBytesProcessed));
                // do something useful with the data in arg.buffer
            }
        }
        Ti.Stream.pump(inputStream, pumpCallback, 1024);
        ```
  - title: Write Stream to File
    example: |
        The following example uses the [writeStream](Titanium.Stream.writeStream) method
        to copy the contents of an input stream to a file. This can be used for any kind
        of input stream -- `BufferStream`, `FileStream`, or `Socket.TCP`.
        
        ``` js
        var outFileStream = Ti.Filesystem.getFile('outfile.txt').open(Ti.Filesystem.MODE_WRITE);
        
        // writes all data from inputStream to outFileStream in chunks of 1024 bytes
        var bytesWritten = Ti.Stream.writeStream(inputStream, outFileStream, 1024);
        Ti.API.info('Wrote ' + bytesWritten + ' bytes, closing both streams.');
        
        inputStream.close();
        outFileStream.close();
        ```

properties:
  - name: MODE_READ
    type: Number
    summary: |
        Use with [createStream](Titanium.Stream.createStream) to open a stream in read
        mode.
    permission: read-only

  - name: MODE_WRITE
    type: Number
    summary: |
        Use with [createStream](Titanium.Stream.createStream) to open a stream in write
        mode.
    permission: read-only

  - name: MODE_APPEND
    type: Number
    summary: |
        Use with [createStream](Titanium.Stream.createStream) to open a stream in append
        mode.
    permission: read-only

methods:
  - name: createStream
    returns:
        type: Titanium.IOStream
    summary: Creates stream from a `Buffer` or `Blob` object.
    description: |
        Returns <Titanium.BufferStream> or <Titanium.BlobStream> depending on whether a
        `Buffer` or `Blob` is provided as the `source` property in `params`.  
        
       
        `Blob` obects are read only. Throws an exception if `MODE_WRITE` or `MODE_APPEND` is 
        specified along with a blob object.
    parameters:

      - name: params
        summary: Parameter object, for specifying the source object and mode.
        type: CreateStreamArgs

  - name: read
    summary: |
        Asynchronously reads data from an [IOStream](Titanium.IOStream) into a buffer.
    description: |
        Reads data from the stream and writes it to the buffer. The first byte is
        written to `buffer[offset]`. Reads until the provided buffer is full, the end of 
        the stream is detected, or the requested number of bytes have been read. Does not 
        resize the supplied buffer.
        
        A request must include both `offset` and `length` parameters, or omit them both.

        If the stream is not readable, an error is reported:

        * On iOS, throws an exception.

        * On Android, calls the callback with an error.
        
        If `offset` is past the last byte of the buffer, throws an exception.
    parameters:
      - name: sourceStream
        summary: Stream to read from.
        type: Titanium.IOStream

      - name: buffer
        summary: Buffer to read into.
        type: Titanium.Buffer

      - name: offset
        summary: |
            Offset to start reading stream data from, in bytes.
            If specified, `length` must be specified as well.
        type: Number
        optional: true
        default: 0

      - name: length
        summary: |
            Number of bytes of data to read from the stream.
            If specified, `offset` must be specified as well.
        type: Number
        optional: true
        default: All available data or the length of the buffer, whichever is smaller.

      - name: resultsCallback
        summary: Function to call with the results of the read operation.
        type: Callback<ReadCallbackArgs>

  - name: readAll
    summary: Reads all data from the specified [IOStream](Titanium.IOStream).
    description: |
        Reads data from the stream, either synchronously or asynchronously.

        Throws an exception if a read error is encountered or data can't be written to the 
        buffer.

        If the optional `buffer` and `resultsCallback` arguments are specified, the read operation 
        takes place asynchronously, and the results are passed to the callback.
        The data is written to the provided buffer, which is resized if necessary.
        
        If the `buffer` and `resultsCallback` arguments are omitted, a new buffer is
        allocated and returned.
    parameters:
      - name: sourceStream
        summary: Stream to read from.
        type: Titanium.IOStream

      - name: buffer
        summary: |
            Buffer to read into. If specified, `resultsCallback` must be specified as
            well.
        type: Titanium.Buffer
        optional: true

      - name: resultsCallback
        summary: |
            Function to call with the results of the read operation.
            If specified, `resultsCallback` must be specified as well.
        type: Callback<ReadCallbackArgs>
        optional: true
    returns:
      - type: Titanium.Buffer
      - type: void

  - name: write
    summary: Asynchronously writes data from a buffer to an [IOStream](Titanium.IOStream).
    description: |
        Data is read from the buffer and written to the stream. 

        If the `offset` and `length` arguments are specified, data is read from the buffer
        starting at `offset`, up to `offset+length-1` or the end of the buffer, whichever
        comes first.
        
        If `offset` and `length` are omitted, the entire buffer is written to the stream.

        If the output stream is not writable, an error is reported:

        * On iOS, an exception is thrown.

        * On Android, the callback is invoked with an error.
    parameters:
      - name: outputStream
        summary: Stream to write to.
        type: Titanium.IOStream

      - name: buffer
        summary: Buffer to write from.
        type: Titanium.Buffer

      - name: offset
        summary: |
            Offset to start writing buffer data from.
            If specified, `length` must be specified as well.
        type: Number
        optional: true
        default: 0

      - name: length
        summary: |
            Bytes of data to write. If specified, `offset` must be specified as well.
        type: Number
        optional: true
        default: Length of the supplied buffer.

      - name: resultsCallback
        summary: Function to call with the results of the write operation.
        type: Callback<WriteCallbackArgs>

  - name: writeStream
    summary: Writes all data from an input stream to an output stream.
    description: |
        If the optional `resultsCallback` argument is supplied, the operation is 
        performed asynchronously.
        
        If the callback is omitted, this method is synchronous, and blocks until all data has been written.  
        The synchronous version Returns the total number of bytes written.

        If no data can be read from the input stream because the input
        stream is at end of stream, behavior varies by platform:

        *   iOS throws an exception.

        *   Android returns 0, or calls the callback with `bytesProcessed` set to 0.
    parameters:
      - name: inputStream
        summary: Stream to read from.
        type: Titanium.IOStream

      - name: outputStream
        summary: Stream to write to.
        type: Titanium.IOStream

      - name: maxChunkSize
        summary: |
            Maximum number of bytes to copy from `inputStream` to `outputStream` in a 
            single operation.
        type: Number

      - name: resultsCallback
        summary: Function to call with the results of the `writeStream` operation.
        type: Callback<WriteStreamCallbackArgs>
        optional: true

  - name: pump
    summary: Reads data from input stream and passes it to a handler method.
    description: |
        After the end of the input stream is reached, the handler is called 
        a final time with no data and `bytesProcessed` set to -1 to indicate
        the end of the input data.
    parameters:
      - name: inputStream
        summary: Stream to pump from.
        type: Titanium.IOStream

      - name: handler
        summary: Handler method that will receive data from `inputStream`.
        type: Callback<PumpCallbackArgs>

      - name: maxChunkSize
        summary: |
            Maximum number of bytes to pass to `handler` in a single call.
        type: Number

      - name: isAsync
        summary: Specifies if the `pump` operation should run asynchronously.
        type: Boolean
        optional: true
        default: false

---
name: CreateStreamArgs
platforms: [android, iphone, ipad, macos]
summary: Argument passed to [createStream](Titanium.Stream.createStream).
since: "1.7"
properties:
  - name: source
    summary: Object that the stream will read from or write to.
    type: [Titanium.Blob, Titanium.Buffer]

  - name: mode
    summary: Mode to open the stream in.
    description: |
        For `Blob` objects, only `MODE_READ` is supported.
    type: Number
    constants: Titanium.Stream.MODE_*

---
name: ReadCallbackArgs
platforms: [android, iphone, ipad, macos]
summary: |
    Argument passed to the read callback when an asynchronous [read](Titanium.Stream.read) operation
    finishes.
since: "1.7"
extends: ErrorResponse
properties:
  - name: source
    summary: Stream being read.
    type: Titanium.IOStream

  - name: bytesProcessed
    summary: Number of bytes processed, or -1 in the event of an error or end of stream.
    type: Number

  - name: errorState
    summary: |
        Whether an error was encountered. Set to 1 in the case of an error, 0
        otherwise.
    type: Number
    platforms: [android]
    deprecated:
        since: "3.1.0"
        notes: Use the `success` or `code` property values to determine error conditions.
        removed: "9.0.0"

  - name: errorDescription
    summary: Text description of the error.
    type: String
    exclude-platforms: [macos]
    deprecated:
        since: "3.1.0"
        notes: Use the `error` property to determine error message.
        removed: "9.0.0"

  - name: success
    summary: Indicates if the operation succeeded.
    description: Returns `true` if request succeeded, `false` otherwise.
    type: Boolean
    since: "3.1.0"

  - name: error
    summary: Error message, if any returned.
    description: Will be undefined if `success` is `true`.
    type: String
    since: "3.1.0"
    
  - name: code
    summary: Error code. Returns 0 if `success` is `true`.
    description: |
        Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
        was generated by the operating system, that system's error value is used.
        Otherwise, this value will be -1.
    type: Number
    since: "3.1.0"

---
name: WriteCallbackArgs
platforms: [android, iphone, ipad, macos]
summary: |
    Argument passed to the write callback when an asynchronous
    [write](Titanium.Stream.write) operation
    finishes.
since: "1.7"
extends: ErrorResponse
properties:
  - name: source
    summary: Stream being written to.
    type: Titanium.IOStream

  - name: bytesProcessed
    summary: Number of bytes processed, or -1 in the event of an error or end of stream.
    type: Number

  - name: errorState
    summary: |
        Whether an error was encountered. Set to 1 in the case of an error, 0
        otherwise.
    type: Number
    platforms: [android]
    deprecated:
        since: "3.1.0"
        notes: Use the `success` or `code` property values to determine error conditions.
        removed: "9.0.0"

  - name: errorDescription
    summary: Text description of the error.
    type: String
    exclude-platforms: [macos]
    deprecated:
        since: "3.1.0"
        notes: Use the `error` property to determine the error message.
        removed: "9.0.0"

  - name: success
    summary: Indicates if the operation succeeded.
    description: Returns `true` if request succeeded, `false` otherwise.
    type: Boolean
    since: "3.1.0"

  - name: error
    summary: Error message, if any returned.
    description: Will be undefined if `success` is `true`.
    type: String
    since: "3.1.0"
    
  - name: code
    summary: Error code. Returns 0 if `success` is `true`.
    description: |
        Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
        was generated by the operating system, that system's error value is used.
        Otherwise, this value will be -1.
    type: Number
    since: "3.1.0"

---
name: WriteStreamCallbackArgs
platforms: [android, iphone, ipad, macos]
summary: |
    Argument passed to the callback when an asynchronous
    [writeStream](Titanium.Stream.writeStream) operation finishes.
since: "1.7"
extends: ErrorResponse
properties:
  - name: fromStream
    summary: Stream being read from.
    type: Titanium.IOStream

  - name: toStream
    summary: Stream being written to.
    type: Titanium.IOStream

  - name: bytesProcessed
    summary: Number of bytes processed, or -1 in the event of an error or end of stream.
    type: Number

  - name: errorState
    summary: |
        Whether an error was encountered. Set to 1 in the case of an error, 0
        otherwise.
    type: Number
    platforms: [android]
    deprecated:
        since: "3.1.0"
        notes: Use success or code values to determine error conditions
        removed: "9.0.0"

  - name: errorDescription
    summary: Text description of the error.
    type: String
    exclude-platforms: [macos]
    deprecated:
        since: "3.1.0"
        notes: Use error property to determine error message
        removed: "9.0.0"

---
name: PumpCallbackArgs
platforms: [android, iphone, ipad, macos]
summary: |
    Argument passed to the callback each time the 
    [pump](Titanium.Stream.pump) operation has new data to deliver.
description: |
    A callback with `bytesProcessed` set to -1 indicates the end of the 
    pump operation, either because of an error or because the end of the
    stream has been reached.
since: "1.7"
extends: ErrorResponse
properties:
  - name: source
    summary: Stream being read from.
    type: Titanium.IOStream

  - name: buffer
    summary: Buffer object holding the data currently being pumped to the handler method.
    type: Titanium.Buffer

  - name: bytesProcessed
    summary: |
        Number of bytes being passed to this invocation of the handler, or 
        -1 in the event of an error or end of stream.
    type: Number

  - name: totalBytesProcessed
    summary: |
        Total number of bytes read from the stream so far, 
        including the data passed to this current invocation of the handler.
    type: Number

  - name: errorState
    summary: |
        Whether an error was encountered. Set to 1 in the case of an error, 0
        otherwise.
    type: Number
    platforms: [android]
    deprecated:
        since: "3.1.0"
        notes: Use success or code values to determine error conditions
        removed: "9.0.0"

  - name: errorDescription
    summary: Text description of the error.
    type: String
    exclude-platforms: [macos]
    deprecated:
        since: "3.1.0"
        notes: Use error property to determine error message
        removed: "9.0.0"

  - name: success
    summary: Indicates if the operation succeeded.
    description: Returns `true` if request succeeded, `false` otherwise.
    type: Boolean
    since: "3.1.0"

  - name: error
    summary: Error message, if any returned.
    description: Will be undefined if `success` is `true`.
    type: String
    since: "3.1.0"
    
  - name: code
    summary: Error code. Returns 0 if `success` is `true`.
    description: |
        Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
        was generated by the operating system, that system's error value is used.
        Otherwise, this value will be -1.
    type: Number
    since: "3.1.0"
