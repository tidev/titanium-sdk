---
name: Titanium.App.Properties
summary: |
    The App Properties module is used for storing application-related data in property/value pairs 
    that persist beyond application sessions and device power cycles.
description: |
    #### App Properties in the tiapp.xml file

    App properties defined in the `tiapp.xml` file may be accessed using these APIs.  An app
    property is defined inside the root-level `<ti:app>` element with the `<property>` element.
    Use the `name` attribute to define your property name and place the value inline with the
    `<property>` element. For example, to define an app property called `foo` with the value `42`:

    ``` xml
    <?xml version="1.0" encoding="UTF-8"?>
    <ti:app xmlns:ti="http://ti.appcelerator.org">
        <property name="foo" type="string">42</property>
    </ti:app>
    ```

    Then, you can retrieve the property during runtime with the following API call:

    ``` js
    var foo = Ti.App.Properties.getString('foo');
    ```

    As of Release 3.2.0, any application properties defined in the `tiapp.xml` file are stored in the
    device's secure storage, making them read-only.  Additionally, external access to these
    properties is now restricted.  Other iOS applications cannot access these properties and
    native Android modules must use the Titanium module API
    [TiApplication.getAppProperties](https://docs.appcelerator.com/module-apidoc/latest/android/org/appcelerator/platform/TiApplication.html#getAppProperties())
    method to access these properties.

    If you need to change the values during runtime, initially create the property with these APIs
    rather than defining them in the `tiapp.xml` file.

    Prior to Release 3.2.0, application properties defined in the `tiapp.xml` file could be
    overwritten by these APIs and accessed externally by other applications and modules.
    
extends: Titanium.Module
since: "0.5"

methods:
  - name: getBool
    summary: Returns the value of a property as a boolean data type.
    returns:
        type: Boolean
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: default
        summary: Default value to return if property does not exist.
        type: Boolean
        optional: true
        
  - name: getDouble
    summary: Returns the value of a property as a double (double-precision, floating point) data type.
    description: |
        This method must only be used to retrieve properties created with 
        [setDouble](Titanium.App.Properties.setDouble).  
    returns:
        type: Number
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: default
        summary: Default value to return if property does not exist.
        type: Number
        optional: true
        
  - name: getInt
    summary: |
        Returns the value of a property as an integer data type.
    description: |
        This method must only be used to retrieve properties created with 
        [setInt](Titanium.App.Properties.setInt).  
        
        Use [getDouble](Titanium.App.Properties.getDouble) and [setDouble](Titanium.App.Properties.setDouble) 
        to store values outside the integer data type range of `-2,147,483,648` to `2,147,483,647`.
    returns:
        type: Number
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: default
        summary: Default value to return if property does not exist.
        type: Number
        optional: true
        
  - name: getList
    summary: Returns the value of a property as an array data type.
    returns:
        type: Array<Object>
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: default
        summary: Default value to return if property does not exist.
        type: Array<Object>
        optional: true
         
  - name: getObject
    summary: Returns the value of a property as an object.
    returns:
        type: Object
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: default
        summary: Default value to return if property does not exist.
        type: Object
        optional: true
        
  - name: getString
    summary: Returns the value of a property as a string data type.
    returns:
        type: String
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: default
        summary: Default value to return if property does not exist.
        type: String
        optional: true
        
  - name: hasProperty
    summary: Indicates whether a property exists.
    returns:
        type: Boolean
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
  - name: listProperties
    summary: Returns an array of property names.
    returns:
        type: Array<Object>
        
  - name: removeProperty
    summary: Removes a property if it exists, or does nothing otherwise.
    parameters:
      - name: property
        summary: Name of property.
        type: String

  - name: removeAllProperties
    summary: Removes all properties that have been set by the user on runtime, or does nothing otherwise.
    since: "6.0.0"
        
  - name: setBool
    summary: |
        Sets the value of a property as a boolean data type. The property will be created if it 
        does not exist.
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: value
        summary: Property value.
        type: Boolean
        
  - name: setDouble
    summary: |
        Sets the value of a property as a double (double-precision, floating point) data type. The 
        property will be created if it does not exist.
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: value
        summary: Property value.
        type: Number
        
  - name: setInt
    summary: |
        Sets the value of a property as an integer data type. The property will be created if it 
        does not exist.
    description: |
        Use [getDouble](Titanium.App.Properties.getDouble) and [setDouble](Titanium.App.Properties.setDouble) 
        to store values outside the integer data type range of `-2,147,483,648` to `2,147,483,647`.
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: value
        summary: Property value, within the range `-2,147,483,648` to `2,147,483,647`.
        type: Number
        
  - name: setList
    summary: |
        Sets the value of a property as an array data type. The property will be created if it 
        does not exist.
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: value
        summary: Property value.
        type: Array<Object>
        
  - name: setObject
    summary: |
        Sets the value of a property as an object data type. The property will be created if it 
        does not exist.
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: value
        summary: Property value.
        type: Object
        
  - name: setString
    summary: |
        Sets the value of a property as a string data type. The property will be created if it 
        does not exist.
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: value
        summary: Property value.
        type: String
        
events:
  
  - name: change
    summary: Fired when a property is changed.
    description: |
        On iOS, the event is fired when the user re-enters the application after 
        making a change using the Settings application.

        The event is also fired when the application changes a property directly using one of the 
        `Ti.App.iOS.UserDefaults` or `Ti.App.Properties` methods.
    platforms: [iphone, ipad, macos]
    since: "3.0.0"

examples:
  - title: Store a property
    example: |
        Store a string property.

        ``` js
        Ti.App.Properties.setString('givenName', 'Paul');
        Ti.API.info('The value of the givenName property is: ' + Ti.App.Properties.getString('givenName'));
        ```
  - title: Enumerate over saved properties
    example: |
        Output all saved properties to the console.

        ``` js
        var props = Ti.App.Properties.listProperties();
        
        for (var i = 0, ilen = props.length; i < ilen; i++){
            var value = Ti.App.Properties.getString(props[i]);
            Ti.API.info(props[i] + ' = ' + value);
        }
        ```
