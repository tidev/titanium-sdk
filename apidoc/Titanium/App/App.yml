---
name: Titanium.App
summary: |
    The top-level App module is mainly used for accessing information about the
    application at runtime, and for sending or listening for system events.
description: |
    The `App` module exposes a number of properties set in the `tiapp.xml` file.

    Three of these properties, the application name, ID, and URL, must be specified when the
    application is created.

    While most values may be changed by editing the `tiapp.xml` file after creating the project,
    the GUID is automatically generated and should not be changed.

    To access other application properties set in the `tiapp.xml` file not exposed by the
    `Titanium.App` module, see <Titanium.App.Properties>.

    #### iOS Application Life Cycle

    At any given moment, you applications can be in one of the following possible states:

    *   Not running: The app has not been launched or was running but was terminated by the system.

    *   Inactive: The app is running in the foreground but is currently not receiving events.
    An app usually stays in this state only briefly as it transitions to a different state.
    The `pause` event is fired during this state.

    *   Active: The app is running in the foreground and is receiving events. This is the normal
    mode for foreground apps.

    *   Background: The app is in the background and executing code. Most apps enter this state
    briefly on their way to being suspended.

    *   Suspended: The app is in the background but is not executing code. The system moves
    apps to this state automatically and does not notify them before doing so. While suspended,
    an app remains in memory but does not execute any code. The `paused` event is fired
    during this state. The system tries to keep as many apps in memory at the same time as it
    can, but when memory runs low it terminates suspended apps to reclaim that memory. Apps
    that consume large amounts of memory while in the background are the first apps to be terminated.

    **Responding To Interruptions**

    ***System Alerts***

    When an **alert-based** interruption occurs, such as an incoming phone call, the app moves
    temporarily to the inactive state, and fires the `pause` event. The system then displays
    an alert to the user. The app remains in this state until the user dismisses the alert.
    At this point, the app either returns to the active state and fires the `resumed` event;
    or moves to the background state and fires the `paused` event.

    Alert-based interruptions result in temporary loss of control by your app and results in `pause`
    event being fired. Your app continues to run in the foreground, but it does not recieve
    touch events from the system. (It does continue to receive notifications and other types
    of events, such as accelerometer events.) When your app is moved back to the
    active state, the `resumed` event is fired.

    The same set of events takes place when user **double taps on the home button**.

    ***Sleep/Wake Button***

    Pressing the **Sleep/Wake** button is another type of interruption that causes your app to
    move to an inactive state. When the app is in the foreground and the **Sleep/Wake button**
    is pressed, the the system fires the `pause` event followed by the `paused` event and
    becomes inactive. This is an intentionally behavioral change by Apple to conserve battery when
    the Sleep/Wake button is pressed. On waking up the app fires the `resume` event followed by the
    `resumed` event and returns the app to normal state.

    ***Home Button***

    Pressing the **home button** is another kind of interruption. The app fires `pause` and
    `paused`events before going into background. When app is reopened it fires the `resume`
    event followed by the `resumed` event, returning the app to the normal state.

    <table class="doc-table" summary="This table gives the order of events fired when the app is in normal state.">
      <caption><b>Lifecycle events fired during different interruptions</b></caption>
      <thead>
        <tr>
          <th colspan="2">Type of Interruption</th>
          <th colspan="2">Going into Background</th>
          <th colspan="2">Coming into  Foreground</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th colspan="2" align="left">Alert-Based/Fast App Switching</th>
          <td align="center">pause</td>
          <td align="center"></td>
          <td align="center"> </td>
          <td align="center">resumed</td>
        </tr>
        <tr>
          <th colspan="2" align="left">Sleep/Wake Button</th>
          <td align="center">pause</td>
          <td align="center">paused</td>
          <td align="center">resume</td>
          <td align="center">resumed</td>
        </tr>
        <tr>
          <th colspan="2" align="left">Home Button (backgrounding)</th>
          <td align="center">pause</td>
          <td align="center">paused</td>
          <td align="center">resume</td>
          <td align="center">resumed</td>
        </tr>
      </tbody>
    </table>

    ***Blur and Focus Events***

    When using the iOS pause/resume feature, the `blur` and `focus` events do not fire
    before the application enters the background or after it returns to the foreground,
    respectively.  Instead, the application needs to monitor the `pause` and `resumed` events,
    which relies on the underlying iOS events to determine the application state rather than the
    UI events.

    #### Application Level Events

    Application-level events are custom events that are defined globally for your
    application. By convention, application-level events are set on the `Titanium.App`
    module, like this:

    ``` js
    Ti.App.addEventListener('app:myCustomEvent', myHandlerFunction);
    ```

    Adding a prefix (like 'app:' in this example) is optional, but can help ensure that
    your custom event names don't conflict with any future Titanium events.

    Application-level event listeners can be added and fired from any context, including from inside
    a web view, so they are ideal for communicating between separate parts of your
    application.

    When you add an event listener on a Titanium module (such as `Ti.App` or
    [Ti.Geolocation](Titanium.Geolocation)), the event listener function is referenced from
    the global context. This means the event listener function and any objecst it references
    can't be garbage collected until the event listener is removed.

    This can lead to memory leaks if application-level event listeners are added and not
    removed.

    See also: [Event Handling](https://docs.appcelerator.com/platform/latest/#!/guide/Event_Handling)
    in the Titanium Mobile Guides.

    #### System Level Accessibility Events

    System-level Accessibility events include:

    * Events your application fires to alert the device's accessibility system of some condition
    or to ask it to do something.
    * Events fired by the device's accessibility system and listened for in your application.

    Currently there are four system-level accessibility events. Three of them are available for
    your application to fire, and one of them is for your application to listen for.

    ##### Firing Accessibility Events.

    The following accessibility events can be fired by your application to alert the accessibility
    system of a particular condition or to ask it to perform an action.

    These events are fired using <Titanium.App.fireSystemEvent>, which is available in Titanium Mobile 3.0.0.

    * <Titanium.App.EVENT_ACCESSIBILITY_ANNOUNCEMENT>, available in iOS and Android, asks the device's
    accessibility system to make an announcement. The announcement itself is a string passed as the second
    argument to <Titanium.App.fireSystemEvent>. *How* the device's accessibility actually makes that announcement
    depends on what accessibility services are activated on the device. The most common are VoiceOver on
    iOS and TalkBack on Android. Each of those would read the announcement aloud.

    ``` js
    Ti.App.fireSystemEvent(Ti.App.EVENT_ACCESSIBILITY_ANNOUNCEMENT, "Welcome to my App");
    ```

    * <Titanium.App.iOS.EVENT_ACCESSIBILITY_LAYOUT_CHANGED>, available only on iOS, can be used to alert
    the accessibility system that the layout of the screen has changed, such as when an element
    appears or disappears. When your application fires this event, Titanium calls `UIAccessibilityLayoutChangedNotification`
    in the iOS [UIAccessibility Protocol](https://developer.apple.com/documentation/uikit/accessibility/uiaccessibility).
    No second parameter is required when firing this event with <Titanium.App.fireSystemEvent>.

    * <Titanium.App.iOS.EVENT_ACCESSIBILITY_SCREEN_CHANGED>, available only on iOS, can be used to alert
    the accessibility system when a new view appears that comprises a major portion of the screen.
    When your application fires this event, Titanium calls `UIAccessibilityScreenChangedNotification`
    in the iOS [UIAccessibility Protocol](https://developer.apple.com/documentation/uikit/accessibility/uiaccessibility).
    No second parameter is required when firing this event with <Titanium.App.fireSystemEvent>.

    ##### Listening for Accessibility Events

    Currently there is only one system accessibility event which your application can listen for using
    <Titanium.App.addEventListener>, namely <Titanium.App.accessibilitychanged>.  This event, available on iOS and on Android
    (for devices running Ice Cream Sandwich or greater), is fired when the device's accessibility service is turned
    on or off. The object passed as a parameter to the listener function contains an `enabled` property which is
    `true` if the accessibility service is now turned on, or `false` otherwise.

extends: Titanium.Module
since: "0.1"

events:
  - name: accessibilitychanged
    summary: Fired by the system when the device's accessibility service is turned on or off.
    platforms: [android, iphone, ipad, macos]
    since: {android: "3.0.0", iphone: "3.0.0", ipad: "3.0.0", macos: "9.2.0"}
    osver:
        android:
            min: "4.0"
    properties:
      - name: enabled
        summary: Whether accessibility is now enabled or disabled.
        type: Boolean

  - name: close
    summary: Fired by the system when the application is about to be terminated.
    description: It is the last event that can be received before the application gets closed.
    platforms: [android, iphone, ipad, macos]
    since: {android: "8.3.0", iphone: "1.5.0", ipad: "1.5.0", macos: "9.2.0"}

  - name: memorywarning
    summary: Fired when the app receives a warning from the operating system about low memory availability.
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.2.3", ipad: "3.2.3", macos: "9.2.0"}

  - name: pause
    summary: Fired when the application transitions from active to inactive state on a multitasked system.
    description: |
        This event fires when the user leaves the application or for certain types of temporary interruptions
        such as a notification or incoming phone call. On an iPad application with split view enabled,
        the event will be called once the application is put in the background and a different split view
        application is focused.

        See the `applicationWillResignActive` section of the official Apple documentation about
        [Monitoring Application State Changes](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622950-applicationwillresignactive)
        for the exact behavior that triggers this event.

        Note that calls to functions that modify the UI during this event may be partially executed,
        **up to** the UI call before the suspension. See [paused](Titanium.App.paused) event. If this happens, the remainder of the code will
        be executed after the application is resumed, but before the `resume` event is triggered.
    platforms: [android, iphone, ipad, macos]
    since: {android: "7.5.0", iphone: "0.8", ipad: "0.8", macos: "9.2.0"}

  - name: paused
    summary: Fired when the application transitions to the background on a multitasked system.
    description: |
        This event fires when putting the application in the background using the home button
        or when using the sleep/wake or power button.

        This event fires when the user leaves the application.

        See the `applicationDidEnterBackground` section of the official Apple documentation about
        [Monitoring Application State Changes](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622997-applicationdidenterbackground?language=objc)
        for the exact behavior that triggers this event.

    platforms: [android, iphone, ipad, macos]
    since: {android: "7.5.0", iphone: "2.1.0", ipad: "2.1.0", macos: "9.2.0"}

  - name: proximity
    summary: Fired when the proximity sensor changes state.
    description: |
        The proximity sensor detects whether the device is being held up to the user's ear,
        and shuts down the display.

        Proximity events are only fired when [proximityDetection](Titanium.App.proximityDetection)
        is `true`.
    properties:
      - name: state
        summary: Proximity state value.
        type: Boolean
    platforms: [iphone, android]
    since: {android: "3.3.0"}

  - name: uncaughtException
    summary: Fired when an uncaught JavaScript exception occurs.
    description: |
        This event will occur in both production and development builds, allowing you to warn the
        user that an error has occured, and log more information to help you fix any bugs.
    properties:
      - name: message
        summary: The error message.
        type: String
      - name: line
        summary: The line where the error occurred.
        type: Number
      - name: sourceId
        summary: A unique identification for the source file.
        type: Number
        platforms: [iphone, ipad, macos]
      - name: type
        summary: The type of error.
        type: String
        platforms: [iphone, ipad, macos]
      - name: sourceURL
        summary: The URL to the source file.
        type: String
        platforms: [iphone, ipad, macos]
      - name: backtrace
        summary: The backtrace of function calls when the error occurred.
        type: String
        deprecated: 
          since: "8.0.0"
          removed: "8.0.0"
          notes: Use the `stack` property instead.
        platforms: [iphone, ipad]
      - name: title
        summary: The title for the error.
        type: String
        platforms: [android]
      - name: sourceName
        summary: The name of the source file.
        type: String
        platforms: [android]
      - name: lineSource
        summary: The line source reference.
        type: String
        platforms: [android]
      - name: lineOffset
        summary: The offset on the line where the error occurred. (Deprecated since 9.0.0. Use `column` instead.)
        type: Number
        deprecated: 
          since: "9.0.0"
          notes: Use `column` property for cross-platform parity.
        platforms: [android]
      - name: javascriptStack
        summary: The javascript stack trace of the exception. (Deprecated since 9.0.0. Use `stack` instead.)
        type: String
        since: "8.0.0"
        deprecated: 
          since: "9.0.0"
          notes: Use `stack` property for cross-platform parity.
        platforms: [android]
      - name: javaStack
        summary: The java stack trace of the exception. (Deprecated since 9.0.0. Use `nativeStack` instead.)
        type: String
        since: "8.0.0"
        deprecated: 
          since: "9.0.0"
          notes: Use `nativeStack` property for cross-platform parity.
        platforms: [android]
      - name: stack
        summary: The javascript stack trace of the exception.
        type: String
        since: "9.0.0"
      - name: nativeStack
        summary: The native platform stack trace of the exception.
        type: String
        since: "9.0.0"
      - name: column
        summary: The column offset on the line where the error occured.
        type: Number
        since: {android: "9.0.0",  iphone: "4.1.0", ipad: "4.1.0", macos: "9.2.0"}
    platforms: [android, iphone, ipad, macos]
    since: "4.1.0"

  - name: resume
    summary: Fired when the application returns to the foreground on a multitasked system.
    description: |
        This event fires when putting the application in the background
        using the home button and when using the sleep/wake or power button.

        Note that this event does not fire for pauses resulting from notifications or incoming phone
        calls.

        See the `applicationWillEnterForeground` section of the official Apple documentation about
        [Monitoring Application State Changes](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623076-applicationwillenterforeground)
        for the exact behavior that triggers this event.
    platforms: [android, iphone, ipad, macos]
    since: {android: "7.5.0", iphone: "0.8", ipad: "0.8", macos: "9.2.0"}

  - name: resumed
    summary: Fired when the application returns to the foreground.
    description: |
        This event fires when the application enters the foreground with the `resume` event or
        returns to focus after a notification or incoming phone call. On an iPad with split view enabled,
        this event will be called every time the application resized.

        See the `applicationDidBecomeActive` section of the official Apple documentation about
        [Monitoring Application State Changes](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622956-applicationdidbecomeactive)
        for the exact behavior that triggers this event.

        Note: This event will not be fired for URL's in iOS 10+ that are handled by the <Modules.SafariDialog>
        or <Titanium.UI.WebView>, because Apple does not call the `applicationDidBecomeActive` for
        URL-handling anymore. Instead, use the `handleurl` event in <Titanium.App.iOS>.
    platforms: [android, iphone, ipad, macos]
    since: {android: "7.5.0", iphone: "0.8", ipad: "0.8", macos: "9.2.0"}

  - name: started
    summary: Fired after the "app.js" or "alloy.js" gets executed during application startup.
    description: |
        The intention of this event is for modules to defer firing their own startup related events
        until the app developer's main script has had a chance to add listeners for them.
    since: '8.0.0'

  - name: keyboardframechanged
    summary: Fired when the soft keyboard is presented, on and off the screen.
    description: |
        This event fires when the application presents the soft keyboard on/off the screen . The
        event returns the dictionary `keyboardFrame` containing `x`, `y`, `height` and `width` keys,
        corresponding to the frame of the keyboard with respect to the screen coordinates.

        On Titanium SDK 4.0.0 and later the event also contains a second parameter `animationDuration` representing
        the duration of the animation for the presentation and dismissal of the soft keyboard.

        Note that the keyboard `height` and `width` properties will not be accurate when the keyboard
        is being dissmissed.
    properties:
      - name: keyboardFrame
        summary: A dictionary with keys x, y, width and height representing the frame of keyboard on screen.
        type: Dimension

      - name: animationDuration
        summary: The duration of the keyboard animation. This parameter is only available on Titanium SDK 4.0.0 and later.
        type: Number
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.0.0", ipad: "3.0.0", macos: "9.2.0"}

  - name: significanttimechange
    summary: Fired when there is a significant change in the time.
    description: |
        Examples of significant time changes include the arrival of midnight, an update to the time by a carrier,
        and the change to daylight savings time. If your application is currently in `paused` state, this message
        will be is queued until your application returns to the foreground, at which point it is delievered. If multiple
        changes occur, only the most recent one is delievered.
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.1.0", ipad: "3.1.0", macos: "9.2.0"}

  - name: shortcutitemclick
    summary: Fired when a <Titanium.UI.ShortcutItem> is clicked.
    properties:
      - name: id
        summary: Identifier of the clicked shortcut item.
        type: String
    platforms: [iphone, ipad, android, macos]
    since: {android: "7.5.0", iphone: "7.5.0", ipad: "7.5.0", macos: "9.2.0"}

  - name: userinteraction
    summary: Called whenever an interaction with the window occurred. To be used together with the <Titanium.App.trackUserInteraction> property.
    description: |
        Implement this method if you wish to know that the user has interacted with the device in some
        way while your app is running.

        Note that this callback will be invoked for the touch down action that begins a touch gesture,
        but may not be invoked for the touch-moved and touch-up actions that follow.

        See also:
          - Android: See the [onUserInteraction](https://developer.android.com/reference/android/app/Activity.html#onUserInteraction()) callback
          - iOS: See the [sendEvent](https://developer.apple.com/documentation/uikit/uiapplication/1623043-sendevent) delegate
    platforms: [android, iphone, ipad, macos]
    since: {android: "7.5.0", iphone: "7.5.0", ipad: "7.5.0", macos: "9.2.0"}

methods:
  - name: fireSystemEvent
    summary: Fire a system-level event such as <Titanium.App.EVENT_ACCESSIBILITY_ANNOUNCEMENT>.
    platforms: [android, iphone, ipad, macos]
    since: {android: "3.0.0", iphone: "3.0.0", ipad: "3.0.0", macos: "9.2.0"}
    parameters:
      - name: eventName
        summary: The name of the event to fire.
        type: String
      - name: param
        summary: A parameter to be passed to the system event.
        type: String
        optional: true

  - name: getArguments
    summary: Returns the arguments passed to the application on startup.
    description : |
        On Android, fetch the [Ti.Android.rootActivity](Titanium.Android.rootActivity) object and
        read its [intent](Titanium.Android.Activity.intent) property to retrieve the parameters used
        to launch the application activity. Note that this [intent](Titanium.Android.Activity.intent)
        will change when a "[newintent](Titanium.Android.Activity.newintent)" event has been fired.
    platforms: [iphone, ipad, macos]
    returns:
        type: launchOptions
    deprecated:
      since: "10.0.0"
      notes: Use the <Titanium.App.arguments> property instead

properties:
  - name: EVENT_ACCESSIBILITY_ANNOUNCEMENT
    summary: Convenience constant for system event "accessibilityannouncement".
    type: String
    permission: read-only
    platforms: [android, iphone, ipad, macos]
    since: {android: "3.0.0", iphone: "3.0.0", ipad: "3.0.0", macos: "9.2.0"}

  - name: EVENT_ACCESSIBILITY_CHANGED
    summary: Convenience constant for system event "accessibilitychanged".
    type: String
    permission: read-only
    platforms: [android, iphone, ipad, macos]
    since: {android: "3.0.0", iphone: "3.0.0", ipad: "3.0.0", macos: "9.2.0"}

  - name: accessibilityEnabled
    summary: Indicates whether Accessibility is enabled by the system.
    type: Boolean
    permission: read-only

  - name: analytics
    summary: Indicates whether Analytics is enabled, determined by `tiapp.xml`.
    type: Boolean
    permission: read-only

  - name: copyright
    summary: Application copyright statement, determined by `tiapp.xml`.
    type: String
    permission: read-only

  - name: currentService
    summary: A reference to the currnet background service running when the application is placed in the background.
    type: Titanium.App.iOS.BackgroundService
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: deployType
    summary: |
        Build type that reflects how the application was packaged.

        Returns one of the following values:
        * `development` (Simulator)
        * `test` (Device)
        * `production` (App Store / Adhoc)
    type: String
    permission: read-only

  - name: description
    summary: Application description, determined by `tiapp.xml`.
    type: String
    permission: read-only

  - name: guid
    summary: Application globally-unique ID, determined by `tiapp.xml`.
    description: This value is system-generated and consistent through all versions.
    type: String
    permission: read-only

  - name: forceSplashAsSnapshot
    summary: Shows the application's splash screen on app resume.
    description: |
        Note: This only works on device.
        When the app goes to the background a screenshot of the current app state is taken. When
        the app resumes that screenshot is shown for brief moment. To disable this behavior, set
        this property to `true` and the default splash screen will show on app resume instead.
    type: Boolean
    platforms: [iphone, ipad, macos]

  - name: id
    summary: Application ID, from `tiapp.xml`.
    description: |
        The application ID is a required property that must be specified when creating a new project.
    type: String
    permission: read-only

  - name: installId
    summary: The install ID for this application.
    description: |
        The application install ID is a unique identifier (UUID) for this
        install of the application. It is not modified by application updates;
        only when an application is initially installed, or removed and
        re-installed.
    type: String
    platforms: [iphone, ipad, macos]
    permission: read-only
    since: {iphone: "2.0.0", ipad: "2.0.0", macos: "9.2.0"}

  - name: idleTimerDisabled
    summary: Determines whether the screen is locked when the device is idle.
    description: Set to `true` to disable the timer.
    type: Boolean
    platforms: [iphone, ipad, macos]

  - name: name
    summary: Application name, determined by `tiapp.xml`.
    type: String
    permission: read-only

  - name: proximityDetection
    summary: Determines whether proximity detection is enabled.
    description: |
        Set to `true` to receive <Titanium.App.proximity> events.
    type: Boolean
    default: false
    platforms: [iphone, ipad, android, macos]
    since: {android: "3.3.0", macos: "9.2.0"}

  - name: proximityState
    summary: |
        Indicates the state of the device's proximity sensor, according to the
        <Titanium.App.proximity> event.
    description: |
        This property is `true` when the proximity sensor is close to the user.

        When <Titanium.App.proximityDetection> is disabled, the value of this property is undefined.
    type: Boolean
    permission: read-only
    platforms: [iphone, android]
    since: {android: "3.3.0"}

  - name: disableNetworkActivityIndicator
    summary: |
        Prevents network activity indicator from being displayed.
    description: |
        Setting this property to true disables display of the network activity indicator when network activity is in progress.
        If the network activity indicator is currently visible, it is hidden immediately.

        **NOTE: In general, the user should always be made aware of network activity. The network activity indicator should only be disabled for very brief network activity (a few seconds).**
    type: Boolean
    default: false
    platforms: [iphone, ipad, macos]
    since: {iphone: "3.0.0", ipad: "3.0.0", macos: "9.2.0"}

  - name: publisher
    summary: Application publisher, from `tiapp.xml`.
    type: String
    permission: read-only

  - name: sessionId
    summary: Unique session identifier for the current continuous run of the application.
    type: String
    permission: read-only

  - name: url
    summary: Application URL, from `tiapp.xml`.
    type: String
    permission: read-only

  - name: version
    summary: Application version, from `tiapp.xml`.
    type: String
    permission: read-only

  - name: keyboardVisible
    summary: Indicates whether or not the soft keyboard is visible.
    type: Boolean
    permission: read-only
    platforms: [iphone, ipad, macos]

  - name: trackUserInteraction
    summary: Indicates whether or not the user interaction shoud be tracked.
    description: |
        Use the <Titanium.App.userinteraction> event to get notified about user interaction.
        For Android, user-interactions are controlled by the event and do not require this
        property to be set explicitely. For iOS, this is done to prevent additional overhead.
    type: Boolean
    accessors: false
    platforms: [iphone, ipad, macos]
    since: {iphone: "7.5.0", ipad: "7.5.0", macos: "9.2.0"}

  - name: arguments
    summary: The arguments passed to the application on startup.
    description : |
        On Android, fetch the [Ti.Android.rootActivity](Titanium.Android.rootActivity) object and
        read its [intent](Titanium.Android.Activity.intent) property to retrieve the parameters used
        to launch the application activity. Note that this [intent](Titanium.Android.Activity.intent)
        will change when a "[newintent](Titanium.Android.Activity.newintent)" event has been fired.
    platforms: [iphone, ipad, macos]
    since: {iphone: "10.0.1", ipad: "10.0.1", macos: "10.0.1"}
    type: launchOptions


---
name: launchOptions
summary: |
    Dictionary describing the arguments passed to the application on startup.
    Use the [getArguments](Titanium.App.getArguments) method to retrieve the launch options.
properties:
  - name: url
    summary: |
        This key indicates that the application was launched in order to open
        the specified URL.
    type: String

  - name: source
    summary: |
        This key indicates that the application was launched by another
        application with the specified bundle ID.
    type: String

  - name: launchOptionsLocationKey
    summary: |
        If set to `true`, this key indicates that the application was launched in response to an
        incoming location event.
    type: Boolean
    default: false
